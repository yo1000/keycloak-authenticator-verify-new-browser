{
  "profile": "qodana.recommended",
  "groups": [
    {
      "name": "Modularization issues",
      "inspections": [
        {
          "shortName": "ClassOnlyUsedInOneModule",
          "displayName": "Class only used from one other module",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which is only depended on and only depends on one module which\nis different from the module containing the class. Such class could be moved into\nthat module.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ModuleWithTooManyClasses",
          "displayName": "Module with too many classes",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any modules which contain too many classes. Overly large modules may\nindicate a lack of design clarity.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of classes a module may have before triggering this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentLanguageLevel",
          "displayName": "Inconsistent language level settings",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection lists modules which depend on other modules with higher language level. Such dependencies should be broken off.\n</body>\n</html>\n"
        },
        {
          "shortName": "ModuleWithTooFewClasses",
          "displayName": "Module with too few classes",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any modules which contain too few classes. Overly small modules may\nindicate an overly fragmented design.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the minimum number of classes a module may have before triggering this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassIndependentOfModule",
          "displayName": "Class independent of its module",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are neither dependent on nor depended on by other classes\nin their module. Such classes are an indication of ad-hoc or incoherent modularisation strategies,\nand may often profitably be moved.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Ant",
      "inspections": [
        {
          "shortName": "AntResolveInspection",
          "displayName": "Ant references resolve problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      Reports unresolved references on properties as well as custom type definitions that cannot be resolved.\n    </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "AntMissingPropertiesFileInspection",
          "displayName": "Missing properties file",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n        Reports missing <b><font color=\"#000080\">properties files</font></b>.\n      </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "AntDuplicateTargetsInspection",
          "displayName": "Duplicate targets",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n        Reports duplicate <b><font color=\"#000080\">targets</font></b> in\n        current build file.\n      </td>\n  </tr>\n</table>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Maven",
      "inspections": [
        {
          "shortName": "MavenParentMissedVersionInspection",
          "displayName": "Parent version missed",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection checks absence of parent version element for maven versions which do not support consumer pom feature\n</body>\n</html>"
        },
        {
          "shortName": "MavenDuplicateDependenciesInspection",
          "displayName": "Duplicate Dependencies",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nMaven Duplicate Dependencies Inspection\n</body>\n</html>"
        },
        {
          "shortName": "MavenDuplicatePluginInspection",
          "displayName": "Duplicate plugin declaration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks duplication of plugin declaration in pom.xml\n</body>\n</html>"
        },
        {
          "shortName": "MavenModelInspection",
          "displayName": "Maven Model Inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nInspects a Maven model for resolution problems.\n</body>\n</html>"
        },
        {
          "shortName": "MavenRedundantGroupId",
          "displayName": "Redundant groupId",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports that definition of &lt;groupId&gt; is unnecessary, because it's already defined in the parent pom.xml.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MavenPropertyInParent",
          "displayName": "Usage of properties in parent description",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports that usage of properties in modules parent definition is prohibited\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "PhpMethodNamingConventionInspection",
          "displayName": "Method name is not following coding convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the methods' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for methods.\n<!-- tooltip end -->\n<p>\n  Use the fields below to specify minimum/maximum length and the regular expression expected for methods' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpVariableNamingConventionInspection",
          "displayName": "Variable name is not following coding convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the variables' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for variables.\n<!-- tooltip end -->\n<p>\n  Use the fields below to specify minimum/maximum length and the regular expression expected for variables' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpFunctionNamingConventionInspection",
          "displayName": "Function name is not following coding convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the functions' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for functions.\n<!-- tooltip end -->\n<p>\n  Use the fields below to specify minimum/maximum length and the regular expression expected for functions' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpConstantNamingConventionInspection",
          "displayName": "Constant name is not following coding convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the constants' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for constants.\n<!-- tooltip end -->\n<p>\n  Use the fields below to specify minimum/maximum length and the regular expression expected for constants' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpClassNamingConventionInspection",
          "displayName": "Class name is not following coding convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the classes' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for classes.\n<!-- tooltip end -->\n<p>\n  Use the fields below to specify minimum/maximum length and the regular expression expected for classes' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpPropertyNamingConventionInspection",
          "displayName": "Property name is not following coding convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the properties' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for properties.\n<!-- tooltip end -->\n<p>\n  Use the fields below to specify minimum/maximum length and the regular expression expected for properties' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Inheritance issues",
      "inspections": [
        {
          "shortName": "AbstractMethodWithMissingImplementations",
          "displayName": "Abstract method with missing implementations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any abstract methods which are not implemented in every concrete\nsubclass. This is a compile-time error on the subclasses, while this inspection\nreports the problem at the point of the abstract method.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterTypePreventsOverriding",
          "displayName": "Parameter type prevents overriding",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameter types in methods that look like they are overriding a super method,\nbut do not because of the parameter type coming from a different package than the super method type,\nalthough the class name matches.\nThis prevents the parameter's method from overriding the super method and can be very confusing.\n<p>Example:\n<pre><code>\n<b>public class</b> A {\n  <b>public void</b> method(Object o) {}\n}\n\n<b>public class</b> B <b>extends</b> A {\n  <b>public void</b> method(Object o) {} // warning on parameter type here\n  <b>class</b> Object {}\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassWithoutAbstractMethods",
          "displayName": "Abstract class without abstract methods",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract classes without abstract methods.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsUtilityClass",
          "displayName": "Class extends utility class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes explicitly declared to extend a utility class. Utility classes\nhave all fields and methods declared <b>static</b>. Extending a utility\nclass also allows inadvertent object instantiation of the utility class, because to allow extension\nthe constructor can not be made private.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore any classes that override a utility class but are also utility classes themselves.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassExtendsConcreteClass",
          "displayName": "Abstract class extends concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract classes which extend concrete classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsAnnotation",
          "displayName": "Class extends annotation interface",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any classes declared as implementing or extending an annotation\ninterface. While it is legal to extend an annotation interface, it is often done by accident,\nand the result won't be usable as an annotation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodOverridesConcreteMethod",
          "displayName": "Abstract method overrides concrete method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract methods which override concrete methods.\nMethods overridden from <b>java.lang.Object</b> are not reported\nby this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticInheritance",
          "displayName": "Static inheritance",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports interfaces which are implemented for no reason other than\naccess to constants. Such inheritance is often confusing, and may hide important dependency\ninformation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonProtectedConstructorInAbstractClass",
          "displayName": "'public' constructor in 'abstract' class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports constructors in abstract classes that are not\ndeclared <b>protected</b>, package-protected or\n<b>private</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodOverridesAbstractMethod",
          "displayName": "Abstract method overrides abstract method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>abstract</b> methods which override <b>abstract</b> methods. Methods with\ndifferent return types, exception declarations, annotations or modifiers than the method they override are not\nreported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the first checkbox to ignore any abstract methods that have a different JavaDoc comment than their super method.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitSubclassInspection",
          "displayName": "Final declaration can't be overridden at runtime",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases when your code prevents a class from being subclassed by some framework\n(e.g. Spring or Hibernate) at runtime.\n<!-- tooltip end -->\n<p>The typical examples when subclassing is necessary but impossible are:</p>\n<ul>\n  <li><code>final</code> classes marked with framework-specific annotations (e.g. Spring <code>@Configuration</code>)</li>\n  <li><code>final</code>, <code>static</code> or <code>private</code> methods\n    marked with framework-specific annotations (e.g. Spring <code>@Transactional</code>)</li>\n  <li>methods marked with framework-specific annotations inside <code>final</code> classes</li>\n</ul>\n\n<p>The list of reported cases depends on the frameworks used.</p>\n</body>\n</html>"
        },
        {
          "shortName": "FrequentlyUsedInheritorInspection",
          "displayName": "Class may extend a commonly used base class",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThe inspection finds commonly used class/interface that could be extended/implemented instead of extending too broad interface or class.\n<!-- tooltip end -->\nThe inspection works only if a project is built using IntelliJ IDEA build system and a super class is located inside project source files.\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantMethodOverride",
          "displayName": "Method is identical to its super method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any method with a signature identical to its super method and either has an identical body to the super method or only\ncalls the super method.\nSuch a method is redundant and can be removed.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to check methods overriding methods from libraries as well.\nChecking library methods may adversely affect the performance of this inspection.\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceNeverImplemented",
          "displayName": "Interface which has no concrete subclass",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports interfaces which have no concrete subclasses.\n<!-- tooltip end -->\n<p>\n  Use the list below to specify special annotations. Interfaces annotated with one of these annotations will be ignored by this inspection.\n<p>\n  Use the checkbox below to ignore interfaces that only declare constant fields.\n  Such interfaces my still be usable even without implementations.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RefusedBequest",
          "displayName": "Method does not call super method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any methods which override a concrete method,\nbut which do not call that method as <b>super</b>. This is also known as a <i>refused bequest</i> and such methods\nmay represent a failure of abstraction which can lead to hard-to-trace bugs. Default methods and methods overridden\nfrom <b>java.lang.Object</b>, except for <b>clone()</b>, are not reported by this inspection.\nA <b>clone()</b> method is expected to call its super, which will automatically return an object of the correct type.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to only warn when the super method is annotated by an annotation specified in the table below.\n<p>\nUse the second checkbox below to ignore super methods when they are empty or only throw an exception.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsConcreteCollection",
          "displayName": "Class explicitly extends a Collection class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any clases which extend concrete classes of type\n<b>java.util.Collection</b> or\n<b>java.util.Map</b>. Subclassing collection types\nis a common practice of novice object-oriented developers, but is considerably\nmore brittle than delegating collection calls.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MissingOverrideAnnotation",
          "displayName": "Missing @Override annotation",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports any methods which override methods in a superclass but\ndo not have the <b>@java.lang.Override</b> annotation.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection ignore the\n<b>java.lang.Object</b> methods\n<b>equals()</b>,\n<b>hashCode()</b> and\n<b>toString()</b>. The risk of these methods\ngoing missing and thus your code not compiling anymore due to the\n<b>@Override</b> annotation is vanishingly small.\n<p>\nUse the second checkbox below to have this inspection ignore overriding methods\nin anonymous classes.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "AbstractClassNeverImplemented",
          "displayName": "Abstract class which has no concrete subclass",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports abstract classes which have no\nconcrete subclasses.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ProblematicVarargsMethodOverride",
          "displayName": "Non-varargs method overrides varargs method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods overriding a variable arity method and replacing the variable arity parameter with an array parameter.\nWhile this is legal Java, it can be confusing.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterExtendsFinalClass",
          "displayName": "Type parameter extends final class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any type parameters declared to extend a final class. Since\nfinal classes cannot be extended, the type parameter could be replaced with the type\nof the specified final class.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "GroovyBreak",
          "displayName": "Break statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements other than in switch statements.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConstantConditional",
          "displayName": "Constant conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions of the form\n<b>true?<i>result1</i>:<i>result2</i></b> or <b>false?<i>result1</i>:<i>result2</i></b>.\nThese expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySwitchStatementWithNoDefault",
          "displayName": "Switch statement with no default case",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements that do not contain\n<b>default</b> labels.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyLoopStatementThatDoesntLoop",
          "displayName": "Loop statement that doesn't loop",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> or <b>while</b> statements whose\nbodies are guaranteed to execute at most once. Normally, this is an indication of a bug.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyContinue",
          "displayName": "Continue statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyIfStatementWithTooManyBranches",
          "displayName": "If statement with too many branches",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements with too many branches.\nSuch statements may be confusing, and are often the sign of inadequate levels of design\nabstraction.\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum number of branches expected.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnnecessaryContinue",
          "displayName": "Unnecessary 'continue' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>continue</b> statements at the end of loops.\nThese may be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnnecessaryReturn",
          "displayName": "Unnecessary 'return' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>return</b> statements at the end of constructors and\nmethods returning <b>void</b>. These may be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrFinalVariableAccess",
          "displayName": "Final variable access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports invalid assignments to final variables, parameters and fields and not initialized final fields.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditionalCanBeElvis",
          "displayName": "Conditional expression can be elvis",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary condition operators which can be replaced by the simpler\n\"elvis\" operator.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditionalWithIdenticalBranches",
          "displayName": "Conditional expression with identical branches",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions\nwith identical \"then\" and \"else\" branches.  Such expressions are almost certainly\nprogrammer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyTrivialConditional",
          "displayName": "Redundant conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional operators of the form <b>x?true:false</b>\nor similar, which can be trivially simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyFallthrough",
          "displayName": "Fallthrough in switch statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <i>fallthrough</i> in switch statements.  While occasionally useful,\n  fallthrough is often unintended, and may lead to surprising bugs.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConstantIfStatement",
          "displayName": "Constant if statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements of the form\n<b>if(true)...</b> or <b>if(false)...</b>.\nThese statements sometimes occur due to automatic refactorings, and may obviously\nbe simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditionalCanBeConditionalCall",
          "displayName": "Conditional expression can be conditional call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions which can be replaced by the conditional\ncall (?.) operation.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyTrivialIf",
          "displayName": "Redundant 'if' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements which can be simplified to single assignment\nor\n<b>return</b> statements. For example:\n <pre>\n    <b>if</b>(foo())\n    {\n       <b>return true</b>;\n    }\n    <b>else</b>\n    {\n       <b>return false</b>;\n    }\n</pre>\ncan be simplified to\n <pre>\n    <b>return</b> foo();\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyReturnFromClosureCanBeImplicit",
          "displayName": "'return' statement can be implicit",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports  return statements at the end of closures which can be made implicit.\nGroovy closures implicitly return the value of the last statement in them.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyIfStatementWithIdenticalBranches",
          "displayName": "If statement with identical branches",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b>\nstatements with identical \"then\" and <b>else</b> branches. Such statements are almost certainly\nprogrammer error.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Javadoc",
      "inspections": [
        {
          "shortName": "JavadocHtmlLint",
          "displayName": "HTML problems in Javadoc (DocLint)",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects HTML issues in the Javadoc comments (such as unclosed, empty, or misplaced tags) outlawed since Java 8.\n</body>\n</html>"
        },
        {
          "shortName": "PackageInfoWithoutPackage",
          "displayName": "'package-info.java' without 'package' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>package-info.java</b> files without a <b>package</b> statement.\nThe Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlTagCanBeJavadocTag",
          "displayName": "<code>...</code> can be replaced with {@code ...}",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports use of <b>&lt;code&gt;</b> tags in Javadoc comments. Since JDK1.5\nthese constructs may be replaced with <b>{@code ...}</b> constructs. This allows the use of angle brackets (&lt;, &gt;)\ninside the comment, instead of HTML character entities.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JavadocReference",
          "displayName": "Declaration has problems in Javadoc references",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection points out unresolved references inside javadoc\n</body>\n</html>\n"
        },
        {
          "shortName": "MissingPackageInfo",
          "displayName": "Missing 'package-info.java'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports packages that contain classes but do not contain a <b>package-info.java</b> or <b>package.html</b> file and thus are\nmissing package documentation.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MissingDeprecatedAnnotation",
          "displayName": "Missing @Deprecated annotation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any module declarations, classes, fields, or methods which have the <b>@deprecated</b>\njavadoc tag but do not have the <b>@java.lang.Deprecated</b> annotation.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\nUse the checkbox below to warn on symbols annotated with <b>@Deprecated</b> without a corresponding explanation in a\n<b>@deprecated</b> Javadoc tag.\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageDotHtmlMayBePackageInfo",
          "displayName": "'package.html' may be converted to 'package-info.java'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>package.html</b> files. These files are used for documenting\npackages. Since J2SE 5 it is recommended to use <b>package-info.java</b> files instead, since such\nfiles can also contain package annotations.  In this way, package-info.java becomes the\nsole repository for package level annotations and documentation.\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryJavaDocLink",
          "displayName": "Unnecessary Javadoc link",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Javadoc <b>@see</b>,\n<b>{@link}</b> and <b>{@linkplain}</b>\ntags which reference the method owning the comment, the super method of the\nmethod owning the comment or the class containing the comment. Such links are\nunnecessary and can be safely removed using this inspections quickfix. The\nquickfix will remove the entire Javadoc comment if the link is its only content.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore inline links (<b>{@link}</b> and <b>{@linkplain}</b>)\nto super methods. While a link to all super methods is automatically added by the\nJavadoc tool, an inline link to the super method can occasionally be needed in\nthe text of the Javadoc.\n\n</body>\n</html>"
        },
        {
          "shortName": "DanglingJavadoc",
          "displayName": "Dangling Javadoc comment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports dangling Javadoc comments.\nJavadoc comment are dangling if they don't belong to any class, method or field.\nFor example a Javadoc comment in between method declarations that have their own javadoc comments.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryInheritDoc",
          "displayName": "Unnecessary {@inheritDoc} Javadoc comment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Javadoc comments which contain only the <b>{@inheritDoc}</b>\ntag. Since Javadoc copies the super class' comment if no comment is present, a\ncomment containing only an <b>{@inheritDoc}</b> adds nothing.\n<p>\nAlso reports <b>{@inheritDoc}</b> usages in invalid locations, for example on fields.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JavaDoc",
          "displayName": "Declaration has Javadoc problems",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection points out the following javadoc comment flaws: <br> <br>\n&nbsp;- no javadoc where it is required <br>\n&nbsp;- required tag is missing <br>\n&nbsp;- invalid or incomplete tag <br>\n&nbsp;- javadoc description is missing or incomplete <br> <br>\n<!-- tooltip end -->\nUse tabs and corresponding inspection options below, to define visibility scope where javadoc is required, as well as the\nrequired javadoc tags for classes, methods, fields and inner classes.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Serialization issues",
      "inspections": [
        {
          "shortName": "SerializableInnerClassWithNonSerializableOuterClass",
          "displayName": "Serializable non-'static' inner class with non-Serializable outer class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> non-static\ninner classes whose outer classes are non-<b>Serializable</b>. Such classes\nare unlikely to serialize correctly, due to implicit references from the inner to outer class.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableWithSerialVersionUIDField",
          "displayName": "Non-serializable class with 'serialVersionUID'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> classes which define a <b>serialVersionUID</b>\nfield. This is usually an indication of a programmer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReadObjectAndWriteObjectPrivate",
          "displayName": "'readObject()' or 'writeObject()' not declared 'private'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes where the <b>readObject</b>\nand <b>writeObject()</b> methods are not declared <b>private</b>. There is no reason these methods should ever\nhave greater visibility than that.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerialAnnotationUsedOnWrongMember",
          "displayName": "@Serial annotation used on wrong member",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports methods and fields in <b>Serializable</b> and <b>Externalizable</b> classes that are not suitable to be annotated with the <b>java.io.Serial</b> annotation.\n<p>\nExamples:<br>\n<code><pre>\nclass Test implements Serializable {\n  @Serial //The annotated field is not a part of serialization mechanism as it's not final\n  private static long serialVersionUID = 7874493593505141603L;\n\n  @Serial //The annotated method is not a part of the serialization mechanism as it's not private\n  void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n</pre></code>\n<code><pre>\nclass Test implements Externalizable {\n  @Serial //The annotated method is not a part of the serialization mechanism as it's inside Externalizable class\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n</pre></code>\n<p>To get more information about all valid cases, refer the documentation for <b>java.io.Serial</b>.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SerializableHasSerializationMethods",
          "displayName": "Serializable class without 'readObject()' and 'writeObject()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes\nwhich do not provide <b>readObject</b> and\n<b>writeObject</b> methods. If <b>readObject</b>\nand <b>writeObject</b> methods are not provided, the default serialization\nalgorithms are used, which may be sub-optimal in many environments for performance and compatibility\npurposes.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableInnerClassHasSerialVersionUIDField",
          "displayName": "Serializable non-'static' inner class without 'serialVersionUID'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> non-static\ninner classes which do not provide a <b>serialVersionUID</b> field.\nWithout a <b>serialVersionUID</b> field, any change to a class will make previously serialized versions unreadable.\nIt is strongly recommended that <b>Serializable</b> non-static inner classes have\na <b>serialVersionUID</b> field, otherwise the default serialization algorithm\nmay result in serialized versions being incompatible between compilers, due to differences in synthetic\naccessor methods.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableHasSerialVersionUIDField",
          "displayName": "Serializable class without 'serialVersionUID'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>Serializable</b> classes which do not provide a <b>serialVersionUID</b> field.\nWithout a <b>serialVersionUID</b> field, any change to a class will make previously serialized versions unreadable.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\nUse the checkbox below to ignore <b>Serializable</b> anonymous classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MissingSerialAnnotation",
          "displayName": "@Serial annotation could be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports methods and fields in <b>Serializable</b> and <b>Externalizable</b> classes that are suitable to be annotated with the <b>java.io.Serial</b> annotation.\n<p>\nExamples:<br>\n<code><pre>\nclass Test implements Serializable {\n  // could be marked as @Serial\n  private static final long serialVersionUID = 7874493593505141603L;\n\n  // could be marked as @Serial\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n</pre></code>\n<code><pre>\nclass Test implements Externalizable {\n  // could be marked as @Serial\n  protected Object readResolve() throws ObjectStreamException {\n    return \"SomeObject\";\n  }\n}\n</pre></code>\n<p>To get more information about all possible cases, refer the documentation for <b>java.io.Serial</b>.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SerialPersistentFieldsWithWrongSignature",
          "displayName": "'serialPersistentFields' field not declared 'private static final ObjectStreamField[]'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes whose <b>serialPersistentFields</b> field.\nis not declared <b>private static final ObjectStreamField[]</b>.\nIf the <b>serialPersistentFields</b> field does not have these modifiers,\nthe serialization behavior will be as if the field were not declared at all.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableRecordContainsIgnoredMembers",
          "displayName": "Serializable record contains ignored members",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports members related to serialization of regular classes (<code>writeObject</code>, <code>readObject</code>, <code>readObjectNoData</code>,\n<code>writeExternal</code>, <code>readExternal</code>, <code>serialPersistentFields</code>)\ndefined in record classes. These members are ignored during serialization/deserialization of records.<br>\nExamples:<br>\n<code><pre>\nrecord R1() implements Serializable {\n  @Serial\n  private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0]; //The field is ignored during record serialization\n  @Serial\n  private void writeObject(ObjectOutputStream out) throws IOException { //The method is ignored during record serialization\n  }\n}\n</pre></code>\n<code><pre>\nrecord R2() implements Externalizable {\n  @Override\n  public void writeExternal(ObjectOutput out) throws IOException { //The method is ignored during record serialization\n  }\n  @Override\n  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { //The method is ignored during record serialization\n  }\n}\n</pre></code>\n<!-- tooltip end -->\n<p>This inspection only applies to language level 14 or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorNotSerializable",
          "displayName": "Comparator class not declared Serializable",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on subclasses of <b>java.lang.Comparator</b> which are not\nalso <b>Serializable</b>. Objects of <b>java.util.TreeMap</b>\nor <b>java.util.TreeSet</b> will become non-<b>Serializable</b>\nif instantiated with such <b>Comparator</b>s. This can result in unexpected and difficult-to-diagnose\nbugs. Since subclasses of <b>java.lang.Comparator</b> are often stateless, simply marking\nthem <b>Serializable</b> is a small cost to avoid such issues.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReadObjectInitialization",
          "displayName": "Instance field may not be initialized by 'readObject()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports variables which are not guaranteed to be initialized after the object is\ndeserialized by the <b>readObject()</b> method.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report instance variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableObjectBoundToHttpSession",
          "displayName": "Non-serializable object bound to HttpSession",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> objects used as arguments to\n<b>javax.servlet.http.HttpSession.setAttribute()</b> or\n<b>javax.servlet.http.HttpSession.putValue()</b>.\nSuch objects will not be serialized if the HttpSession is passivated or migrated, and may result in difficult-to-diagnose\nbugs. For purposes of this inspection, objects with <b>java.util.Collection</b> or\n<b>java.util.Map</b> types are assumed to be <b>Serializable</b>, unless the types\nthey are declared to contain are non-<b>Serializable</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerialVersionUIDNotStaticFinal",
          "displayName": "'serialVersionUID' field not declared 'private static final long'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes whose <b>serialVersionUID</b> field\nis not declared <b>private static final long</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TransientFieldInNonSerializableClass",
          "displayName": "Transient field in non-serializable class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>transient</b> fields in non-<b>Serializable</b> classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExternalizableWithSerializationMethods",
          "displayName": "Externalizable class with 'readObject()' or 'writeObject()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Externalizable</b> classes which define <b>readObject()</b>\nor <b>writeObject()</b> methods. These methods are not called for serialization of\n<b>Externalizable</b> objects.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableFieldInSerializableClass",
          "displayName": "Non-serializable field in a Serializable class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b>\nfields in <b>Serializable</b> classes. Such fields will result\nin runtime exceptions if the object is serialized. Fields declared\n<b>transient</b> or <b>static</b>\nare not reported, nor are fields of classes which have defined a <b>writeObject</b>\nmethod. For purposes of this inspection, fields with\n<b>java.util.Collection</b> or\n<b>java.util.Map</b> types are assumed to be\n<b>Serializable</b>, unless the types\nthey are declared to contain are non-<b>Serializable</b>.\n<!-- tooltip end -->\n<p>\nUse the first list below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\nUse the second list below to specify special annotations. Fields annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableWithUnconstructableAncestor",
          "displayName": "Serializable class with unconstructable ancestor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes whose closest non-serializable ancestor lacks\na no-argument constructor. Such classes can not be deserialized.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableStoresNonSerializable",
          "displayName": "Serializable object implicitly stores non-Serializable object",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks lambda's, local and anonymous classes and reports references to local variables outside the class or lambda that are not\n<b>Serializable</b>.\nWhen a local variable is referenced from an anonymous class, it's value is stored in an implicit field in the anonymous class.\nThe same happens for local classes and lambda's.\nIf that variable is of a non-Serializable type, serialization will fail.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableObjectPassedToObjectStream",
          "displayName": "Non-serializable object passed to ObjectOutputStream",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> objects used as arguments to\n<b>java.io.ObjectOutputStream.write()</b>. Such calls will result in runtime exceptions.\nFor purposes of this inspection, objects with <b>java.util.Collection</b> or\n<b>java.util.Map</b> types are assumed to be <b>Serializable</b>, unless the types\nthey are declared to contain are non-<b>Serializable</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TransientFieldNotInitialized",
          "displayName": "Transient field is not initialized on deserialization",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>transient</b> fields which\nare initialized during normal object construction, but whose class does not have a\n<b>readObject</b> method.\nBecause <b>transient</b> fields are not serialized they need\nto be initialized separately in a <b>readObject</b> method\nduring deserialization. Any <b>transient</b> fields which \nare not initialized during normal object construction are considered to use the default\ninitialization and are not reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReadResolveAndWriteReplaceProtected",
          "displayName": "'readResolve()' or 'writeReplace()' not declared 'protected'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes where the <b>readResolve()</b>\nand <b>writeReplace()</b> methods are not declared <b>protected</b>. Note: in the case\nof classes declared <b>final</b>, these methods may be\ndeclared <b>private</b>, instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableWithSerializationMethods",
          "displayName": "Non-serializable class with 'readObject()' or 'writeObject()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> classes which define <b>readObject()</b>\nor <b>writeObject()</b> methods. Such methods normally indicate programmer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExternalizableWithoutPublicNoArgConstructor",
          "displayName": "Externalizable class without 'public' no-arg constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports a <b>Externalizable</b> classes without a public no-argument constructor.\nWhen an Externalizable object is reconstructed, an instance is created using the public no-arg constructor before the readExternal\nmethod called. If a public no-arg constructor is not present a <b>java.io.InvalidClassException</b> will be thrown at runtime.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Security",
      "inspections": [
        {
          "shortName": "SpringSecurityAnnotationBeanPointersResolveInspection",
          "displayName": "Checks errors in spring security annotations",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nChecks errors in Spring security annotations\n</body>\n</html>"
        },
        {
          "shortName": "SpringSecurityFiltersConfiguredInspection",
          "displayName": "Web.xml filter configuration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Validates if Spring Security filter is setup in web application."
        },
        {
          "shortName": "SpringSecurityModelInspection",
          "displayName": "Spring Security model",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates Spring Security model."
        },
        {
          "shortName": "SpringSecurityDebugActivatedInspection",
          "displayName": "Debug activated",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks whether <strong>&lt;debug></strong> is activated (may expose sensitive information)."
        }
      ]
    },
    {
      "name": "Pattern validation",
      "inspections": [
        {
          "shortName": "PatternOverriddenByNonAnnotatedMethod",
          "displayName": "Non-annotated Method overrides @Pattern Method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        This inspecton Checks whether a method without any <code>@Pattern</code> or derived annotation overrides an annotated\n        method from its base classes. This is not necessary for the error-highlighting inside the editor, however the\n        runtime-check instrumentation doesn't pick up annotations from base-class methods.\n      </p>\n\n      <p>\n        A QuickFix is provided to add an annotation that matches the one from the base-class method. This ensures the\n        runtime-check instrumentation works correctly.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "PatternValidation",
          "displayName": "Validate annotated patterns",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Provides on-the-fly validation for expressions passed as argments for <code>@Pattern</code> parameters and\n        values returned from <code>@Pattern</code>-annotated methods.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\">\n        <p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "PatternNotApplicable",
          "displayName": "Pattern Annotation not applicable",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether a pattern-validation annotation (<code>@Pattern</code> or derived ones)\n        is valid to be applied to the annotated element. Only elements of type <code>String</code>\n        may be annotated.\n      </p>\n\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Composer",
      "inspections": [
        {
          "shortName": "PhpComposerExtensionStubsInspection",
          "displayName": "Extension is missing in composer.json",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of classes, functions, and constants from the PHP extensions not specified in <i>composer.json</i>.\n</body>\n</html>"
        },
        {
          "shortName": "ComposerJsonFileReferencesInspection",
          "displayName": "Unresolved file references",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unresolved file references in composer.json.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNotInstalledPackagesInspection",
          "displayName": "Non-installed Composer packages",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the Composer packages that are required in <i>composer.json</i> but are not installed.\n</body>\n</html>"
        },
        {
          "shortName": "PhpComposerDuplicatedRequirementInspection",
          "displayName": "Duplicate package entries in composer.json",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate package entries in the <code>require</code> and <code>require-dev</code> sections of <i>composer.json</i>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDisabledQualityToolComposerInspection",
          "displayName": "Quality tool inspection is disabled",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nHighlights the quality tools' entries in <i>composer.json</i> in case the corresponding code inspections are disabled.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Nullability problems",
      "inspections": [
        {
          "shortName": "ReturnNull",
          "displayName": "Return of 'null'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements with <b>null</b> return values.\nWhile occasionally useful, this construct may make the code more prone\nto failing with a <b>NullPointerException</b>, and often indicates that the\ndeveloper doesn't really understand the class' intended semantics.\nMethods annotated with a <b>@Nullable</b> annotation will be ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to let this inspection ignore <b>private</b> methods.\nThis will also ignore return of <b>null</b> from anonymous classes and lambda's.\n<p>\nUse the bottom three checkboxes to specify whether\n<b>null</b> values on array returns, collection\nobject returns, plain object returns, or a combination of the three should be reported.\nReturn of <b>null</b> in methods with return type <b>java.util.Optional</b> are always reported.\n<p>\nUse the <i>Configure annotations</i> button to specify <b>@Nullable</b> annotations.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NotNullFieldNotInitialized",
          "displayName": "@NotNull field is not initialized",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports fields annotated as not-null which are not initialized in constructor. Example:\n<pre>public class MyClass {\n  private @NotNull String value;\n\n  public void setValue(@NotNull String value) {\n    this.value = value;\n  }\n\n  public @NotNull String getValue() {\n    return value;\n  }\n}</pre>\n<p>\n  Such fields may violate the not-null constraint. E.g. in the example above while <code>setValue</code> parameter is annotated as not-null\n  <code>getValue</code> may return null if setter was not called.\n</p>\n<!-- tooltip end -->\n<p>Use the checkboxes below to control whether warning should be issued if field could be initialized implicitly\n  (e.g. via dependency injection) or if field is written in test case setUp() method.</p>\n</body>\n</html>"
        },
        {
          "shortName": "NullableProblems",
          "displayName": "@NotNull/@Nullable problems",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports problems related to nullability annotations: overriding problems (for example, when a nullable parameter\nis annotated as not-null in the overriding method), non-annotated getters of annotated fields, and so on.\n<br>\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "StringToUpperWithoutLocale",
          "displayName": "Call to 'String.toUpperCase()' or 'toLowerCase()' without a Locale",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toUpperCase()</b> or\n<b>toLowerCase()</b> on <b>String</b> objects which\ndo not specify a <b>java.util.Locale</b>.\nIn these cases the default locale of the system is used, which can cause problems in an internationalized environment.\n<p>\nFor example the code <b>\"i\".toUpperCase().equals(\"I\")</b> returns <b>false</b> in the Turkish and Azerbaijani locales,\nwhere the dotted and dotless 'i' are separate letters.\nCalling <b>toUpperCase()</b> on an English string containing an 'i', when running on a Turkish system, will return incorrect results.\nAlternatively when dealing with strings that should be treated locale independently, like HTML tags, this can lead to errors.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CharacterComparison",
          "displayName": "Character comparison",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any ordinal comparison of <b>char</b> values. In an internationalized\nenvironment, such comparisons are rarely correct.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TimeToString",
          "displayName": "Call to 'Time.toString()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toString()</b> on <b>java.sql.Time</b> objects. Such calls are usually\nincorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbsoluteAlignmentInUserInterface",
          "displayName": "Absolute alignment used in AWT/Swing code",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of absolute alignment constants from AWT and Swing. Internationalized applications should make use of\nrelative alignment, because it respects locale component orientation settings.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitDefaultCharsetUsage",
          "displayName": "Implicit usage of platform's default charset",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method and constructor calls which implicitly use the platform's default charset.\nThese can produce different results on (e.g. foreign language) systems that use a different default charset,\nresulting in unexpected behaviour. A quick-fix could be suggested to specify explicit UTF-8 charset\nif the corresponding overloaded method is available.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "HardCodedStringLiteral",
          "displayName": "Hardcoded strings",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports any instances of hardcoded String literals. Hardcoded string literals are probably errors in\nan internationalized environment. This inspection won't report empty strings and strings consisting of only whitespace.\n\n<p>\n  The checkboxes below may be used to further specialize whether this inspection should report\n  strings in:\n<ul>\n  <li>assert statements, like in <b><font color=\"#000080\">assert str.equals(<font color=\"#008000\">\"message\"</font>)</font></b></li>\n  <li>exception constructor calls, like in <b><font color=\"#000080\">new Exception(<font color=\"#008000\">\"message\"</font>)</font></b></li>\n  <li>JUnit assert calls, like in <b><font color=\"#000080\">assertEquals(str, <font color=\"#008000\">\"message\"</font>)</font></b></li>\n  <li>the only argument to a method returning String, like in <b><font color=\"#000080\">getStringByKey(<font\n      color=\"#008000\">\"key\"</font>)</font></b></li>\n  <li>literals with value of legal and existing class name like <b><font color=\"#000080\">Class.forName(<font color=\"#008000\">\"java.lang.Object\"</font>);</font></b>\n  </li>\n  <li>literals with value of legal and existing property key <b><font color=\"#000080\">bundle.getString(<font color=\"#008000\">\"authentication.failed\"</font>);</font></b>\n  </li>\n</ul>\n\nThere is a quickfix provided that transforms a Java code string literal\ninto a <b><font color=\"#000080\">java.util.ResourceBundle.getString()</font></b>\nmethod call.\n</body>\n</html>\n"
        },
        {
          "shortName": "StringTokenizer",
          "displayName": "Use of StringTokenizer",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of the <b>StringTokenizer</b> class. Many uses of\n<b>StringTokenizer</b> are incorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DialogTitleCapitalization",
          "displayName": "Incorrect string capitalization",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html><body>\nThis inspection checks strings in method parameters and return values annotated with @Nls annotation with \"capitalization\" parameter\nto confirm with capitalization rules, which is required by most platform UI guidelines.\n</body></html>"
        },
        {
          "shortName": "CallToSuspiciousStringMethod",
          "displayName": "Call to suspicious String method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>equals()</b>, <b>equalsIgnoreCase()</b>, <b>compareTo()</b> or <b>compareToIgnoreCase()</b> on <b>String</b> objects.\nSuch calls are usually incorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MagicCharacter",
          "displayName": "Magic character",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"magic characters\", which are character literals used without being named by a constant declaration.\nMagic characters can result in code whose intention is unclear, and may result in errors if a magic\ncharacter is changed in one code location but not another. Such use can complicate internationalization\nefforts.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryUnicodeEscape",
          "displayName": "Unnecessary unicode escape sequence",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unicode escape sequences that are unnecessary, i.e. the file's encoding can handle the character without escaping it.\nUnicode control characters, except for line feed and tab,  are not reported by this inspection.\n  <!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenation",
          "displayName": "String concatenation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any String concatenation (<b>+</b>). Concatenation is usually\nincorrect in an internationalized environment, and should be replaced by uses of\n<b>java.text.MessageFormat</b> or similar classes.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NumericToString",
          "displayName": "Call to Numeric 'toString()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toString()</b> on numeric objects. Such calls are usually\nincorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DateToString",
          "displayName": "Call to 'Date.toString()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toString()</b> on <b>java.util.Date</b> objects. Such calls are usually\nincorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SimpleDateFormatWithoutLocale",
          "displayName": "Instantiating a SimpleDateFormat without a Locale",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.util.SimpleDateFormat</b>\nwhich do not specify a <b>java.util.Locale</b>.\nSuch calls are usually incorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateStringLiteralInspection",
          "displayName": "Duplicate string literal",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports all string literals which are replicated unchanged throughout the project.\n<br> For example:\n<code><pre>\nclass C1 { String CONST1=<b><font color=\"#000080\">\"duplicate string\"</font></b>; }\nclass C2 { String CONST2=<b><font color=\"#000080\">\"duplicate string\"</font></b>; }\n</pre>\n</code>\n\nThe '<b>Ignore @PropertyKey expressions</b>' option allows you to ignore\nstrings passed as arguments to methods annotated with <b>org.jetbrains.annotations.PropertyKey</b> annotation.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if an entry (pattern) is duplicated in the ignore file (e.g. .gitignore, .hgignore).\nDuplicate entries in these files are redundant and can be removed.\n\n<p>Example:</p>\n<pre>\n    # Output directories\n    /out/\n    /target/\n    <b><span style=\"color: #BE9117; \">/out/</span></b>\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "TestNG",
      "inspections": [
        {
          "shortName": "dependsOnMethodTestNG",
          "displayName": "'dependsOnMethods' problem",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html><body>\n    This inspection checks that the dependsOnMethod attribute points to a valid, accessable\n    @Test annotated method in the current class, or any of its parent classes.\n</body></html>\n"
        },
        {
          "shortName": "TestNGDataProvider",
          "displayName": "Data provider problems",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html><body>\nThis inspection checks that data provider method exists and is accessible.\n</body></html>"
        },
        {
          "shortName": "UndeclaredTests",
          "displayName": "Undeclared test",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html><body>\n    This inspection checks if none of your testng.xml files contains current test class.\n</body></html>"
        },
        {
          "shortName": "DuplicatedDataProviderNames",
          "displayName": "Duplicated data provider names",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nInspection detects TestNG data providers with equal names.\n</body>\n</html>"
        },
        {
          "shortName": "JUnitTestNG",
          "displayName": "JUnit Test can be converted to TestNG",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html><body>\n    This inspection will convert your existing JUnit based unit tests into TestNG based unit tests.\n</body></html>"
        },
        {
          "shortName": "ExpectedExceptionNeverThrownTestNG",
          "displayName": "Expected exception never thrown in test method body",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exceptions expected by a TestNG test method,\nwhich are never thrown inside the method body.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "groupsTestNG",
          "displayName": "Groups problem",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html><body>\n    This inspection checks that group name is acceptable according to a list of known groups.\n</body></html>"
        },
        {
          "shortName": "ConvertJavadoc",
          "displayName": "TestNG Javadoc can be converted to annotations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html><body>\n    This inspection asserts your TestNG tests with Javadoc annotations and allows to convert them to JDK annotations.\n</body></html>"
        },
        {
          "shortName": "ConvertOldAnnotations",
          "displayName": "Old TestNG annotation @Configuration is used",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html><body>\n    This inspection will assert to convert your older @Configuration TestNG annotions to the new\n    @BeforeXXX/@AfterXXX style annotations.\n</body></html>"
        },
        {
          "shortName": "DataProviderReturnType",
          "displayName": "Invalid data provider return type",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nInspection checks that method which is marked with <b>@DataProvider</b> annotation\nreturns <b>Object[][]</b> or <b>Iterator&lt;Object&gt;</b>.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Plugin DevKit",
      "inspections": [
        {
          "shortName": "IncompatibleAPI",
          "displayName": "Incompatible API usage",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of incompatible API.\n</body>\n</html>\n"
        },
        {
          "shortName": "DevKitPropertiesQuotesValidation",
          "displayName": "Quotes validation in properties files",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports wrong number of quotes around parameter in property value.\n<br/>\n  If parameters are present in the property value, then the value would be passed as pattern to `java.text.MessageFormat`. \n  This means that single quotes would be used for escaping and in order to keep a quote visible one need to double it.\n  <ul>\n  <li><code>'{0}'</code> &rarr; <code>{0}</code></li>\n  <li><code>''{0}''</code> &rarr; <code>'$value$'</code></li>\n</ul>\n<br/>\nWhen choice format is used, nested formats are evaluated as formats themselves and second dbl quotes are required. \nIf <code>1</code> is passed:\n<ul>\n  <li><code>{0, choice, 0#no|#1''{0}'' file}</code> &rarr;<code>{0} files</code></li>\n  <li><code>{0, choice, 0#no|#1''''{0}'''' file}</code> &rarr;<code>'$number_of_files$' files</code></li>\n</ul>\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ComponentRegistrationProblems",
          "displayName": "Component type mismatch",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds various problems about incorrect registration of plugin components\n(Components and Actions) both in Java code as well as the plugin.xml descriptor.\n\n<p>\n    Those problems include\n    <ul>\n        <li>Unresolved component/action implementation-classes (plugin.xml)</li>\n        <li>Unresolved component interface-classes (plugin.xml)</li>\n        <li>Component implementation-class is not assignable to its interface-class (plugin.xml)</li>\n        <li>Incorrect component registration, e.g. <code>ProjectComponent</code> is registered as Application Component\n            or the class doesn't implement any component interface at all (plugin.xml / Java Code)\n        </li>\n        <li>Incorrect class modifiers: Action classes must be public and must have a public\n            no-argument constructor. Additionally, Action and Component implementation classes\n            must not be abstract (plugin.xml / Java Code)\n        </li>\n        <li>Duplicate interface-class: A class may only be used once as interface-class (plugin.xml)</li>\n    </ul>\n</p>\n\n<p>\n    The inspection provides options to switch off the checks in plugin.xml and Java code. Checking\n    Action classes in Java can also be toggled separately.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "GroovyVariableNotAssigned",
          "displayName": "Variable Not assigned",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports variables that might not have been initialized.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyVariableCanBeFinal",
          "displayName": "Variable can be final",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables or parameters that can be final.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnusedIncOrDec",
          "displayName": "Unused incrementing or decrementing",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on unnecessary incrementing and decrementing expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMissingReturnStatement",
          "displayName": "Missing return statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports missing <b>return</b> statements at the end of methods with a non-<b>void</b> return type.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnusedAssignment",
          "displayName": "Unused assignment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary assignments.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Dependency issues",
      "inspections": [
        {
          "shortName": "CyclicPackageDependency",
          "displayName": "Cyclic package dependency",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which are mutually or cyclically dependent\non other packages. Such cyclic dependencies make for fragile code and high maintenance costs.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CyclicClassDependency",
          "displayName": "Cyclic class dependency",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are mutually or cyclically dependent on\nother classes. Such cyclic dependencies make for fragile code and high maintenance costs.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Dependency",
          "displayName": "Illegal package dependencies",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n\nThis inspection detects violations of rules specified for dependency validation. <br> <br>\n<!-- tooltip end -->\nUse the \"Configure dependency rules\" button below to customize validation rules.\n</body>\n</html>\n"
        },
        {
          "shortName": "ClassWithTooManyDependencies",
          "displayName": "Class with too many dependencies",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are directly dependent on too many\nother classes in the project. Such classes may be prone to instability, as modifications\nto any of the classes it is dependent on may require changing the class. Only top-level\nclasses are reported by this inspection.\n<!-- tooltip end -->\n<p>\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<p>\nUse the field below to specify the maximum number of dependencies a class may have.\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyTransitiveDependencies",
          "displayName": "Class with too many transitive dependencies",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are directly or indirectly dependent\non too many other classes. Such classes may be prone to instability,\nas changes to any of the classes it is dependent on may require changing the class.\nOnly top-level classes are reported by this inspection.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of direct or indirect dependencies\na class may have before triggering this inspection\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyTransitiveDependents",
          "displayName": "Class with too many transitive dependents",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes on which too many other classes are directly or indirectly dependent. Such classes may be expensive to modify,\nas changes to the class may require changing many other classes. Only top-level classes\nare reported by this inspection.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of direct or indirect dependents\na class may have before triggering this inspection\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyDependents",
          "displayName": "Class with too many dependents",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes on which too many other classes\nare directly dependent. Such classes may be expensive to modify, as changes to the class may\nrequire changing many other classes. Only top-level classes are reported by this inspection.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of dependents a class may have before\ntriggering this inspection\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousPackagePrivateAccess",
          "displayName": "Suspicious package-private access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports code which use or override package-private members which are declared in the same package in a different module. If the declaring classes are loaded by different loaders a code which access a package-private member will fail with IllegalAccessError at runtime. If a method overrides a package-private method from a class loaded by a different loader, it won't be invoked when the super method is called on an instance of the implementing class. If a method implements an abstract package-private method from a class loaded by a different loader, calling the super method on an instance of the implementing class will fail with AbstractMethodError\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Guice",
      "inspections": [
        {
          "shortName": "MultipleInjectedConstructorsForClass",
          "displayName": "Multiple @Inject constructors for class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports classes with multiple constructors annotated as @com.google.inject.Inject. Guice\n                will\n                be unable to decide which constructor to invoke to create a class instance if multiple constructors are\n                annotated.\n\n</body>\n</html>"
        },
        {
          "shortName": "ConflictingAnnotations",
          "displayName": "Conflicting Guice annotations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any conflicting Guice annotations on a given class. For instance, declaring a\n                class as both @ImplementedBy and @ProvidedBy, or both @Singleton and @SessionScoped.\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantToProviderBinding",
          "displayName": "Redundant provider binding",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any explicit provider bindings which are equivalent to a @ProvidedBy annotation\n                on the bound class. Such provider bindings are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "SingletonInjectsScoped",
          "displayName": "@Singleton component injects scoped component",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.Singleton classes which\n                injects a @com.google.inject.servlet.RequestScoped or @com.google.inject.servlet.SessionScoped class.\n                Such scope inversion has indeterminate semantics, and is very likely not what is intended.\n\n</body>\n</html>"
        },
        {
          "shortName": "UninstantiableProvidedByClass",
          "displayName": "Uninstantiable @ProvidedBy class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ProvidedBy annotations where the specified class is not\n                instantiable by Guice. A class may be uninstantiable because it is an interface, is abstract, or does\n                not\n                have an injectable constructor.\n\n</body>\n</html>"
        },
        {
          "shortName": "InterceptionAnnotationWithoutRuntimeRetention",
          "displayName": "Interception annotation without runtime retention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports interception annotations that do not have runtime retention.\n\n</body>\n</html>"
        },
        {
          "shortName": "InvalidProvidedBy",
          "displayName": "Invalid @ProvidedBy annotation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ImplementedBy annotations where specified class does not\n                provide the annotated class.\n\n</body>\n</html>"
        },
        {
          "shortName": "BindingAnnotationWithoutInject",
          "displayName": "Binding annotations without @Inject",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports binding annotations on fields or parameters without a matching @Inject\n                annotation. Such annotations will be ignored by Guice.\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleBindingAnnotations",
          "displayName": "Multiple binding annotations on variable",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports parameters with multiple binding annotations. This is disallowed by\n                the Guice specification.\n\n</body>\n</html>"
        },
        {
          "shortName": "InvalidImplementedBy",
          "displayName": "Invalid @ImplementedBy annotation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ImplementedBy annotations where specified class does not\n                implement the annotated class.\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryStaticInjection",
          "displayName": "Unnecessary static injection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports classes which are passed to requestStaticInjection() method\n                but do not have any static members or fields annotated with @Inject. \n\n</body>\n</html>"
        },
        {
          "shortName": "UninstantiableImplementedByClass",
          "displayName": "Uninstantiable @ImplementedBy class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ImplementedBy annotations where the specified class is\n                not\n                instantiable by Guice. A class may be uninstantiable because it is an interface, is abstract, or does\n                not\n                have an injectable constructor.\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBinding",
          "displayName": "Pointless binding",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any trivial explicit bindings. Trivial bindings simply declare that a class is\n                implemented by\n                itself, when the class doesn't have any conflicting @ImplementedBy or @ProvidedBy annotations. Such\n                bindings are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "SessionScopedInjectsRequestScoped",
          "displayName": "@SessionScoped component injects @RequestScoped component",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.servlet.SessionScoped classes which\n                injects a @com.google.inject.servlet.RequestScoped class. Such scope inversion has indeterminate\n                semantics, and is very likely not what is intended.\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantToBinding",
          "displayName": "Redundant binding",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any explicit bindings which are equivalent to an @ImplementedBy annotation\n                on the bound class. Such bindings are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "InvalidRequestParameters",
          "displayName": "Incorrect type for @RequestParameters parameters",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.RequestParameter annotations on fields or\n                parameters which do not have type Map&lt;String, String[]&gt;.\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantScopeBinding",
          "displayName": "Redundant scope binding",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any scope restrictions on explicit bindings which are equivalent to a scope\n                annotation\n                on the bound class. Such scope restrictions are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "UninstantiableBinding",
          "displayName": "Uninstantiable binding",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any explicit Guice bindings where the specified class is not\n                instantiable by Guice. A class may be uninstantiable because it is an interface, is abstract, or does\n                not have an injectable constructor.\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring AOP",
      "inspections": [
        {
          "shortName": "SpringAopWarningsInspection",
          "displayName": "Spring AOP Warnings",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Check that aspects have ref attribute and pointcuts have id attribute.<br>\nWarns about aspect beans being matched by some AOP advices, which leads to runtime errors."
        },
        {
          "shortName": "SpringAopErrorsInspection",
          "displayName": "Spring AOP Errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<li> Advices and advisors should contain either pointcut or pointcut-ref attribute\n<li> Highlights AspectJ pointcut designators which are not supported by Spring    "
        },
        {
          "shortName": "JdkProxiedBeanTypeInspection",
          "displayName": "JDK-proxied beans type",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks reference type for JDK-proxied beans.\nSee <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop-api.html#aop-pfb-proxy-types\">JDK- and CGLIB-based proxies</a>\nsection of Spring documentation for details."
        },
        {
          "shortName": "MissingAspectjAutoproxyInspection",
          "displayName": "Missing aspectj-autoproxy",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "In Spring versions before 2.5, one should have <strong>&lt;aop:aspectj-autoproxy/&gt;</strong> to enable @AspectJ annotations.\nChecks presence and suggests quick fix."
        }
      ]
    },
    {
      "name": "Threading issues",
      "inspections": [
        {
          "shortName": "GroovyAccessToStaticFieldLockedOnInstance",
          "displayName": "Access to static field locked on instance data",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses to static fields of any non-thread-safe type specified below,\nwhich is accessed from an instance field or a non-synchronized block. It is possible that the static\nfield is accessed from multiple threads, which can lead to unspecified side effects.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySynchronizationOnVariableInitializedWithLiteral",
          "displayName": "Synchronization on variable initialized with literal",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronized blocks which lock on an object which is initialized with a\nliteral. String literals are interned and <b>Number</b> literals can be allocated from a cache. Because of\nthis, it is possible that some other part of the system which uses an object initialized with the same\nliteral, is actually holding a reference to the exact same object. This can create unexpected dead-lock\nsituations, if the string was thought to be private.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedSynchronizedStatement",
          "displayName": "Nested 'synchronized' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <b>synchronized</b> statements. Nested <b>synchronized</b> statements\nare either redundant (if the lock objects are identical) or prone to deadlock.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnconditionalWait",
          "displayName": "Unconditional 'wait' call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>wait()</b>\nbeing called unconditionally within a synchronized context.\nNormally, <b>wait()</b> is\nused to block a thread until some condition is true. If <b>wait()</b>\nis called unconditionally, that often indicates that the condition was checked before a lock was\nacquired. In that case a data race may occur, with the condition becoming true between the time\nit was checked and the time the lock was acquired. While constructs found by this inspection\nare not necessarily incorrect, they are certainly worth examining.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptySyncBlock",
          "displayName": "Empty 'synchronized' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements\nwith empty bodies. While theoretically this may be the semantics intended, this construction is\nconfusing, and often the result of a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWaitCallNotInLoop",
          "displayName": "'wait()' not in loop",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>wait()</b> not made inside a loop. <b>wait()</b> is normally\nused to suspend a thread until a condition is true, and that condition should be checked after the <b>wait()</b>\nreturns. A loop is the clearest way to achieve this.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWhileLoopSpinsOnField",
          "displayName": "While loop spins on field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>while</b> loops which spin on the\nvalue of a non-<b>volatile</b> field, waiting for it to be changed by another thread. In addition to being potentially\nextremely CPU intensive when little work is done inside the loop, such\nloops are likely have different semantics than intended, as the Java Memory Model allows such field accesses\nto be hoisted out of the loop, causing the loop to never complete even if another thread does change the\nfield's value.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySystemRunFinalizersOnExit",
          "displayName": "Call to System.runFinalizersOnExit()",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>System.runFinalizersOnExit()</b>.\nThis call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\nmay result in data corruption, deadlock, and may affect parts of the program far removed from it's call point.\nIt is deprecated, and it's use strongly discouraged.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyThreadStopSuspendResume",
          "displayName": "Call to Thread.stop(), Thread.suspend(), or Thread.resume()",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>Thread.stop()</b>,<b>Thread.suspend()</b>, or <b>Thread.resume()</b>.\nThese calls are inherently prone to data corruption and deadlock, and their use is strongly\ndiscouraged.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyPublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in synchronized context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>final</b>, non-<b>private</b> fields which are accessed in a synchronized context.\nA non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\naccess may result in unexpectedly inconsistent data structures. Accesses in constructors an initializers are ignored\nfor purposes of this inspection.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySynchronizationOnThis",
          "displayName": "Synchronization on 'this'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization which uses <b>this</b> as its lock\nexpression. Constructs reported include <b>synchronized</b>\nblocks which lock <b>this</b>, and calls to <b>wait()</b>\n<b>notify()</b> or <b>notifyAll()</b> which target <b>wait()</b>.\nSuch constructs, like synchronized methods, make it hard to track just who is locking on a given\nobject, and make possible \"denial of service\" attacks on objects. As an alternative, consider\nlocking on a private instance variable, access to which can be completely controlled.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySynchronizationOnNonFinalField",
          "displayName": "Synchronization on non-final field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements where the lock expression\nis a non-<b>final</b> field. Such statements are unlikely to have useful semantics, as different\nthreads may be locking on different objects even when operating on the same object.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyBusyWait",
          "displayName": "Busy wait",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Thread.sleep()</b> that occur inside loops. Such calls\nare indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\nas busy-waiting threads do not release locked resources.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWaitWhileNotSynchronized",
          "displayName": "'wait()' while not synced",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>wait()</b> not made inside a corresponding synchronized\nstatement or synchronized method. Calling <b>wait()</b> on an object\nwithout holding a lock on that object will result in an <b>IllegalMonitorStateException</b> being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but its worth looking at.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports double-checked locking. For a\ndiscussion of double-checked locking and why it is unsafe, see\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>\n<!-- tooltip end -->\n<p>\n Use the checkbox below to ignore double-checked locking on volatile fields. Using\n a volatile field for double-checked locking works correctly on Java 5 virtual machines,\n but probably does not have any performance advantages over plain full synchronization\n of the accessor method.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySynchronizedMethod",
          "displayName": "Synchronized method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the <b>synchronized</b> modifier on methods. Some coding standards\nprohibit the use of the <b>synchronized</b> modifier, in favor of <b>synchronized</b> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnsynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides synchronized method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>synchronized</b>methods overriding <b>synchronized</b> methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNotifyWhileNotSynchronized",
          "displayName": "'notify()' or 'notifyAll()' while not synced",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>notify()</b> not made inside a corresponding synchronized\nstatement or synchronized method. Calling <b>notify()</b> on an object\nwithout holding a lock on that object will result in an <b>IllegalMonitorStateException</b> being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but it's worth looking at.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Replaceable assignments",
      "inspections": [
        {
          "shortName": "PhpAssignmentReplaceableWithPrefixExpressionInspection",
          "displayName": "Assignment replaceable with increment or decrement",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the assignments that can be replaced with incrementing (<code>++</code>) or decrementing (<code>--</code>) operations.\n<p>\n  Using increment or decrement operators instead of assignments can make the code clearer and potentially more performant.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpAssignmentReplaceableWithOperatorAssignmentInspection",
          "displayName": "Assignment replaceable with operator assignment",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the assignments that can be replaced with combined operator assignments (for example, <code>+=</code>).\n<p>\n  Using combined operator assignments can make the code clearer and potentially more performant.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Embedded",
      "inspections": [
        {
          "shortName": "PrivateMemberAccessBetweenOuterAndInnerClass",
          "displayName": "Synthetic accessor call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports references to non-constant <b>private</b> members of a different class,\nfor which javac will generate a package-private synthetic accessor method.\n<p>\nAn inner class and its containing class are compiled to separate\nclass files. The Java virtual machine normally prohibits access from a class to private fields and methods of\nanother class. To enable access from an inner class to private members of a\ncontaining class or the other way around javac creates a package-private\nsynthetic accessor method. Less use of memory and greater performance may be achieved by making the\nmember package-private, thus allowing direct access without the creation of a synthetic accessor method.\n<p>\nThis inspection does not report anything if language level is set to Java 11 or higher\nas thanks to nest-based access control (JEP 181), accessor methods are not generated anymore.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceWithOnlyOneDirectInheritor",
          "displayName": "Interface which has only one direct inheritor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports interfaces which have precisely one\ndirect inheritor. While such interfaces may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments,\nthey needlessly increase the total footprint of the application. Consider\nmerging the interface with its inheritor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConnectionResource",
          "displayName": "Connection opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any Java ME Connection resource which is not opened in front of a <b>try</b>\nblock and closed in the corresponding <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyLargePrimitiveArrayInitializer",
          "displayName": "Overly large initializer for array of primitive type",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports array initializer expressions for primitive\narrays which contain too many elements. Such initializers may result in overly large\nclass files, as code must be generated to initialize each array element. In memory\nor bandwidth constrained environments, it may be more efficient to load large arrays\nof primitives from resource files.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of elements to allow in\nprimitive array initializers.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CheckForOutOfMemoryOnLargeArrayAllocation",
          "displayName": "Large array allocation with no OutOfMemoryError check",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports large array allocations which do not check\nfor <b>java.lang.OutOfMemoryError</b>. In memory\nconstrained environments, allocations of large data objects should probably\nbe checked for memory depletion.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of elements to allow in\nunchecked array allocations.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ArrayLengthInLoopCondition",
          "displayName": "Array.length in loop condition",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any access to the <b>.length</b> of an array in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RecordStoreResource",
          "displayName": "RecordStore opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any Java ME RecordStore resource which is not opened in front of a <b>try</b>\nblock and closed in the corresponding <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SingleCharacterStartsWith",
          "displayName": "Single character 'startsWith()' or 'endsWith()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any calls to <b>String.startsWith()</b> or\n<b>String.endsWith()</b> which are passed single character string\nliterals as parameter. Such calls may be more efficiently implemented with\n<b>String.charAt()</b>. Because the performance gain is\nminimal, the needed extra check for non-zero length, and the negative effect on\ncode clarity, it is recommended to do so only inside tight loops.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassWithOnlyOneDirectInheritor",
          "displayName": "Abstract class which has only one direct inheritor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports abstract classes which have precisely one\ndirect inheritor. While such classes may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments, they needlessly increase\nthe total footprint of the application. Consider merging the abstract class with its inheritor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodCallInLoopCondition",
          "displayName": "Method call in loop condition",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports method calls in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n  <!-- tooltip end -->\n<p>\nUse the checkbox below to ignore calls to common Java iteration methods like <b>Iterator.hasNext()</b>\n  and known methods with side-effects like <b>Atomic*.compareAndSet</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultiplyOrDivideByPowerOfTwo",
          "displayName": "Multiply or divide by power of two",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports multiplication of an integer value by a constant power of 2. These\nexpressions may be replaced by right or left shift operations, for a possible performance improvement.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to enable the inspection for divisions by a power of two. Note that replacing\na power of two division by a shift does not work for negative numbers.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 9",
      "inspections": [
        {
          "shortName": "ReplaceNullCheck",
          "displayName": "Null check can be replaced with method call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection suggests to replace null check with Objects/Stream static method.\n<!-- tooltip end -->\nExample:\n<pre><code>\nif (message == null) {\n  application.messageStorage().save(new EmptyMessage());\n} else {\n  application.messageStorage().save(message);\n}\n</code></pre>\n<p>can be replaced with</p>\n<pre><code>\n  application.messageStorage()\n    .save(Objects.requireNonNullElseGet(message, () -> new EmptyMessage()));\n</code></pre>\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaRequiresAutoModule",
          "displayName": "Dependencies on automatic modules",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThe inspection warns about use of automatic modules in the \"requires\" directive.\nCorresponds to <code>-Xlint:requires-automatic</code> and <code>-Xlint:requires-transitive-automatic</code> Javac options.\n</body>\n</html>"
        },
        {
          "shortName": "Java9CollectionFactory",
          "displayName": "Immutable collection creation can be replaced with collection factory call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection helps to convert unmodifiable collections created before Java 9 to new collection factory methods\nlike <code>List.of</code> or <code>Set.of</code>. Also since Java 10 the conversion to <code>List.copyOf</code>, etc. could be suggested.\n<!-- tooltip end -->\n<p>Note that Java 9 collection factory methods do not accept null values. Also, set elements and map keys are required to be different.\nIt's not always possible to statically check whether original elements are different and not null. Using the checkbox you may enforce\nthe inspection to warn only if original elements are compile-time constants.</p>\n<p>\n  Also it should be noted that some query methods like <code>Collection.contains()</code> or <code>Map.get</code>\n  don't tolerate nulls as well. E.g., <code>Collection.contains()</code> \n  throws a NullPointerException instead of returning false. \n  Thus, even if the collection is initialized with non-null values only, the semantics of the code may change after migration.\n</p>\n<p>This inspection is available since Java 9 only.</p>\n<small>New in 2017.2</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Attributes",
      "inspections": [
        {
          "shortName": "PhpNoReturnAttributeCanBeAddedInspection",
          "displayName": "NoReturn attribute can be added",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports function without <code>#[NoReturn]</code> that are always halting their execution by calling other exitPoint functions attribute.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayKeyDoesNotMatchArrayShapeInspection",
          "displayName": "Array key does not match array shape ",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the array keys that do not match the keys specified via the <code>#[ArrayShape]</code> attribute.\n</body>\n</html>"
        },
        {
          "shortName": "PhpPureAttributeCanBeAddedInspection",
          "displayName": "'#[Pure]' attribute can be added",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the functions that are non-trivially pure. Such functions have other functions calls in their body, but all such calls do not produce any side effects.\n</body>\n</html>"
        },
        {
          "shortName": "PhpClassCantBeUsedAsAttributeInspection",
          "displayName": "Class cannot be used as attribute",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the attributes that are resolved to a class not annotated with <code>#[Attribute]</code>.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpInapplicableAttributeTargetDeclarationInspection",
          "displayName": "Non-applicable attribute target declaration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the attributes that do not have the appropriate <code>Attribute::TARGET_*</code> flag in their arguments declaration.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpLineCommentWillBeParsedAsAttributeInspection",
          "displayName": "Comment is parsed as attribute in PHP 8.0",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports line comments starting with <code>#[</code>. In PHP 8.0 and later, such comments are parsed as attributes.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpImmutablePropertyIsWrittenInspection",
          "displayName": "Immutable property written in invalid scope",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nHighlights write access references to properties, for which the write access scope declared via <code>#[Immutable]</code> is stricter than the reference scope.\n</body>\n</html>"
        },
        {
          "shortName": "PhpPureFunctionMayProduceSideEffectsInspection",
          "displayName": "Pure function may produce side effects",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>#[Pure]</code> annotations used on functions that may produce side effects.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantAttributeParenthesisInspection",
          "displayName": "Redundant parentheses in attribute",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports empty arguments lists in attributes.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpAttributeIsNotRepeatableInspection",
          "displayName": "Non-repeatable attribute",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports repeated attributes without the <code>Attribute::IS_REPEATABLE</code> flag in their arguments declaration.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayShapeAttributeCanBeAddedInspection",
          "displayName": "'#[ArrayShape]' attribute can be added",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the methods and functions that are returning arrays with known non-trivial keys. Suggests specifying the shape of the returned array via the <code>#[ArrayShape]</code> attribute.\n</body>\n</html>"
        },
        {
          "shortName": "PhpAttributeCanBeAddedToOverriddenMemberInspection",
          "displayName": "Attribute can be added to overriding member ",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the methods' and parameters' attributes that can be propagated to overriding methods/parameters.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpectedValuesShouldBeUsedInspection",
          "displayName": "Expected values should be used",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the values in assignment and comparison expressions that should be replaced with one of the expected values (that is, the values specified via the <code>#[ExpectedValues]</code> attribute).\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "SQL",
      "inspections": [
        {
          "shortName": "SqlCaseVsCoalesceInspection",
          "displayName": "Using CASE instead of COALESCE function and vice versa",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports CASE expressions which can be replaced with COALESCE calls or vice versa depending on the chosen preferences\n</body>\n</html>"
        },
        {
          "shortName": "SqlMultipleLimitClausesInspection",
          "displayName": "Multiple row limiting/offset clauses in queries",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports queries with multiple row limiting/offset clauses.\n</body>\n</html>"
        },
        {
          "shortName": "SqlWithoutWhereInspection",
          "displayName": "Delete or update statement without where clauses",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of 'delete' or 'update' statements without any 'where' clauses.\nWhen used without 'where' clauses, 'delete' drops all the data from the table, and 'update' overwrites values for all table rows.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlIllegalCursorStateInspection",
          "displayName": "Illegal cursor state",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports illegal cursor states inside SQL routines.\n</body>\n</html>"
        },
        {
          "shortName": "OraOverloadInspection",
          "displayName": "Overloading errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  This inspection reports erroneous cases of subprogram overloading\n</body>\n</html>"
        },
        {
          "shortName": "SqlConstantConditionInspection",
          "displayName": "Constant condition",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports those conditions in the where or join clauses that are always\n<strong>true</strong> or <strong>false</strong>.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlGotoInspection",
          "displayName": "Usages of GOTO statements",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports usages of a GOTO statement\n</body>\n</html>"
        },
        {
          "shortName": "SqlShadowingAliasInspection",
          "displayName": "Column is shadowed by alias",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports SELECT aliases whose name matches the name of a column in the FROM clause  \n</body>\n</html>"
        },
        {
          "shortName": "SqlDialectInspection",
          "displayName": "SQL dialect detection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the best matching SQL dialect for files in <b>&lt;Generic&gt;</b> dialect.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantOrderingDirectionInspection",
          "displayName": "Redundant ordering direction",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant ordering direction in ORDER BY clauses.\n</body>\n</html>"
        },
        {
          "shortName": "SqlStringLengthExceededInspection",
          "displayName": "Implicit string truncation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nDetects variable assignments which involve implicit string truncation\n</body>\n</html>"
        },
        {
          "shortName": "MsBuiltinInspection",
          "displayName": "Suspicious or incorrect usages of built-in functions",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports suspicious or incorrect use cases of SQL Server built-in functions\n</body>\n</html>"
        },
        {
          "shortName": "SqlErrorHandlingInspection",
          "displayName": "SQL error handling",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights invalid usages of constructs that handle exceptions in SQL routines\n</body>\n</html>"
        },
        {
          "shortName": "SqlDtInspection",
          "displayName": "Ill-formed date/time literals",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports errors in SQL date/time literals.\n</body>\n</html>"
        },
        {
          "shortName": "SqlMissingColumnAliasesInspection",
          "displayName": "Missing column aliases",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports queries without explicit aliases for output expressions other than column references.\n</body>\n</html>"
        },
        {
          "shortName": "SqlAggregatesInspection",
          "displayName": "Aggregate-related problems",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports incorrect or suspicious usages of SQL aggregate functions.\n</body>\n</html>"
        },
        {
          "shortName": "SqlDerivedTableAliasInspection",
          "displayName": "Each derived table should have alias",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that each derived table should have own alias.\n</body>\n</html>"
        },
        {
          "shortName": "SqlDropIndexedColumnInspection",
          "displayName": "Index is dependent on column",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks dropping indexed columns in MS SQL and Sybase SQL Server.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlJoinWithoutOnInspection",
          "displayName": "Unsafe 'join' clause in 'delete' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of 'join' clause inside a 'delete' statement where no 'on' or 'where' checks are present.\nWithout conditional checks on 'join', 'delete' drops contents of the entire table.\n</body>\n</html>\n"
        },
        {
          "shortName": "OraMissingBodyInspection",
          "displayName": "Missing body for package/object type specification",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  This inspection reports package/object type specifications without corresponding bodies\n</body>\n</html>"
        },
        {
          "shortName": "SqlResolveInspection",
          "displayName": "Unresolved reference",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs unresolved SQL references check.\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantCodeInCoalesceInspection",
          "displayName": "Redundant code in COALESCE call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant code inside COALESCE calls.\n</body>\n</html>"
        },
        {
          "shortName": "SqlNullComparisonInspection",
          "displayName": "Null comparison",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks suspicious comparisons with NULL.\n</body>\n</html>"
        },
        {
          "shortName": "SqlStorageInspection",
          "displayName": "SQL source modification detection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nDetects that database sources have changed.\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedVariableInspection",
          "displayName": "Unused variable",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs unused argument/variable check.\n</body>\n</html>"
        },
        {
          "shortName": "SqlCallNotationInspection",
          "displayName": "Using of named and positional arguments",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports erroneous usages of named and positional arguments in routine calls\n</body>\n</html>"
        },
        {
          "shortName": "SqlTriggerTransitionInspection",
          "displayName": "Suspicious code in triggers",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports incorrect usages of transition table variables in triggers\n</body>\n</html>"
        },
        {
          "shortName": "SqlShouldBeInGroupByInspection",
          "displayName": "Column should be in group by clause",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that column should be in group by clause or inside aggregate function call.\n</body>\n</html>"
        },
        {
          "shortName": "SqlDeprecateTypeInspection",
          "displayName": "Deprecated type",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  This inspection reports usages of types which are currently deprecated and may be removed in a future version of the DBMS. \n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedCteInspection",
          "displayName": "Unused common table expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unused common table expression inside SQL.\n</body>\n</html>"
        },
        {
          "shortName": "SqlAutoIncrementDuplicateInspection",
          "displayName": "Auto-increment duplicate",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  This inspection checks <strong>auto_increment</strong> duplicates in MySQL, MS SQL and Db2 dialects.\n  A table in those dialects can contain only one auto-incrementing field.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlNamedArgumentsInspection",
          "displayName": "Named arguments should be used",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports routine calls without named arguments\n</body>\n</html>"
        },
        {
          "shortName": "SqlMisleadingReferenceInspection",
          "displayName": "Misleading references",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports potentially misleading references in SQL code\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlIdentifierInspection",
          "displayName": "Identifier should be quoted",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs SQL identifier names check.\n</body>\n</html>"
        },
        {
          "shortName": "SqlIdentifierLengthInspection",
          "displayName": "Excessively long identifiers",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports identifiers which are considered too long in a particular DBMS\n</body>\n</html>"
        },
        {
          "shortName": "SqlDuplicateColumnInspection",
          "displayName": "Duplicating column name in SELECT",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection finds duplicating alias names for columns in SELECT output list.\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertNullIntoNotNullInspection",
          "displayName": "Insert NULL into NOT NULL column",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports insertions of NULL into NOT NULL columns.\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unreachable statements inside SQL routines.\n</body>\n</html>"
        },
        {
          "shortName": "SqlSideEffectsInspection",
          "displayName": "Statement with side effects",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection only runs during a read-only connection and\nreports statements that may lead to modification of the database.\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertValuesInspection",
          "displayName": "VALUES clause cardinality",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that the number of VALUES (...) parameters matches target table column list size.\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertIntoGeneratedColumnInspection",
          "displayName": "Insertion into generated columns",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports INSERT statements which assign values to generated columns\n</body>\n</html>"
        },
        {
          "shortName": "SqlAmbiguousColumnInspection",
          "displayName": "Ambiguous reference",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that column reference resolves to a single column.\n</body>\n</html>"
        },
        {
          "shortName": "MsOrderByInspection",
          "displayName": "Erroneous usages of ORDER BY in SQL Server queries",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports erroneous usages of ORDER BY clauses in SQL Server queries\n</body>\n</html>"
        },
        {
          "shortName": "SqlSignatureInspection",
          "displayName": "Function signature",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs function signature check.\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantElseNullInspection",
          "displayName": "Redundant ELSE NULL clause",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant ELSE NULL clauses in CASE expressions.\n</body>\n</html>"
        },
        {
          "shortName": "SqlCaseVsIfInspection",
          "displayName": "Using CASE instead of conditional function and vice versa",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports CASE expressions which can be replaced with IF-like function calls or vice versa depending on the chosen preferences\n</body>\n</html>"
        },
        {
          "shortName": "SqlCurrentSchemaInspection",
          "displayName": "Current console schema introspected",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nWarns if current session's schema/database is not introspected.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "PgSelectFromProcedureInspection",
          "displayName": "Postgres: Select from procedure call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nSelect from <strong>dblink</strong> or function that returns record require typed alias list.\nScalar functions do not require alias and forbid typed alias lists completely.\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedSubqueryItemInspection",
          "displayName": "Unused subquery item",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports unused subquery items: columns and aliases that are not referenced in the outer query expression\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantLimitInspection",
          "displayName": "Redundant row limiting in queries",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant row limiting in queries.\n</body>\n</html>"
        },
        {
          "shortName": "SqlMissingReturnInspection",
          "displayName": "Missing return statement",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports functions with missing return statements.\n</body>\n</html>"
        },
        {
          "shortName": "SqlCheckUsingColumnsInspection",
          "displayName": "Check using clause columns",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  This inspection checks that columns inside using clause exist in both tables.\n</body>\n</html>"
        },
        {
          "shortName": "SqlTypeInspection",
          "displayName": "Types compatibility",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs type-related check.\n</body>\n</html>"
        },
        {
          "shortName": "OraUnmatchedForwardDeclarationInspection",
          "displayName": "Forward declaration without definition",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n  This inspection reports forward subroutine declarations without corresponding definitions\n</body>\n</html>"
        },
        {
          "shortName": "SqlAddNotNullColumnInspection",
          "displayName": "Adding not null column without default value",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nNecessary to specify the default value for the new column with not null constraint.\n</body>\n</html>"
        },
        {
          "shortName": "MysqlParsingInspection",
          "displayName": "MySQL: Syntax",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nProvides diagnostic of MySQL parser idiosyncrasies.\n</body>\n</html>"
        },
        {
          "shortName": "SqlNoDataSourceInspection",
          "displayName": "No data sources configured",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nPrompts one to create a data source if there is none.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SqlTransactionStatementInTriggerInspection",
          "displayName": "Use of transaction management statements in triggers",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnicodeStringLiteralInspection",
          "displayName": "Unicode usage in SQL",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports string literals with national characters but lacking N prefix.\n</body>\n</html>"
        },
        {
          "shortName": "MysqlLoadDataPathInspection",
          "displayName": "LOAD statement path",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports paths started with the tilde character in the <strong>LOAD</strong> statement\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantAliasInspection",
          "displayName": "Redundant alias expressions",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant alias expressions\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Feature usage statistics",
      "inspections": [
        {
          "shortName": "WhitelistPresence",
          "displayName": "Not whitelisted usage collector",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\r\n<body>\r\nAll feature usage groups should be whitelisted.\r\n<br/><br/>\r\nTo whitelist the group:\r\n<ol>\r\n    <li>Create an <a href=\"https://youtrack.jetbrains.com/issues/FUS\">issue</a> with group id, version and type (i.e. state or counter);</li>\r\n    <li>Write group description as it should be shown in analytics UI;</li>\r\n    <li>Describe all possible event ids with their meaning and event data (i.e. FeatureUsageData);</li>\r\n    <li>Set issue state to <i>Implemented</i>;</li>\r\n</ol>\r\n</body>\r\n</html>"
        },
        {
          "shortName": "CollectorDetection",
          "displayName": "Statistics collectors detection",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\r\n<body>\r\nThis inspections detects statistics collectors.\r\n</body>\r\n</html>"
        }
      ]
    },
    {
      "name": "Method metrics",
      "inspections": [
        {
          "shortName": "GroovyMethodWithMoreThanThreeNegations",
          "displayName": "Method with more than three negations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with three or more negation operations (<b>!</b> or <b>!=</b>).\nSuch methods may be unnecessarily confusing.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyNestedMethod",
          "displayName": "Overly nested method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose bodies are too deeply nested. Methods with too much statement\nnesting may be confusing, and are a good sign that refactoring may be necessary.\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum acceptable nesting depth a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyComplexMethod",
          "displayName": "Overly complex method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that have too high a cyclomatic complexity. Cyclomatic\ncomplexity is basically a measurement of the number of branching points in a method. Methods with too high\na cyclomatic complexity may be confusing and difficult to test.\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum acceptable cyclomatic complexity a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyLongMethod",
          "displayName": "Overly long method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are too long. Methods that are too long\nmay be confusing, and are a good sign that refactoring is necessary.\n<!-- tooltip end -->\n<p>\n  Use the field provided below to specify the maximum acceptable number of non-comment source\n  statements a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMethodParameterCount",
          "displayName": "Method with too many parameters",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many parameters. Methods with too many parameters\ncan be a good sign that refactoring is necessary. Methods whose signatures are inherited from\nlibrary classes are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum acceptable number of parameters a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many return points. Methods with too\nmany return points may be confusing, and hard to refactor.\n<!-- tooltip end -->\n<p>\n  Use the field provided below to specify the maximum acceptable number of return points a method\n  might have.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Description file",
      "inspections": [
        {
          "shortName": "PostfixTemplateDescriptionNotFound",
          "displayName": "Postfix template description checker",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if postfix template (completion) has a description.\n</body>\n</html>\n"
        },
        {
          "shortName": "IntentionDescriptionNotFoundInspection",
          "displayName": "Intention description checker",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if intention has a description.\n</body>\n</html>\n"
        },
        {
          "shortName": "InspectionDescriptionNotFoundInspection",
          "displayName": "Inspection description checker",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects missing HTML-description for an inspection.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Other",
      "inspections": [
        {
          "shortName": "GrMethodMayBeStatic",
          "displayName": "Method may be static",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which may safely be made <b>static</b>. A method may be static if it is not synchronized, it does not\nreference any of its class' non static methods and non static fields and is not overridden in a sub class.\n<!-- tooltip end -->\n<p>\nUse the checkboxes below to inspect only <b>private</b> or <b>final methods</b>, which increases the performance of this inspection and to\nignore empty methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "TypeCustomizer",
          "displayName": "Type customizer inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports files which can be custom type checkers and are not added to compiler resources yet.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Compiler issues",
      "inspections": [
        {
          "shortName": "JavacQuirks",
          "displayName": "Javac quirks",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<span>This inspection warns about known Javac issues, problems and incompatibilities.</span>\n</body>\n</html>"
        },
        {
          "shortName": "UNCHECKED_WARNING",
          "displayName": "Unchecked warning",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nSignals places where an unchecked warning is issued\nby the compiler, for example:\n<pre><code>\n\n  <b>void</b> f(HashMap map) {\n    map.put(\"key\", \"value\");\n  }\n  \n</code></pre>\nHint: Pass -Xlint:unchecked to javac to get more details.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "AOP",
      "inspections": [
        {
          "shortName": "ArgNamesErrorsInspection",
          "displayName": "Advice parameters (argNames, returning, throwing) consistency check",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that @AspectJ argNames attribute value corresponds to the actual method parameter names.\n</body>\n</html>"
        },
        {
          "shortName": "AroundAdviceStyleInspection",
          "displayName": "Around advice style inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  When using \"around\" advice, it's a good idea to remember two things:\ncalling \"org.aspectj.lang.ProceedingJoinPoint#proceed\" - otherwise call won't reach target\nreturning the result value (typed java.lang.Object) of that call - otherwise return value will never reach original caller<p>\n\nHowever, the following two conditions almost always indicate a coding error:<p>\n\n<li>The signature for the \"around\" method does not have ProceedingJoinPoint as first argument: in such cases it's impossible for the call to reach the target\n<li>The signature for the \"around\" method does not have Object as return type: in such cases return value of target method is always lost.\n</body>\n</html>"
        },
        {
          "shortName": "PointcutMethodStyleInspection",
          "displayName": "Pointcut method style",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nValidate @Pointcut methods: void return type, no throws clause, empty method body\n</body>\n</html>"
        },
        {
          "shortName": "DeclareParentsInspection",
          "displayName": "Introductions (declare parents) errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies @AspectJ Introduction consistency: whether the defaultImpl is required and, if yes, whether it implements the given\ninterface\n</body>\n</html>"
        },
        {
          "shortName": "ArgNamesWarningsInspection",
          "displayName": "Warning: argNames not defined ",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nIt's recommended to define argNames attribute in @AspectJ annotations, since the method parameter names\nmay not be available at runtime.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection warns you of characters that the current document encoding is incapable to represent. <br>\n\nFor example, when you are <br>\n<ul>\n  <li>typing international characters in a document configured to <b>US-ASCII</b> charset. Some characters will be lost on save.</li>\n  <li>or loading <b>UTF-8</b>-encoded file using <b>ISO-8859-1</b> one-byte charset. Some characters will be displayed incorrectly.</li>\n</ul>\n\nYou fix this by changing the file encoding,\neither by specifying the encoding directly in the file, e.g. by editing <b>encoding=</b> attribute in the XML prolog of XML file,\nor configuring the <b>Settings|Project Settings|File Encodings</b> .\n\n</body>\n</html>"
        },
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports code that uses non-ASCII symbols in suspicious context.<br>\n\nFor example:<br>\n<ul>\n  <li>\n    Non-ASCII characters in identifiers, strings, or comments\n  </li>\n  <li>\n    Identifiers written in different languages, such as <code>my<span color=\"red\">C</span>ollection</code> with\n    letter <code><span color=\"red\">C</span></code> written in Cyrillic.\n  </li>\n  <li>\n    Comments or strings containing Unicode symbols, such as long dashes and arrows\n  </li>\n</ul>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "GroovyInstanceVariableNamingConvention",
          "displayName": "Instance variable naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for\n instance variable names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyLocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters whose names are either too short, too\nlong, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for method parameter names.\n  (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyStaticMethodNamingConvention",
          "displayName": "Static method naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports static methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for static method names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "NewGroovyClassNamingConvention",
          "displayName": "Class naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for class names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyStaticVariableNamingConvention",
          "displayName": "Static variable naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables whose names are either too short, too long,\nor do not follow\nthe specified regular expression pattern. Constants, i.e. variables of immutable type declared\n<b>static final</b>, are not checked by this inspection\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for static variable names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConstantNamingConvention",
          "displayName": "Constant naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports constants whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\nConstants are variables of immutable type declared <b>static final</b>.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for constant names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInstanceMethodNamingConvention",
          "displayName": "Instance method naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern. Instance methods that override library\nmethods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for instance method names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Code",
      "inspections": [
        {
          "shortName": "SpringTestingTransactionalInspection",
          "displayName": "Spring Testing @Transactional errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSpring Testing  @Transactional errors\n</body>\n</html>"
        },
        {
          "shortName": "SpringConfigurationProxyMethods",
          "displayName": "@Configuration proxyMethods usage warnings",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nSpring Framework 5.2 has introduced an optimization for @Configuration class processing that can be enabled via an attribute @Configuration(proxyBeanMethods = false).\n<br><br>\nIf you disable <code>proxyBeanMethods</code> the proxy instances are no longer created and calling the method invokes it again (returning a new instance every time).\nAs a result, you have no guarantee that you're actually injecting the corresponding bean in the context.\n<!-- tooltip end -->\n<br><br>\n<strong>Incorrect bean method call example:</strong><br><br>\n<pre>\n@Configuration(proxyBeanMethods = false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -> <strong>incorrect call</strong>\n  }\n}\n</pre>\n<br>\n\n<hr>\n<strong>You can set <code>proxyBeanMethods</code> to true or rewrite the code as follows:</strong><br><br>\n<pre>\n@Configuration(proxyBeanMethods = false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean(FirstBean someBean) { // -> <strong>correct injected instance</strong>\n    return new SecondBean(someBean);\n  }\n}\n</pre>\n<br>\n\n<hr>\n<strong>Also, the inspection checks @Bean method calls in a class without the @Configuration stereotype (in \"bean lite mode\"):</strong><br><br>\n<pre>\n@Component\nclass TestComponent {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -> <strong>incorrect call</strong>\n  }\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "SpringTransactionalComponentInspection",
          "displayName": "Undefined PlatformTransactionManager",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks if <code>PlatformTransactionManager</code> is defined in application context for current <code>@Transactional</code> component."
        },
        {
          "shortName": "SpringCacheableComponentsInspection",
          "displayName": "@Cacheable, @CacheEvict, @CachePut, @CacheConfig errors",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nCaching annotation errors (@Cacheable, @CacheEvict, @CachePut, @CacheConfig)\n</body>\n</html>"
        },
        {
          "shortName": "SpringTestingDirtiesContextInspection",
          "displayName": "Spring Testing @DirtiesContext errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>Spring Testing @DirtiesContext errors</body>\n</html>"
        },
        {
          "shortName": "ScheduledMethodInspection",
          "displayName": "Method annotated with @Scheduled should be void and no-args",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<strong>According to Spring Documentation:</strong> <em>\"Methods to be scheduled must have void returns and must not expect any arguments. If the method needs to interact with other objects from the Application Context, then those would typically have been provided through dependency injection.\".</em>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SpringCacheableAndCachePutInspection",
          "displayName": "Using @CachePut and @Cacheable on same method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nUsing @CachePut and @Cacheable annotations on the same method is generally strongly discouraged because they have different behaviors. While\nthe latter causes the method execution to be skipped by using the cache, the former forces the execution in order to execute a cache update.\nThis leads to unexpected behavior and with the exception of specific corner-cases (such as annotations having conditions that exclude them\nfrom each other), such declaration should be avoided. Note also that such condition should not rely on the result object (i.e. the #result\nvariable) as these are validated upfront to confirm the exclusion.\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaInjectionPointsAutowiringInspection",
          "displayName": "Autowiring for bean class",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "Checks autowiring problems in a bean class."
        },
        {
          "shortName": "SpringContextConfigurationInspection",
          "displayName": "@ContextConfiguration and @SqlConfig warnings",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks @ContextConfiguration and @SqlConfig errors."
        },
        {
          "shortName": "SpringEventListenerInspection",
          "displayName": "@EventListener configuration error",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "@EventListener errors."
        },
        {
          "shortName": "SpringLookupInjectionInspection",
          "displayName": "@Lookup",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "@Lookup configuration errors"
        },
        {
          "shortName": "SpringRequiredAnnotationInspection",
          "displayName": "Required annotation",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks bean class setters marked with @Required annotation.<br>\nSee also <strong>Required Properties Inspection</strong>"
        },
        {
          "shortName": "SpringImportResource",
          "displayName": "@ImportResource location warnings",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Checks @ImportResource errors."
        },
        {
          "shortName": "SpringJavaConstructorAutowiringInspection",
          "displayName": "Autowiring issues in a Spring bean class constructors",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "Checks autowiring problems in Spring bean class constructors: more than one @Autowired constructor, no matching constructor for autowiring, etc."
        },
        {
          "shortName": "SpringTestingSqlInspection",
          "displayName": "@Sql and @SqlGroup warnings",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Checks @Sql and @SqlGroup errors."
        },
        {
          "shortName": "SpringJavaAutowiredMembersInspection",
          "displayName": "Autowired members defined in invalid Spring bean",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Checks that autowired members are defined in valid Spring bean (@Component|@Service|...)."
        },
        {
          "shortName": "SpringCacheNamesInspection",
          "displayName": "Cache names definition errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nAt least one cache name should be provided per cache operation.\n@Cacheable(\"cache_name\") or @Cacheable(cacheNames =\"cache_name\").\n@CacheConfig#cacheNames() could be used for sharing common cache-related settings at the class level.\n</body>\n</html>"
        },
        {
          "shortName": "AsyncMethodInspection",
          "displayName": "Method annotated with @Async should return ''void'' or \"Future-like\" type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n@Async methods should return void, java.util.concurrent.Future, org.springframework.util.concurrent.ListenableFuture or java.util.concurrent.CompletableFuture\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaConfigExternalBeansErrorInspection",
          "displayName": "Java Configured @ExternalBean",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Java Configured @ExternalBean Errors"
        },
        {
          "shortName": "SpringJavaConfigInconsistencyInspection",
          "displayName": "Java configuration",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Java Config inconsistencies"
        },
        {
          "shortName": "SpringJavaAutowiredFieldsWarningInspection",
          "displayName": "Field injection warning",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<strong>Spring Team recommends:</strong> <em>\"Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies\".</em>\n<!-- tooltip end -->\n<br><br>\n<strong>Field injection/NullPointerException example:</strong><br><br>\n<pre>\nclass MyComponent {\n\n  @Inject MyCollaborator collaborator;\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // -> <strong>NullPointerException</strong>\n  }\n}\n</pre>\n\n<br>\n\n<hr>\n\n<strong>Constructor injection should be used:</strong><br><br>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // -> <strong>safe</strong>\n  }\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "SpringPropertySource",
          "displayName": "@PropertySource and @TestPropertySource location warnings",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Checks @PropertySource and @TestPropertySource errors."
        },
        {
          "shortName": "SpringCacheAnnotationsOnInterfaceInspection",
          "displayName": "Cache* annotations defined on interfaces/interface methods",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSpring Team recommends that you only annotate concrete classes (and methods of concrete classes) with the @Cache* annotation, as opposed to\nannotating interfaces.\nYou certainly can place the @Cache* annotation on an interface (or an interface method), but this works only as you\nwould expect it to if you are using interface-based proxies. The fact that Java annotations are not inherited from interfaces means that if\nyou are using class-based proxies (proxy-target-class=\"true\") or the weaving-based aspect (mode=\"aspectj\"), then the caching settings are\nnot recognized by the proxying and weaving infrastructure, and the object will not be wrapped in a caching proxy, which would be decidedly\nbad.\n</body>\n</html>"
        },
        {
          "shortName": "ContextJavaBeanUnresolvedMethodsInspection",
          "displayName": "@Configuration and @Bean",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates method references in code configuration."
        },
        {
          "shortName": "SpringJavaStaticMembersAutowiringInspection",
          "displayName": "Static members autowiring",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Checks static methods and fields with Spring autowired annotation."
        },
        {
          "shortName": "SpringProfileExpression",
          "displayName": "Incorrect profile expression",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nSpring profile must not be empty.\n<code>&</code> and <code>|</code> operators may not be mixed without using parentheses in Spring profile expression.\n</body>\n</html>"
        },
        {
          "shortName": "SpringComponentScan",
          "displayName": "@ComponentScan setup",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nChecks @ComponentScan (and similar annotations) for setup errors.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "W3CssValidation",
          "displayName": "W3C CSS validator",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection validates the CSS with W3C CSS validator library. <br>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "RedundantRecordConstructor",
          "displayName": "Redundant record constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant constructors declared inside Java records. Examples:\n<pre><code>\n  record Point(int x, int y) {\n    public Point {} // could be removed\n  }\n  \n  record Point(int x, int y) {\n    public Point(int x, int y) { // could be removed\n      this.x = x;\n      this.y = y;\n    }\n  }\n  \n  // could be converted to compact constructor\n  record Range(int from, int to) {\n    public Range(int from, int to) {\n      if (from > to) throw new IllegalArgumentException();\n      this.from = from;\n      this.to = to;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the configured language level is 14 Preview or 15 Preview.</p>\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EmptyMethod",
          "displayName": "Empty method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods where: <br> <br>\n&nbsp;- method is empty OR <br>\n&nbsp;- all implementations of interface method are empty OR <br>\n&nbsp;- method is empty itself and is overridden only by empty methods <br> <br>\nNote that a method containing only the <b><font color=\"#000080\">super()</font></b>\ncall and passing its own parameter is also considered empty.\n<br> <br>\nThis inspection is automatically suppressed for methods annotated with special annotations,\nfor example, EJB annotations javax.ejb.Init and javax.ejb.Remove.\n<!-- tooltip end -->\nAdditional annotations can be configured below.\n</body>\n</html>\n"
        },
        {
          "shortName": "WeakerAccess",
          "displayName": "Declaration access can be weaker",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports all fields, methods or classes, found in the specified inspection\nscope, that may have their access modifier narrowed down. <br> <br>\n<!-- tooltip end -->\nUse check boxes in the inspection options below, to define rules for the modifier change suggestions.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyInitializer",
          "displayName": "Empty class initializer",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty class initializer blocks.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TrivialFunctionalExpressionUsage",
          "displayName": "Trivial usage of functional expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports method calls to methods of functional interfaces which are directly invoked on the definition of the lambda, method reference or anonymous class.\nSuch method calls, including the functional interface implementation, can be replaced with the body of the functional interface implementation, like\n<code>((Runnable)() -> doSmth()).run()</code> can be replaced with <code>doSmth()</code>.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyCollector",
          "displayName": "Collector can be simplified",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports collectors which could be simplified. In particular some cascaded <code>groupingBy</code> collectors\ncould be expressed with simpler <code>toMap</code> collector which also will likely be more performant.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher </p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyStreamApiCallChains",
          "displayName": "Stream API call chain can be simplified",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports stream API call chains which can be simplified.\nIt allows to avoid creating redundant temporary objects when traversing a collection.\n<p>\n  The following call chains are replaced by this inspection:\n</p>\n<ul>\n  <li><code>collection.stream().forEach()</code> &rarr; <code>collection.forEach()</code></li>\n  <li><code>collection.stream().collect(toList/toSet/toCollection())</code> &rarr; <code>new CollectionType&lt;&gt;(collection)</code></li>\n  <li><code>collection.stream().toArray()</code> &rarr; <code>collection.toArray()</code></li>\n  <li><code>Arrays.asList().stream()</code> &rarr; <code>Arrays.stream()</code> or <code>Stream.of()</code></li>\n  <li><code>IntStream.range(0, array.length).mapToObj(idx -> array[idx])</code> &rarr; <code>Arrays.stream(array)</code></li>\n  <li><code>IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))</code> &rarr; <code>list.stream()</code></li>\n  <li><code>Collections.singleton().stream()</code> &rarr; <code>Stream.of()</code></li>\n  <li><code>Collections.emptyList().stream()</code> &rarr; <code>Stream.empty()</code></li>\n  <li><code>stream.filter().findFirst().isPresent()</code> &rarr; <code>stream.anyMatch()</code></li>\n  <li><code>stream.collect(counting())</code> &rarr; <code>stream.count()</code></li>\n  <li><code>stream.collect(maxBy())</code> &rarr; <code>stream.max()</code></li>\n  <li><code>stream.collect(mapping())</code> &rarr; <code>stream.map().collect()</code></li>\n  <li><code>stream.collect(reducing())</code> &rarr; <code>stream.reduce()</code></li>\n  <li><code>stream.collect(summingInt())</code> &rarr; <code>stream.mapToInt().sum()</code></li>\n  <li><code>stream.mapToObj(x -> x)</code> &rarr; <code>stream.boxed()</code></li>\n  <li><code>stream.map(x -> {...; return x;})</code> &rarr; <code>stream.peek(x -> ...)</code></li>\n  <li><code>!stream.anyMatch()</code> &rarr; <code>stream.noneMatch()</code></li>\n  <li><code>!stream.anyMatch(x -> !(...))</code> &rarr; <code>stream.allMatch()</code></li>\n  <li><code>stream.map().anyMatch(Boolean::booleanValue)</code> -> <code>stream.anyMatch()</code></li>\n  <li><code>IntStream.range(expr1, expr2).mapToObj(x -> array[x])</code> -> <code>Arrays.stream(array, expr1, expr2)</code></li>\n  <li><code>Collection.nCopies(count, ...)</code> -> <code>Stream.generate().limit(count)</code></li>\n  <li><code>stream.sorted(comparator).findFirst()</code> -> <code>Stream.min(comparator)</code></li>\n</ul>\n<p>\n  Note that the replacements semantic may have minor difference in some cases.\n  For example, <code>Collections.synchronizedList(...).stream().forEach()</code> is not\n  synchronized while <code>Collections.synchronizedList(...).forEach()</code> is synchronized.\n  Or <code>collect(Collectors.maxBy())</code> would return an empty <code>Optional</code> if the resulting\n  element is <code>null</code> while <code>Stream.max()</code> will throw <code>NullPointerException</code>\n  in this case.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantThrows",
          "displayName": "Redundant 'throws' clause",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports exceptions that are declared in a method's signature but never\nthrown by the method itself or its implementations/derivatives.\n</body>\n</html>\n"
        },
        {
          "shortName": "DefaultAnnotationParam",
          "displayName": "Default annotation parameter value",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports explicit assigning default value to an annotation parameter.\n</body>\n</html>"
        },
        {
          "shortName": "SillyAssignment",
          "displayName": "Variable is assigned to itself",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nDetects assignments of a variable to itself, like: <br>\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><font color=\"#000080\">a = a;</font></b>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyOptionalCallChains",
          "displayName": "Optional call chain can be simplified",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nWarns about <b>Optional</b> call chains which could be simplified. Here are some examples of possible simplifications:\n<ul>\n  <li><code>optional.map(x -> true).orElse(false)</code> &rarr; <code>optional.isPresent()</code></li>\n  <li><code>optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)</code> &rarr; <code>optional.map(String::trim)</code></li>\n  <li><code>optional.map(x -> (String)x).orElse(null)</code> &rarr; <code>(String) optional.orElse(null)</code></li>\n  <li><code>Optional.ofNullable(optional.orElse(null))</code> &rarr; <code>optional</code></li>\n  <li><code>val = optional.orElse(null); val != null ? val : defaultExpr </code> &rarr; <code>optional.orElse(defaultExpr)</code></li>\n  <li><code>val = optional.orElse(null); if(val != null) expr(val) </code> &rarr; <code>optional.ifPresent(val -> expr(val))</code></li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "AccessStaticViaInstance",
          "displayName": "Access static member via instance reference",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nShows references to static methods and fields\nvia a class instance rather than a class itself.<br>\n<br>\nExample:<br>\n<code>String s = String.valueOf(0); // correct: static method qualified with class name</code><br>\n<code>String s1 = s.valueOf(0); // wrong: static method qualified with class instance</code><br>\n<br>\nWhile allowed by Java Language Specification,\nreferring to static members via instance variables makes the code confusing\nas the reader may think that the result of the method depends on the instance.<br>\n<br>\nQuick fix: replaces the instance variable with the class name.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantStreamOptionalCall",
          "displayName": "Redundant step in Stream or Optional call chain",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant Stream or Optional calls like <code>map(x -> x)</code> or <code>filter(x -> true)</code>,\nredundant <code>sorted</code> or <code>distinct</code>.\n<p>Note that a mapping operation in code like <code>streamOfIntegers.map(Integer::valueOf)</code> works as <code>requireNonNull</code>\n  check:\n  if stream contains a <code>null</code>, it will throw <code>NullPointerException</code>, thus it's not absolutely redundant. Uncheck the\n  \"Report redundant boxing in Stream.map\" checkbox if you don't want such cases to be reported.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CanBeFinal",
          "displayName": "Declaration can have final modifier",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports all fields, methods or classes, found in the specified inspection\nscope, that may have a <b><font color=\"#000080\">final</font></b> modifier added to their declarations. <br> <br>\n<!-- tooltip end -->\nUse check boxes in the inspection options below, to define which declarations are to be reported.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryModuleDependencyInspection",
          "displayName": "Unnecessary module dependency",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nLists modules which contain redundant dependencies on other modules.\nThese dependencies can be safely removed.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "unused",
          "displayName": "Unused declaration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes, methods or fields in the specified inspection scope that\nare not used or not reachable from entry points. It also reports parameters that are not used by their methods and all method\nimplementations/overriders and local variables that are declared but not used.\nSome unused members might not be reported during in-editor highlighting. Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.\nTo see all results, please run the inspection using Analyze | Inspect Code... or Analyze | Run Inspection by Name...\n<br> <br>\n<!-- tooltip end -->\nUse visibility settings below to configure what members should be reported, e.g. configuring report private methods only means\nthat public methods of private inner class would be reported though protected methods of top level class would be ignored.\n<br><br>\nUse check boxes in the inspection options below, to specify what should be automatically assumed entry points. You will\nalso have a possibility to add entry points manually when inspection results are ready. You may also configure annotations to mark members as entry points as well\nas code patterns.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantLambdaParameterType",
          "displayName": "Redundant lambda parameter types",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda formal parameter types which are redundant, because they can be inferred from the context.\n<p>The quick fix removes the parameter types from the lambda.\n<p>Example: <pre><code>Map&lt;String, Integer&gt; map = ...\nmap.forEach((String s, Integer i) -> log.info(s + \"=\" + i));</code></pre>\n<p>The code above can be simplified to the following:\n<pre><code>Map&lt;String, Integer&gt; map = ...\nmap.forEach((s, i) -> log.info(s + \"=\" + i));</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnusedLibrary",
          "displayName": "Unused library",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports libraries attached to the specified inspection scope that\nare not used directly from code. <br> <br>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SameParameterValue",
          "displayName": "Actual method parameter is the same constant",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods where a parameter appears to be always the same constant.<br>\n<br>\nExample:\n<pre>\n<code>static void printPoint(int x, int y) { // x is always 0\n  System.out.println(x + \", \" + y);\n}\n\npublic static void main(String[] args) {\n  printPoint(0, 1);\n  printPoint(0, 2);\n}\n</code>\n</pre>\nQuick fix: inlines the constant value. This may simplify the method implementation.\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionalExpressionCanBeFolded",
          "displayName": "Functional expression can be folded",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports method references or lambda expressions which point to a method of their own functional interface type and hence can be replaced with their qualifiers, like\n<br/>\n<ul>\n  <li><code>SwingUtilities.invokeLater(r::run);</code></li>\n  <li><code>SwingUtilities.invokeAndWait(() -> r.run());</code>  </li>\n</ul>\ncan be replaced with\n<ul>\n  <li><code>SwingUtilities.invokeLater(r);</code></li>\n  <li><code>SwingUtilities.invokeAndWait(r);</code></li>\n</ul>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnusedReturnValue",
          "displayName": "Method can be void",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose return values are never used when called.\nThe return type of such methods can be made <code>void</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedLabel",
          "displayName": "Unused label",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports unused code labels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantExplicitClose",
          "displayName": "Redundant 'close()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nInspection reports unnecessary close of resource in the end of try-with-resources block\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantImplements",
          "displayName": "Redundant interface declaration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any cases of classes declaring that they implement or extend an interface, when\nthat interface is already declared as implemented by a superclass or extended by another interface\nof that class. Such declarations are unnecessary, and may be safely removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SameReturnValue",
          "displayName": "Method returns the same value",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods and method hierarchies where the return value appears to\nbe always the same constant.\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicateThrows",
          "displayName": "Duplicate throws",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate exceptions in a method throws list.\nFor example:\n<code><pre>\n<b>void</b> f() <b>throws</b> Exception, <b>Exception</b> {\n}\n</pre></code>\n<br>\nThe inspection also warns if one exception subclasses another.\n For example:\n<code><pre>\n<b>void</b> f() <b>throws</b> <b>IOException</b>, Exception {\n}\n</pre></code>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore exceptions subclassing others.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ObviousNullCheck",
          "displayName": "Null-check method is called with obviously non-null argument",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports if null-checking method (like <code>Objects.requireNonNull</code> or <code>Assert.assertNotNull</code>) is\ncalled on the value which is obviously non-null. Such check is redundant and may indicate a programming error.\n<!-- tooltip end -->\n<p>New in 2017.2</p>\n</body>\n</html>"
        },
        {
          "shortName": "Java9RedundantRequiresStatement",
          "displayName": "Redundant 'requires' statement in module-info",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection detects a situation where Java 9 module A requires Java 9 module B, but A doesn't use any package from B.\nAlso, requiring the module 'java.base' is redundant.\n<p>\n  The fix deletes the 'requires' directive for such redundant dependencies.\n  If the deleted dependency re-exported modules that are actually used, the fix adds 'requires' directive for these modules.\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Quality tools",
      "inspections": [
        {
          "shortName": "PhpCSFixerValidationInspection",
          "displayName": "PHP CS Fixer validation",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports coding style problems detected by PHP CS Fixer.\n<p>\n  The inspection requires PHP CS Fixer to be properly installed and set up in the IDE under <b>Settings/Preferences | Languages & Frameworks\n  | PHP | Quality Tools | PHP CS Fixer</b>.\n</p>\n<p>It is recommended to install PHP CS Fixer either as a Composer dependency or globally. See <a href=\"https://github.com/FriendsOfPHP/PHP-CS-Fixer#installation\">PHP-CS-Fixer installation (GitHub)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCSValidationInspection",
          "displayName": "PHP_CodeSniffer validation",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports coding style problems detected by PHP_CodeSniffer.\n<p>\n  The inspection requires PHP_CodeSniffer to be properly installed and set up in the IDE under <b>Settings/Preferences | Languages &\n  Frameworks | PHP | Quality Tools | PHP_CodeSniffer</b>.\n</p>\n\n<p>It is recommended to install PHP_CodeSniffer either as a Composer dependency or globally.</p>\n<p>See <a\n    href=\"https://github.com/squizlabs/PHP_CodeSniffer#installation\">PHP_CodeSniffer installation (GitHub)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "MessDetectorValidationInspection",
          "displayName": "PHP Mess Detector validation",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports coding style problems detected by PHP Mess Detector.\n<p>\n  The inspection requires PHP Mess Detector to be properly installed and set up in the IDE under <b>Settings/Preferences | Languages &\n  Frameworks | PHP | Quality Tools | Mess Detector</b>.\n</p>\n<p>\n  It is recommended to install PHP Mess Detector either as a Composer dependency or globally. See <a href=\"https://phpmd.org/download/index.html\">PHP Mess Detector installation (phpmd.org)</a> for details.\n</p>\n<p>\n  You can use a predefined set of rules or add your own by specifying valid <i>ruleset.xml</i> files. See the <a href=\"https://phpmd.org/rules/index.html\">rules index (phpmd.org)</a> and <a href=\"https://phpmd.org/documentation/creating-a-ruleset.html\">How to create a custom rule set (phpmd.org)</a> for details.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid CSS media feature",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown media features and illegal media feature values.\n</body>\n</html>\n"
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid CSS pseudo-selector",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown and inappropriate pseudo-classes and pseudo-elements.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced CSS @import",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects misplaced CSS @import declarations. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved CSS custom property",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection warns about CSS custom property variable references which cannot be resolved to any valid target.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid CSS function",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown functions and illegal function parameters.\n</body>\n</html>\n"
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative CSS value",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects negative values assigned to CSS attributes that should never be\nnegative. For example, object width or height. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Invalid CSS @charset rule",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects misplaced @charset rules and inappropriate charset values.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid CSS property value",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects illegal property's values.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnresolvedClass",
          "displayName": "Unresolved CSS Class",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection warns about CSS class references which cannot be resolved to any valid target.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid CSS selector",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown CSS selectors and provides ability to declare them as a class or an id. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidElement",
          "displayName": "Invalid CSS element",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects inappropriate values assigned to CSS attributes. For example,\ninvalid measurement units or values out of range. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown CSS at-rule",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown CSS at-rules. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unknown file or directory",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks references to files and directories. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown CSS property",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights CSS properties that are unknown or used in wrong context, and allows to define such properties as 'custom' to avoid highlighting them as invalid.<br>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Finalization",
      "inspections": [
        {
          "shortName": "NoExplicitFinalizeCalls",
          "displayName": "'finalize()' called explicitly",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>Object.finalize()</b>. Calling\n<b>Object.finalize()</b> explicitly is a very bad idea, as it can result in objects being placed in an\ninconsistent state. Calls to <b>super.finalize()</b> from within implementations of <b>finalize()</b>\nare benign, and are not reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Finalize",
          "displayName": "'finalize()' declaration",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any implementations of\na <b>finalize()</b> method. For performance reasons or due to inability\nto guarantee that <b>finalize()</b> will ever be called,\nsome coding standards prohibit its use.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore <b>finalize()</b> implementations with an empty\nmethod body or a body containing only if statements which have a condition which\nevaluates to false at compile time. For performance reasons it can be beneficial to\noverride a non-trivial <b>finalize()</b> with an empty\nimplementation in a subclass. An empty final <b>finalize()</b>\nimplementation can also be used to prevent subclasses from overriding.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalizeNotProtected",
          "displayName": "'finalize()' not declared 'protected'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any implementations of the <b>Object.finalize()</b> method\nwhich are not declared <b>protected</b>. <b>finalize()</b> should be declare <b>protected</b>,\nto prevent it from being explicitly invoked by other classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 8",
      "inspections": [
        {
          "shortName": "Convert2MethodRef",
          "displayName": "Lambda can be replaced with method reference",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambdas which can be replaced with method references. Use the <a href=\"settings://preferences.sourceCode.Java?Lambda%20Body\">Settings | Editor | Code Style | Java | Code Generation</a> settings to configure special method references.\n<p>\nLambda/method references syntax is not supported under Java 1.7 or earlier JVMs.\n</body>\n</html>\n"
        },
        {
          "shortName": "Anonymous2MethodRef",
          "displayName": "Anonymous type can be replaced with method reference",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous types which can be replaced with method references.\n<p>\n  Note that if an anonymous class is converted into an unbound method reference, the same method reference object \n  can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used, \n  separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, \n  e.g. when anonymous class instances are used as <code>HashMap</code> keys.\n</p>\n<p>\nMethod references syntax is not supported under Java 1.7 or earlier JVMs.\n</body>\n</html>"
        },
        {
          "shortName": "Java8MapApi",
          "displayName": "Single Map method can be used",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports common usage patterns of <code>java.util.Map</code> that could be replaced with Java 8 methods:\n<code>getOrDefault()</code>, <code>computeIfAbsent()</code>, <code>putIfAbsent()</code>, <code>merge()</code>, or <code>replaceAll()</code>.\n<p>Examples:</p>\n<ul>\n  <li>The <b>Map.getOrDefault</b> method can be used in:\n    <pre>\n      String val = map.containsKey(key) ? map.get(key) : \"none\";</pre>\n  </li>\n  <li>The <b>Map.computeIfAbsent</b> method can be used in:\n    <pre>\n      List&lt;String&gt; list = map.get(key);\n      if (list == null) {\n        list = new ArrayList&lt;&gt;();\n        map.put(key, list);\n      }</pre>\n  </li>\n  <li>The <b>Map.putIfAbsent</b> method can be used in:\n    <pre>\n      String val = map.get(key);\n      if (val == null) map.put(key, newVal);</pre>\n  </li>\n  <li>The <b>Map.merge</b> method can be used in:\n    <pre>\n      Integer val = map.get(key);\n      if (val == null) map.put(key, 1);\n      else map.put(key, val + 1);</pre>\n  </li>\n  <li>The <b>Map.replaceAll</b> method can be used in:\n    <pre>\n      for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {\n        map.put(entry.getKey(), transform(entry.getValue()));\n      }\n    </pre>\n  </li>\n\n</ul>\n<p>Note that the replacement with <code>computeIfAbsent()</code> or <code>merge()</code> might work incorrectly for some <code>Map</code>\nimplementations if the code extracted to the lambda expression modifies the same <code>Map</code>. By default,\nthe warning doesn’t appear if this code might have side effects. If necessary, enable the last checkbox to always show the warning.</p>\n<p>Also, due to different handling of the <code>null</code> value in old methods like <code>put()</code> and newer methods like \n<code>computeIfAbsent()</code> or <code>merge()</code>, semantics might change if storing the <code>null</code> value into given \n<code>Map</code> is important. The inspection won't suggest the replacement when the value is statically known to be nullable, \nbut for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning \nand adding an explanatory comment. \n</p>\n<!-- tooltip end -->\n<p>This inspection works only if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8ListSort",
          "displayName": "Collections.sort() can be replaced with List.sort()",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>Collections.sort(list, comparator)</code> which could be replaced with <code>list.sort(comparator)</code>.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2streamapi",
          "displayName": "Loop can be collapsed with Stream API",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports loops which can be replaced with stream API calls.\n<p>\nThe Stream API is not available under Java 7 or earlier JVMs.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyForEach",
          "displayName": "Simplifiable forEach() call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>forEach()</b> calls which can be replaced with more concise method or from which intermediate steps can be extracted.\n<p>\nThe Stream API is not available under Java 7 or earlier JVMs\n<p>\n<small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousHasLambdaAlternative",
          "displayName": "Anonymous type has shorter lambda alternative",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous classes which could be transformed to constructor or factory method call accepting lambda expression.\n<p>The following classes are reported by this inspection:</p>\n<ul>\n  <li><b>ThreadLocal</b> anonymous classes having <b>initialValue()</b> method (could be replaced with <b>ThreadLocal.withInitial</b>)</li>\n  <li><b>Thread</b> anonymous classes having <b>run()</b> method (could be replaced with <b>new Thread(Runnable)</b></li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "FoldExpressionIntoStream",
          "displayName": "Expression can be folded into Stream chain",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions with repeating pattern which could be replaced with Stream API for String.join.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaCanBeMethodCall",
          "displayName": "Lambda can be replaced with method call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda expressions which could be replaced with JDK method call.\n<p>For example, the expression <code>x -&gt; x</code> of type <code>Function&lt;T, T&gt;</code>\n  could be replaced with <code>Function.identity()</code> call.</p>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Guava",
          "displayName": "Guava's functional primitives can be replaced by Java",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nInspection detects usages of Guava's functional primitives like\n<b>FluentIterable</b>, <b>Optional</b>, <b>Function</b>, <b>Predicate</b> and <b>Supplier</b>.\n<br>\nMay change semantic: some of lazy-evaluated guava's iterables could be transformed to eager-evaluated iterable.\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "CodeBlock2Expr",
          "displayName": "Statement lambda can be replaced with expression lambda",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda expressions with code block bodies when expression-style bodies can be used\n</body>\n</html>"
        },
        {
          "shortName": "Java8CollectionRemoveIf",
          "displayName": "Loop can be replaced with Collection.removeIf()",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports loops which could be collapsed into single <code>Collection.removeIf</code> call.\n<p>For example:</p>\n<pre>\n  for (Iterator&lt;String&gt; it = collection.iterator(); it.hasNext(); ) {\n    String aValue = it.next();\n    if(shouldBeRemoved(aValue)) {\n      it.remove();\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorCombinators",
          "displayName": "Comparator combinator can be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports Comparators defined as lambda expressions which could be expressed using\nmethods like <code>Comparator.comparing()</code>.\n<p>Some comparators like <code>(person1, person2) -> person1.getName().compareTo(person2.getName())</code>\n  could be simplified like this: <code>Comparator.comparing(Person::getName)</code>.</p>\n<p>Also suggests to replace chain comparisons with Comparator.thenComparing(), e.g.\n  <code>\n    int res = o1.first.compareTo(o2.first);\n    if(res == 0) res = o1.second.compareTo(o2.second);\n    if(res == 0) res = o1.third - o2.third;\n    return res;\n  </code> will be replaced with\n  <code>\n    objs.sort(Comparator.comparing((Obj o) -> o.first).thenComparing(o -> o.second).thenComparingInt(o -> o.third));\n  </code>\n</p>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8MapForEach",
          "displayName": "Map.forEach() can be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSuggests to replace <code>for(Entry&lt;?,?&gt; entry : map.entrySet()) {...}</code> or\n<code>map.entrySet().forEach(entry -&gt; ...)</code> with <code>map.forEach((key, value) -> ...)</code>.\n<p>\n  When checkbox is checked, only <code>entrySet().forEach()</code> cases will be reported.\n  However the quick-fix action will be available for <code>for</code>-loops as well.\n</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticPseudoFunctionalStyleMethod",
          "displayName": "Pseudo functional expression using static class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nInspection detects usages of pseudo-functional code if Java Stream API is available.\n<br/>\nConsider cases when monad behaviour is emulated by static method call:\n<br/>\n<code>\nList&lt;String&gt; transformedIterable = Iterables.transform(someList, someTransformFunction);\n</code>\n<br>\nNote, that code semantic could be changed, for example: guava's <b>Iterable.transform</b> produce lazy-evaluated iterable\nbut replacement produced by quick fix will be eager-evaluated.\n<br>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2Lambda",
          "displayName": "Anonymous type can be replaced with lambda",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports all anonymous classes which can be replaced with lambda expressions.\n  <p>\n    Note that if an anonymous class is converted into a stateless lambda, the same lambda object \n    can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\n    separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, \n    e.g. when anonymous class instances are used as <code>HashMap</code> keys.\n  </p>\n  <p>\n  Lambda syntax is not supported under Java 1.7 or earlier JVMs.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "PhpLanguageLevelInspection",
          "displayName": "Language level",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the language features used in source code that are not supported for the selected language level.\n  <p>For example, traits can be used only in PHP 5.4 and later.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNamedArgumentUsageInspection",
          "displayName": "Argument with name identifier",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>Reports arguments with name identifiers.</body>\n</html>"
        },
        {
          "shortName": "PhpDeprecatedCastInspection",
          "displayName": "Deprecated cast",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated cast expressions:\n<ul>\n  <li>\n    <code>(unset)</code> cast expressions, which are deprecated starting from PHP 7.2.\n  </li>\n  <li>\n    <code>(real)</code> cast expressions, which are deprecated starting from PHP 7.4.\n  </li>\n</ul>\n<p>\n  See <a href=\"https://www.php.net/manual/en/migration72.deprecated.php#migration72.deprecated.unset-cast\">Deprecated features in PHP 7.2.x (php.net)</a> and <a href=\"https://wiki.php.net/rfc/deprecations_php_7_4#the_real_type\">Deprecations for PHP 7.4 (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpParameterNameChangedDuringInheritanceInspection",
          "displayName": "Parameter's name changed during inheritance",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n  <body>\n    Reports the methods' parameters whose names differ from the same parameters defined in parent methods. Starting with PHP 8.0, such code can cause runtime errors.\n  </body>\n</html>"
        },
        {
          "shortName": "PhpPromotedFieldUsageInspection",
          "displayName": "Promoted property usage",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports properties declared through promoted constructor parameters.\n<p>\n  Using promoted properties is only possible since PHP 8.0. In earlier PHP versions, it leads to a parse error.\n</p>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/constructor_promotion\">Constructor Property Promotion (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIgnoredClassAliasDeclaration",
          "displayName": "Ignored class alias declaration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the class alias declarations that are ignored by the IDE because the actual class declaration with the same FQN exists.\n<!-- tooltip end -->\n<p>\n  The inspection is intended to clarify the IDE’s behavior in the cases when both the class and the class alias declarations are present.\n  When several declarations with the same FQN exist, the IDE usually fails to choose a single one between them.\n  This leads to missing code completion, erroneous type inference, and so on. Since the class declaration prevails\n  over the class alias declaration, the latter becomes redundant and therefore ignored by the IDE.\n</p>\n<p>\n  Note that ignoring class alias declarations does not affect the behavior of the PHP interpreter.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpStaticAsDynamicMethodCallInspection",
          "displayName": "Static method called as dynamic",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports dynamic calls to static class methods.\n<!-- tooltip end -->\n<p>If the target has the magic method <code>__call</code>, a separate inspection severity and highlighting level can be set.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpHierarchyChecksInspection",
          "displayName": "Class hierarchy checks",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nChecks the classes' hierarchy: abstract methods implementation, the compatibility of implementing/overriding methods with their declarations in parent classes, and properties' types redeclarations.\n  <p>All reported violations result in PHP fatal errors. It is not recommended disabling or suppressing this inspection.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCurlyBraceAccessSyntaxUsageInspection",
          "displayName": "Curly brace access syntax usage",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the usages of curly brace syntax for accessing array elements and string offsets.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpFieldCanBePromotedInspection",
          "displayName": "Property can be promoted",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the properties that can be replaced with promoted versions.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/constructor_promotion\">Constructor Property Promotion (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpInvalidMagicMethodModifiersInspection",
          "displayName": "Invalid magic method modifiers",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports magic methods that are not declared as <code>public</code> or are declared as <code>static</code>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNamedArgumentMightBeUnresolvedInspection",
          "displayName": "Named argument may be unresolved",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the named arguments in method calls that might be unresolved depending on a specific class instance within the hierarchy.\n</body>\n</html>"
        },
        {
          "shortName": "PhpSuperClassIncompatibleWithInterfaceInspection",
          "displayName": "Method declaration of super class is incompatible with implemented interface",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the methods declarations in parent classes that are incompatible with implemented interfaces.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDeprecationInspection",
          "displayName": "Deprecated",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of deprecated entities.\n<p>\n  In most cases, such usages should be removed or replaced with other constructs.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNestedTernaryExpressionUsageInspection",
          "displayName": "Nested ternary operator usage",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports nested ternary expressions. They are deprecated starting from PHP 7.4.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDisabledExtensionStubsInspection",
          "displayName": "Disabled extension stubs",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of classes, functions, and constants, for which the extension stubs are disabled.\n</body>\n</html>"
        },
        {
          "shortName": "PhpIncludeInspection",
          "displayName": "Unresolved include",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports non-resolved <code>include</code> expressions.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDeprecatedImplodeUsageInspection",
          "displayName": "Deprecated implode/join usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usage of the <code>implode</code> and <code>join</code> functions.\n<!-- tooltip end -->\n<p>Starting from PHP 7.4, using <code>implode</code> and <code>join</code> with an array as the first argument and a string as the second argument is deprecated.</p>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/deprecations_php_7_4#implode_parameter_order_mix\">Deprecations for PHP 7.4 (php.net)</a> for details.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PhpInternalEntityUsedInspection",
          "displayName": "Usage of internal entity",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the usages of the entities that are marked as <code>@internal</code>.\n  <p>\n    In most cases, such usages should be removed or replaced with other constructs.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpArgumentWithoutNamedIdentifierInspection",
          "displayName": "Argument without name identifier",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports arguments without name identifiers.\n</body>\n</html>"
        },
        {
          "shortName": "PhpClassImplementsSolelyTraversableInspection",
          "displayName": "Class can't implement Traversable directly",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports the classes that are implementing the <code>Traversable</code> interface alone, not as part of <code>Iterator</code> or <code>IteratorAggregate</code> interfaces.\n<!-- tooltip end -->\n<p>\n  The <code>Traversable</code> interface is an internal engine interface; it cannot be implemented in PHP scripts. See <a href=\"https://www.php.net/manual/en/class.traversable.php\">The Traversable interface (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpElementIsNotAvailableInCurrentPhpVersionInspection",
          "displayName": "Element is not available in configured PHP version",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of entities which were introduced in PHP version later than configured one.\n</body>\n</html>"
        },
        {
          "shortName": "PhpIncorrectMagicMethodSignatureInspection",
          "displayName": "Incorrect magic method signature",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports incompatible magic methods signatures.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/magic-methods-signature\">RFC: Ensure correct signatures of magic methods (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDynamicAsStaticMethodCallInspection",
          "displayName": "Dynamic method called as static",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports static calls to dynamic class methods.\n  <!-- tooltip end -->\n  <p>For classes having the magic method <code>__callStatic</code>, a separate inspection severity and highlighting level can be set.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "GroovyAssignabilityCheck",
          "displayName": "Incompatible type assignments",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments with incompatible types.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyResultOfAssignmentUsed",
          "displayName": "Result of assignment used",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions, so as to use the assigned value immediately.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a\ngiven construct should do precisely one thing.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedAssignment",
          "displayName": "Nested assignment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions.\nWhile admirably terse,\nsuch expressions may be confusing, and violate the general design principle that a given construct\nshould do precisely one thing.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUncheckedAssignmentOfMemberOfRawType",
          "displayName": "Unchecked assignment from members of raw type",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n        Reports unchecked assignments from members of raw type.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySillyAssignment",
          "displayName": "Silly assignment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments of a variable to itself.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignmentCanBeOperatorAssignment",
          "displayName": "Assignment replaceable with operator assignment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment operations which can be replaced by operator-assignment. Code\nusing operator assignment may be clearer, and theoretically more performant.\n<p>\n Use the check box below to ignore the conditional operators <b>&amp;&amp;</b>\n and <b>||</b>. Replacing conditional operators with operator\n assignment modifies the semantics of the expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignmentToForLoopParameter",
          "displayName": "Assignment to for-loop parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to or modification of <b>for</b> statement parameters inside the <b>for</b> loop body.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to or modification of a\nvariable declared as a method parameter.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "toString() issues",
      "inspections": [
        {
          "shortName": "ClassHasNoToStringMethod",
          "displayName": "Class does not override 'toString()' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without <b>toString()</b> method.\n</body>\n</html>"
        },
        {
          "shortName": "FieldNotUsedInToString",
          "displayName": "Field not used in 'toString()' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields which are not used in the <b>toString()</b> method of a class. This can be useful to discover\nfields that were added after the <b>toString()</b> method was created and for which the <b>toString()</b> method was not\ncorrectly adjusted. It is possible to exclude fields from this check in the settings accessible via the Generate > toString() dialog.\n<p>\n  This inspection will also check for problems with getter methods if 'enable getters in code generation' is enabled\n  in settings.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 10",
      "inspections": [
        {
          "shortName": "RedundantExplicitVariableType",
          "displayName": "Local variable type can be omitted",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant local variable types. Theses types can be inferred from the context and thus be replaced with <b>var</b>.\n</body>\n</html>"
        },
        {
          "shortName": "VariableTypeCanBeExplicit",
          "displayName": "Variable type can be explicit",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables with a <b>var</b> type that can be replaced with an explicit type.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "PHPUnit",
      "inspections": [
        {
          "shortName": "PhpUnitAssertArrayHasKeyInspection",
          "displayName": "Method assertArrayHasKey/assertArrayNotHasKey can be used instead",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports alternative usage of the <code>assertTrue</code> and <code>assertNotTrue</code> methods with <code>array_key_exists</code> function\nas a parameter\n\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/ru/latest/assertions.html#assertarrayhaskey\">assertArrayHasKey</a> for details.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitDeprecatedExpectExceptionInspection",
          "displayName": "Deprecated expectException usage",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usages of <code>expectException()</code>.\n<p>\n  Support for using the <code>expectException()</code> method with\n  <code>\\PHPUnit\\Framework\\Error\\Deprecated</code>,\n  <code>\\PHPUnit\\Framework\\Error\\Error</code>,\n  <code>\\PHPUnit\\Framework\\Error\\Notice</code>, and\n  <code>\\PHPUnit\\Framework\\Error\\Warning</code> is deprecated and will be removed in PHPUnit 10.\n</p>\n<p>\n  Instead, the <code>expectDeprecation()</code>, <code>expectError()</code>, <code>expectNotice()</code>, and\n  <code>expectWarning()</code> methods should be used.\n</p>\n\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/9.0/writing-tests-for-phpunit.html#testing-php-errors-warnings-and-notices\">Testing PHP Errors, Warnings, and Notices (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitCoversByAccessModifierIsDeprecatedInspection",
          "displayName": "Deprecated @covers/@uses by access modifier annotation",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>@covers</code> and <code>@uses</code> PHPUnit doc tags that are using <code>ClassName::&lt;*&gt;</code>. Such annotations won't be supported in PHPUnit 10 and later.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertContainsInspection",
          "displayName": "Deprecated assertContains/assertNotContains usage",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usages of the <code>assertContains</code> and <code>assertContains</code> functions with string <code>$needle</code> and <code>$ignoreCase</code> parameter.\n<!-- tooltip end -->\n<p>The string <code>$needle</code> and optional <code>$ignoreCase</code> parameters\n  of the <code>assertContains</code> and <code>assertNotContains</code> functions are deprecated and will be removed in PHPUnit 9.</p>\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertstringcontainsstring\">Usage of the assertEquals function (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertFileEqualsInspection",
          "displayName": "Deprecated assertFileEquals/assertStringEqualsFile usage",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the deprecated usages of the <code>assertFileEquals</code>, <code>assertFileNotEquals</code>, <code>assertStringEqualsFile</code>, and <code>assertStringNotEqualsFile</code> functions with the <code>$canonicalize</code> and <code>$ignoreCase</code> parameters.\n<!-- tooltip end -->\n<p>The optional <code>$canonicalize</code> and <code>$ignoreCase</code> parameters\n  of the <code>assertFileEquals</code> and <code>assertFileNotEquals</code> functions are deprecated and will be removed in PHPUnit 9.</p>\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertfileequals\">Usage of the assertFileEquals function (phpunit.readthedocs.io)</a> or <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertstringequalsfile\">Usage of the assertFileEquals function (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitCoversFunctionWithoutScopeResolutionOperatorInspection",
          "displayName": "Covered function reference is provided without ‘::’",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to functions/methods in the <code>@covers</code> PHPDoc tags that are not prepended with the scope resolution operator (<code>::</code>).\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitMissingTargetForTestInspection",
          "displayName": "Missing target element for PHPUnit test",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the test classes and methods, for which no target elements were found.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitExpectedExceptionDocTagIsDeprecatedInspection",
          "displayName": "Deprecated exception handling via doc tags",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of the following deprecated PHPUnit doc tags:\n<ul>\n  <li><code>@expectedException</code></li>\n  <li><code>@expectedExceptionMessage</code></li>\n  <li><code>@expectedExceptionCode</code></li>\n  <li><code>@expectedExceptionMessageRegExp</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitMisorderedAssertEqualsArgumentsInspection",
          "displayName": "Misordered assertEquals/assertNotEquals arguments",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to PHPUnit <code>assertEquals</code> and <code>assertNotEquals</code> which have a non-literal as the expected result\nargument and a literal as the actual result argument. Such calls will behave fine for assertions which pass, but may give confusing error\nreports if their expected and actual arguments differ.\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertequals\">assertEquals</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitUndefinedDataProviderInspection",
          "displayName": "Undefined PHPUnit data provider",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Detects that the method referenced in the <code>@dataProvider</code> PHPDoc tag is not found.\n\n  <p>Note that when resolving <code>dataProvider</code>, PHPUnit doesn't take <code>use</code> statements into account.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertEqualsInspection",
          "displayName": "Deprecated assertEquals/assertNotEquals usage",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usages of the <code>assertEquals</code> and <code>assertNotEquals</code> functions with <code>$delta</code>, <code>$maxDepth</code>,\n<code>$canonicalize</code>, and <code>$ignoreCase</code> parameters.\n<!-- tooltip end -->\n<p>The optional <code>$delta</code>, <code>$maxDepth</code>, <code>$canonicalize</code>, and <code>$ignoreCase</code> parameters\n  of the <code>assertEquals</code> and <code>assertNotEquals</code> functions are deprecated and will be removed in PHPUnit 9.</p>\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertequals\">Usage of the assertEquals function (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertCountInspection",
          "displayName": "Usage assertCount/assertSameSize methods instead of assertEquals",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports alternative usage of the <code>assertEquals</code> and <code>assertNotEquals</code> methods with <code>count</code> function as a parameter\n\n<p>\nSee <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertcount\">Usage of the assertCount</a> for details.\n</p>\n<p>\nSee <a href=\"https://hotexamples.com/examples/-/PHPUnit_Framework_Assert/assertSameSize/php-phpunit_framework_assert-assertsamesize-method-examples.html\">Usage of the assertSameSize</a> for details.\n</p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "KotlinLoggerInitializedWithForeignClass",
          "displayName": "Logger initialized with foreign class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports any <b>Logger</b>s which are initialized with a class literal from a different class than the <b>Logger</b> is contained in.\n<br /><br />\nUse the table below to specify the logger factory classes and logger factory methods recognized by this inspection.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code smell",
      "inspections": [
        {
          "shortName": "PhpTernaryExpressionCanBeReplacedWithConditionInspection",
          "displayName": "Ternary expression can be replaced with condition",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the ternary expressions specified as <code>condition ? true : false</code> that can be safely replaced with just <code>condition</code>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUsageOfSilenceOperatorInspection",
          "displayName": "Usage of a silence operator",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of the silence operator (<code>@</code>), which is highly discouraged.\n<p>See <a href=\"https://www.php.net/manual/en/language.operators.errorcontrol.php\">Error Control Operators (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpTooManyParametersInspection",
          "displayName": "Too many parameters in function declaration",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the function/method declarations with the number of parameters exceeding the specified limit.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryReturnInspection",
          "displayName": "Unnecessary 'return' statement",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports unnecessary <code>return</code> statements at the end of functions having the <code>void</code> return type. Such statements are unnecessary and can be safely removed.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/void_return_type\">PHP RFC: Void Return Type (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryLocalVariableInspection",
          "displayName": "Unnecessary local variable",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the local variables that are used in exit statements, such as <code>throw</code>, <code>return</code>, or <code>yield</code>, immediately after their introduction.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMethodParametersCountMismatchInspection",
          "displayName": "Parameters number mismatch declaration",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the function/method calls that take more parameters than specified in their declaration.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryStaticReferenceInspection",
          "displayName": "Redundant 'static' in final class",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>static</code> usages inside final class\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantOptionalArgumentInspection",
          "displayName": "Redundant optional argument",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant arguments that match the corresponding default values for optional parameters.\n</body>\n</html>"
        },
        {
          "shortName": "PhpParameterByRefIsNotUsedAsReferenceInspection",
          "displayName": "Unnecessary pass-by-ref",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports elements that have <code>&</code> in declaration and not effectively used as references.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMatchExpressionWithOnlyDefaultArmInspection",
          "displayName": "Match expression has only default arm and should be simplified",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports match expressions with only default match arm\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantAssignmentToPromotedFieldInspection",
          "displayName": "Redundant assignment to promoted property",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports redundant assignments to class properties that duplicate automatic assignments performed through promoted constructor parameters.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/constructor_promotion\">Constructor Property Promotion (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpInvalidInstanceofInspection",
          "displayName": "Argument of 'instanceof' should be only objects or strings",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n  <body>\n    Reports arguments of 'instanceof' that are not objects or strings\n  </body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessarySemicolonInspection",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary semicolons.\n</body>\n</html>"
        },
        {
          "shortName": "PhpPrivateFieldCanBeLocalVariableInspection",
          "displayName": "Private property can be local",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the private properties that are used only in a single method. Such properties can be replaced with local variables.\n</body>\n</html>"
        },
        {
          "shortName": "PhpOverridingMethodVisibilityInspection",
          "displayName": "Method visibility shouldn't be overridden",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nChecks that the methods don't override visibility.\n<p>\n  Overriding a <code>protected</code> method with a <code>public</code> method in a child class makes this method accessible from everywhere.\n  This violates the encapsulation principle and is considered bad practice.\n</p>\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.oop5.visibility.php#language.oop5.visiblity-methods\">Method Visibility (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDuplicateCatchBodyInspection",
          "displayName": "Duplicate branch in 'catch' statement",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>catch</code> statements with duplicated bodies.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayUsedOnlyForWriteInspection",
          "displayName": "Array used only with write access",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports local arrays that are only updated, but never queried.\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpressionWithSameOperandsInspection",
          "displayName": "Logical expression has same operands",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the expressions that use the same operands, but should rather use different operands.\n</body>\n</html>"
        },
        {
          "shortName": "PhpToStringMayProduceExceptionInspection",
          "displayName": "'__toString' may throw an exception",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of <code>__toString</code> that may throw an exception, which is not allowed for PHP language level lower than 7.4.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUselessTrailingCommaInspection",
          "displayName": "Useless trailing comma",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the trailing commas in parameters lists and closures' <code>use</code> lists that do not bring any benefit.\n<ul>\n  <li>In a single-line list, a trailing comma is redundant and can be removed.</li>\n  <li>In a multiline list, if no line break is provided after a trailing comma, it becomes impossible to easily add, remove, or move\n    lines.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMethodOrClassCallIsNotCaseSensitiveInspection",
          "displayName": "Case mismatch in method call or class usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of functions, methods, classes, and namespaces that do not match the case used in their declarations.\n</body>\n</html>"
        },
        {
          "shortName": "PhpInconsistentReturnPointsInspection",
          "displayName": "Inconsistent return points",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports inconsistencies in function/method exit points.\n<!-- tooltip end -->\n<p>\nThe following types of inconsistencies are reported:\n</p>\n  <ul>\n    <li>The function/method contains the <code>return</code> statements both with and without arguments.</li>\n    <li>The function/method may return a value or otherwise end its execution without returning anything.</li>\n  </ul>\n<p>\nTechnically these are not errors, but practically they usually indicate a programming mistake.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Spring Web Services",
      "inspections": [
        {
          "shortName": "SpringWebServicesConfigurationsInspection",
          "displayName": "Spring Web Services configuration",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring Web Services configuration problems"
        },
        {
          "shortName": "SpringWebServiceAnnotationsInconsistencyInspection",
          "displayName": "Spring Web Services annotations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Incorrect use of Spring Web Service Annotations\n"
        },
        {
          "shortName": "SpringMessageDispatcherWebXmlInspection",
          "displayName": "Spring WS web.xml configuration",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring Web Service MessageDispatcherServlet errors"
        }
      ]
    },
    {
      "name": "Style",
      "inspections": [
        {
          "shortName": "JavaStylePropertiesInvocation",
          "displayName": "Java-style property access",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports properties accessed via method calls.\n</body>\n</html>\n"
        },
        {
          "shortName": "ChangeToMethod",
          "displayName": "Change to method",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports operator calls that can be replaced with methods.\n<p>\n<small>New in 2017.1</small>\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessaryDefModifier",
          "displayName": "Unnecessary 'def'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>def</b> modifiers when used with explicit type declaration.\n<p>For example:</p>\n<pre>\n<b>def</b> boolean foo() {} // modifier is unnecessary\n<b>def</b> Object bar // modifier is unnecessary\n<b>def</b> (int a, String b) = [] // modifier is required and therefore not highlighted\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ChangeToOperator",
          "displayName": "Change to operator",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls that can be replaced with operators.\n<p>\n<small>New in 2017.1</small>\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary semicolons.\n<p>For example:</p>\n<pre>\nprint 2; print 3 // semicolon is required\nprint 2; // semicolon is unnecessary\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "GrUnnecessaryAlias",
          "displayName": "Unnecessary import alias",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary import aliases\n<p>\n  <small>New in 2018.1</small>\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessaryPublicModifier",
          "displayName": "Unnecessary 'public'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>public</b> modifiers.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Manifest",
      "inspections": [
        {
          "shortName": "MissingFinalNewline",
          "displayName": "Missing final new line",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n  Checks whether a manifest file ends with a final newline (as required by the JAR file specification).\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledHeader",
          "displayName": "Unknown or misspelled header name",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports any unknown and probably misspelled header names and provides possible variants.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "MultipleRepositoryUrls",
          "displayName": "Multiple repository urls",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usage of multiple urls per repository(maven or ivy) block.\nThe problem is that no more than one url will be picked up for the repo and others will be ignored.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JUnit",
      "inspections": [
        {
          "shortName": "ParameterizedParametersStaticCollection",
          "displayName": "@RunWith(Parameterized.class) without data provider",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes annotated with @RunWith(Parameterized.<b>class</b>) without\ndata provider method annotated with @Parameterized.Parameters\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnconstructableTestCase",
          "displayName": "Unconstructable JUnit TestCase",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-abstract JUnit test cases which do not\nexpose a public no-arg constructor or a public constructor which takes a single string\nas an argument. Such test cases will be unrunnable by most JUnit test runners, including\nIDEA's.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestMethodInProductCode",
          "displayName": "JUnit test method in product source",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4+ @Test methods in product source trees.\nThis most likely indicates programmer error, and can result in test code being shipped\ninto production.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseWithConstructor",
          "displayName": "JUnit TestCase with non-trivial constructors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on JUnit test cases with initialization logic in their constructors. Initialization\nof JUnit test cases should be done in <b>setUp()</b> methods instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExpectedExceptionNeverThrown",
          "displayName": "Expected exception never thrown in test method body",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exceptions expected by a JUnit 4 test method,\nwhich are never thrown inside the method body.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5MalformedNestedClass",
          "displayName": "JUnit 5 malformed @Nested class",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports static inner classes annotated with @Nested.\n<!-- tooltip end -->\n<p>\n  <small>New in 2018.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseInProductCode",
          "displayName": "JUnit TestCase in product source",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit test cases in product source trees.\nThis most likely indicates programmer error, and can result in test code being shipped\ninto production.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseWithNoTestMethods",
          "displayName": "Test class with no tests",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports non-abstract test cases which do not\ncontain any test methods. Such test cases usually indicate developer error.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to specify that test cases which have super classes with\ntest methods should be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit3StyleTestMethodInJUnit4Class",
          "displayName": "Old style JUnit test method in JUnit 4 class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 3 style test methods which are located inside a class\nwhich does not extend the abstract JUnit 3 class <b>TestCase</b> and contains JUnit 4/JUnit 5 <b>@Test</b> annotated methods.\nIn addition to being confusing such test methods will not be run.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AssertEqualsMayBeAssertSame",
          "displayName": "'assertEquals()' may be 'assertSame()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>org.junit.Assert.assertEquals()</b>\nor <b>junit.framework.Assert.assertEquals()</b> which\ncan be replaced with an equivalent call to <b>assertSame()</b>.\nThis is possible when the arguments are instances of a final class which does not override\nthe <b>equals()</b> method.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Junit4Converter",
          "displayName": "JUnit 3 test can be JUnit 4",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports JUnit 3 test classes that can be converted to JUnit 4 test classes.\n<p>This inspection requires JUnit 4 available on the classpath and JDK 1.5 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "UseOfObsoleteAssert",
          "displayName": "Usage of obsolete 'junit.framework.Assert' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to methods from the <b>junit.framework.Assert</b> class. This class is\nobsolete and the calls can be replaced by calls to methods from the <b>org.junit.Assert</b> class.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnitDatapoint",
          "displayName": "Malformed @DataPoint field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for any member that is annotated with @DataPoint but is not public or not static.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "MultipleExceptionsDeclaredOnTestMethod",
          "displayName": "Multiple exceptions declared on test method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit test methods with more than one exception declared in the\n<b>throws</b> clause. Such a\n<b>throws</b> clause can be more concisely declared as:<br>\n<pre><b>throws</b> Exception</pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TestMethodWithoutAssertion",
          "displayName": "JUnit test method without any assertions",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports test methods of JUnit test case classes that do not contain\nany assertions. Such methods indicate either incomplete or weak test cases.\n<!-- tooltip end -->\n<p>\nUse the table below to specify which combinations of fully qualified class name and method name regular expression\nqualify as assertions.\nClass names also match subclasses.\n<p>\nUse the first checkbox below to specify if Java <b>assert</b> statements, using the <b>assert</b> keyword, should be considered an assertion.\n<p>\nUse the second checkbox to ignore test methods which declare exceptions.\nThis can be useful when you have tests that will throw an exception on failure and thus don't need any assertions.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BeforeClassOrAfterClassIsPublicStaticVoidNoArg",
          "displayName": "Malformed @BeforeClass/@BeforeAll or @AfterClass/@AfterAll method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4.0 <b>@BeforeClass</b> or <b>@AfterClass</b> methods\nwhich are not declared\n<b>public</b> and <b>static</b>, do not return <b>void</b>, or take arguments.\nSuch methods are easy to create inadvertently, but will not be executed by JUnit tests runners.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit4AnnotatedMethodInJUnit3TestCase",
          "displayName": "JUnit 4 test method in class extending JUnit 3 TestCase",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports JUnit 4 <b>@Test</b> annotated methods which are located inside a class\nextending the abstract JUnit 3 class <b>TestCase</b>. Mixing JUnit API's like this is\nconfusing and can lead to problems running the tests, for example a method annotated with <b>@Ignore</b> won't\nbe actually ignored if its name starts with test.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5MalformedRepeated",
          "displayName": "JUnit 5 malformed repeated test",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports repeated test problems:\n<ul>\n  <li>\n    @Test and @RepeatedTest on the same method\n  </li>\n  <li>\n    RepetitionInfo parameter is used in @BeforeAll/@AfterAll methods\n  </li>\n  <li>\n    RepetitionInfo parameter is used in @BeforeEach/@AfterEach methods in classes with @Test methods\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5Platform",
          "displayName": "@RunWith(JUnitPlatform.class) without test methods",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports classes annotated with @RunWith(JUnitPlatform.class) which provide no test methods. These classes won't start tests because\norg.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.DefensiveAnnotatedBuilder prevents recursion and\norg.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.DefensiveJUnit4Builder expects test methods\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5Converter",
          "displayName": "JUnit 4 test can be JUnit 5",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4 tests which can be automatically converted to JUnit 5. Though default runners are automatically convertable, custom runners, method- and field- rules are not and require manual changes.\nThis inspection requires JUnit 5 library already available on the classpath as well as JDK 1.8 or higher configured for the project.\n<p>\n  <small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "BeforeOrAfterIsPublicVoidNoArg",
          "displayName": "Malformed @Before or @After method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4.0 <b>@Before</b> or <b>@After</b> methods\nwhich are not declared\n<b>public</b>, do not return <b>void</b>, or take arguments.\nSuch methods are easy to create inadvertently, but will not be executed by JUnit tests runners.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5AssertionsConverter",
          "displayName": "Obsolete assertions in JUnit 5 tests",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to methods from the <b>junit.framework.Assert</b>, <b>org.junit.Assert</b>, <b>org.junit.Assume</b> classes inside JUnit 5 tests.\nThough still working, migration to <b>org.junit.jupiter.api.Assertions</b>/<b>org.junit.jupiter.api.Assumptions</b> could avoid dependency on old JUnit version.\n<p>\n  <small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "IgnoredJUnitTest",
          "displayName": "JUnit test annotated with '@Ignore'/'@Disabled'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit tests which are annotated with @Ignore/@Disabled.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5MalformedParameterized",
          "displayName": "JUnit 5 malformed parameterized test",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports parameterized tests which have malformed sources:\n<ul>\n  <li>\n    MethodSource has unknown target or method is not static, no-arg\n  </li>\n  <li>\n    ValueSource/EnumSource types are not convertible to method parameters\n  </li>\n  <li>\n    No sources are defined\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "JUnitRule",
          "displayName": "Malformed @Rule/@ClassRule field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports malformed @Rule/@ClassRule usages: <br/>\n<ul>\n  <li>\n    Checks for any member that is annotated with @Rule but is not public. \n  </li>\n  <li>\n    Checks for any member that is annotated with @ClassRule but is not public or not static.\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AssertEqualsCalledOnArray",
          "displayName": "'assertEquals()' called on array",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to JUnit's <b>assertEquals()</b>\nmethod with arguments of type array. Arrays should be checked with one of the\n<b>assertArrayEquals()</b> methods.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MigrateAssertToMatcherAssert",
          "displayName": "Assertion expression can be replaced with 'assertThat' method call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <b>Assert.assertEquals</b>, <b>Assert.assertTrue</b> etc. methods when its can be migrated to <b>Assert.assertThat</b>\n\n</body>\n</html>"
        },
        {
          "shortName": "MalformedSetUpTearDown",
          "displayName": "Malformed 'setUp()' or 'tearDown()' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit <b>setUp()</b> or <b>tearDown()</b> methods which are not declared\n<b>public</b>, do not return <b>void</b>, or take arguments.\nSuch <b>setUp()</b> or <b>tearDown()</b> methods are easy to create inadvertently,\nand will not be executed by JUnit test runners.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestFailedLine",
          "displayName": "Highlight problem line in test",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nHighlights failed method calls or assertions in tests.\n</body>\n</html>"
        },
        {
          "shortName": "TestMethodIsPublicVoidNoArg",
          "displayName": "Malformed test method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any JUnit test methods which are declared <b>static</b>, not declared\n<b>public</b>, do not return\n<b>void</b>, or have parameters.\nSuch test methods are easy to create inadvertently, but will not be executed by\nJUnit test runners.\n<!-- tooltip end -->\n<p>\nUse the table below to specify special annotations.\nAny parameter annotated with one of these annotations will not be reported.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuperTearDownInFinally",
          "displayName": "'super.tearDown()' not called from 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>super.tearDown()</b> calls which are not performed inside a <b>finally</b> block.\nIf there are other method calls in the <b>tearDown()</b> method, which may throw\nan exception before the <b>super.tearDown()</b> call, this may lead to inconsistencies and leaks.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "StaticSuite",
          "displayName": "'suite()' method not declared 'static'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports JUnit test case classes which contain <b>suite()</b> methods which\nare not declared <b>static</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java interop issues",
      "inspections": [
        {
          "shortName": "PackageDirectoryMismatch",
          "displayName": "Package name does not match containing directory",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports file's <b>package</b> directive not matching the location of the file.\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaCollectionsStaticMethodOnImmutableList",
          "displayName": "Call of Java mutator method on immutable Kotlin collection",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection report calls of Java mutator methods (like <b>fill</b>, <b>reverse</b>, <b>shuffle</b>, <b>sort</b>) on an immutable Kotlin collection.\nThis will likely produce an <b>UnsupportedOperationException</b> at runtime.\n</body>\n</html>\n"
        },
        {
          "shortName": "PlatformExtensionReceiverOfInline",
          "displayName": "Unsafe call of inline function with nullable extension receiver",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports potentially unsafe calls of inline functions with flexible nullable (platform type with unknown nullability) extension receivers.\nIn Kotlin 1.0 or 1.1, such calls do not include nullability check in bytecode,\nbut in Kotlin 1.2, nullability check is included and can provoke NPE if actual receiver is null.\nIt's recommended to add explicit <b>!!</b> if exception is what you want,\nor consider changing the function's receiver type to nullable if it should work without exceptions.\n</body>\n</html>"
        },
        {
          "shortName": "FakeJvmFieldConstant",
          "displayName": "Kotlin non-const property used as Java constant",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  This inspection reports non-<b>const</b> Kotlin properties used as Java annotation arguments.\n  It is possible for a property which is annotated with <b>@JvmField</b>,\n  has an initializer that can be evaluated at compile-time, has a primitive or <b>String</b> type.\n  Such properties have a <b>ConstantValue</b> attribute in bytecode in Kotlin 1.1-1.2.\n  This attribute allows javac to fold usages of the corresponding field and use that field in annotations.\n  This can cause incorrect behavior in case of separate or incremental compilation in mixed Java/Kotlin code.\n</p>\n<p>\n  This behavior is subject to change in Kotlin 1.3 (no <b>ConstantValue</b> attribute any more).\n  Recommended action: replace the <b>@JvmField</b> annotation with a <b>const</b> modifier on a relevant Kotlin property or inline it.\n</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinInternalInJava",
          "displayName": "Usage of Kotlin internal declarations from Java",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports usages of Kotlin internal declarations in Java code from a different module.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantNotNullExtensionReceiverOfInline",
          "displayName": "Not-null extension receiver of inline function can be made nullable",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports inline functions with not-null extension receivers which does not use the fact that extension receiver is not null.\nSuch functions are dangerous to call in Kotlin 1.2 on actual nullable flexible receiver type.\nConsider making receiver type nullable.\n</body>\n</html>"
        },
        {
          "shortName": "HasPlatformType",
          "displayName": "Function or property has platform type",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports functions and properties that have a platform type. In order to prevent unexpected errors, the type should be declared explicitly.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Concurrency annotation issues",
      "inspections": [
        {
          "shortName": "NonFinalFieldInImmutable",
          "displayName": "Non-final field in @Immutable class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any non-final field in a class with <b>@Immutable</b> annotation.\nThis violates the contract of the <b>@Immutable</b> annotation.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "StaticGuardedByInstance",
          "displayName": "Static member guarded by instance field or this",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations on <b>static</b> fields or methods,\nwhere the guard is either a non-static field or <b>this</b>. Guarding a <b>static</b> by a non-static may result in\nexcessive concurrency, multiple threads may be able to access the guarded field simultaneously, by locking in different object contexts.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "FieldAccessNotGuarded",
          "displayName": "Unguarded field access or method call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses of fields declared as <b>@GuardedBy</b> which are are not guarded by an appropriate synchronization structure.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalGuard",
          "displayName": "Non-final @GuardedBy field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations annotations where the guarding field\nis not <b>final</b>. Guarding on a non-final field may result in unexpected race conditions, as locks will\nbe held on the value of the field (which may change), rather than the field itself.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UnknownGuard",
          "displayName": "Unknown @GuardedBy field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations where the specified guarding field is unknown.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "InstanceGuardedByStatic",
          "displayName": "Instance member guarded by static field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations on instance fields or methods,\nwhere the guard is a <b>static</b> field. Guarding a non-static by a <b>static</b> may result in excessive lock contention,\nas access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Packaging issues",
      "inspections": [
        {
          "shortName": "ClassUnconnectedToPackage",
          "displayName": "Class independent of its package",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are neither dependent on nor depended on by other classes\nin their package. Such classes are an indication of ad-hoc or incoherent packaging strategies,\nand may often profitably be moved.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageWithTooFewClasses",
          "displayName": "Package with too few classes",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which contain too few classes. Overly small packages may indicate a fragmented design.\n<!-- tooltip end -->\n<p>\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<p>\nUse the field below to specify the minimum number of classes a package may have.\n\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionPackage",
          "displayName": "Exception package",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReport packages which contain only classes extending <b>java.lang.Throwable</b>, either directly or indirectly.\nAlthough exceptions usually don't depend on other classes for their implementation, they are normally not used separately.\nIt is often a better design to locate exceptions in the same package as the classes that use them.\n<!-- tooltip end -->\n<p>Because this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "DisjointPackage",
          "displayName": "Package with disjoint dependency graph",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages whose classes can be separated into disjoint, mutually independent\nsubsets. Such disjoint packages are a symptom of ad-hoc packaging, and may indicate a lack of\nconceptual cohesion.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageInMultipleModules",
          "displayName": "Package with classes in multiple modules",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which are present in multiple modules.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassOnlyUsedInOnePackage",
          "displayName": "Class only used from one other package",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which is only depended on and only depends on one module which\nis different from the module containing the class. Such class could be moved into\nthat module.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty directories.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection only report directories under source roots.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "PackageWithTooManyClasses",
          "displayName": "Package with too many classes",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which contain too many classes. Overly large packages may\nindicate a lack of design clarity.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of classes a package may have before triggering this inspection.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nIf a CSS ruleset contains a number of longhand properties that do not constitute a complete set then this inspection suggests transforming the properties into a shorthand form.\n<br/><br/>\nFor example, 2 properties: <code>outline-color</code> and <code>outline-style</code> may be replaced with a single <code>outline</code> one.\nHowever such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the <code>outline</code> shorthand means that <code>outline-width</code> is also set to its initial value, which is <code>medium</code>.\n<br/><br/>\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.\n</body>\n</html>"
        },
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "#HEX color representation instead of RGB color function",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects CSS colors which are defined as HEX, and provides a quickfix action to convert such values to a CSS rgb() function\ncall. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Browser compatibility for properties",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports CSS properties that are not supported by the specified browsers.\nThis inspection is based on the <a href=\"https://github.com/mdn/browser-compat-data\">MDN Compatibility Data</a>.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused CSS selector",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unused CSS classes or IDs within a file. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property value",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights CSS properties, which are being overwritten in the same ruleset block. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nIf a CSS ruleset contains a complete set of longhand properties then this inspection suggests transforming them into a shorthand form.\n<br/><br/>\nFor example, 4 properties: <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code>\nmay be safely replaced with a single <code>padding</code> property.\n<br/><br/>\nNote that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 <code>padding-xxx</code> properties in a ruleset)\nbecause switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.\n</body>\n</html>"
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "RGB color function instead of #HEX representation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects CSS colors which are defined as CSS rgb() function and provides an\nintention to convert such values to its HEX representation. <br>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "XSLT",
      "inspections": [
        {
          "shortName": "XsltVariableShadowing",
          "displayName": "Variable shadowing",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for shadowed XSLT variables which can lead to possibly undesired effects.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "XsltTemplateInvocation",
          "displayName": "Template invocation problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for problems in invocations of named XSLT templates, such as missing arguments, passing\n  arguments that are not declared by the template or passing an argument for a certain parameter more than once.\n</p>\n\n<p>\n  The inspection assumes that parameters declared with a default-value are optional and will not complain if an\n  invocation does not specify an argument for such parameters.\n</p>\n\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "XsltDeclarations",
          "displayName": "Declaration problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for various problems in declarations of XSLT variables, parameters and named templates:\n</p>\n<ul>\n  <li>Duplicate declarations</li>\n  <li>Illegal identifiers</li>\n</ul>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "XsltUnusedDeclaration",
          "displayName": "Unused variable/parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports local variables and parameters that are never used.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Spring Cloud",
      "inspections": [
        {
          "shortName": "SpringBootBootstrapConfigurationInspection",
          "displayName": "Bootstrap configuration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nChecks that <code>BootstrapConfiguration</code> is not included into Spring Boot application context via component scan,\nwhere it might not be needed.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Imports",
      "inspections": [
        {
          "shortName": "SamePackageImport",
          "displayName": "Import from same package",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which refer to the same package as the\ncontaining file. Such imports are unnecessary, and probably the result of incomplete\nrefactorings. Since IDEA can automatically detect and fix such statements with its\n\"Optimize Imports\" command, this inspection is mostly useful for off-line reporting on\ncode bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticImport",
          "displayName": "Static import",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>import static</b> statements.\nSuch <b>import</b> statements are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\nUse the table below to specify classes which when used in a <b>import static</b> statement, the statement will not be reported.\n<p>\nUse the first checkbox below to ignore single field <b>import static</b> statements.\n<p>\nUse the second checkbox below to ignore single method <b>import static</b> statements.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SingleClassImport",
          "displayName": "Single class import",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which cover single classes (as opposed to entire packages).\nSome coding standards prohibit such <b>import</b> statements. Since IDEA can automatically\ndetect and fix such statements with its \"Optimize Imports\" command, this inspection is mostly useful\nfor off-line reporting on code bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JavaLangImport",
          "displayName": "'java.lang' import",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which refer to the <b>java.lang</b> package.\nSuch import statements are unnecessary. Since IDEA can automatically\ndetect and fix such statements with its \"Optimize Imports\" command, this inspection is mostly useful\nfor off-line reporting on code bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OnDemandImport",
          "displayName": "'*' import",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which cover entire packages ('* imports').\nSome coding standards prohibit such import statements. Since IDEA can automatically\ndetect and fix such statements with its \"Optimize Imports\" command, this inspection is mostly useful\nfor off-line reporting on code bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UNUSED_IMPORT",
          "displayName": "Unused import",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports redundant import statements.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Initialization",
      "inspections": [
        {
          "shortName": "InstanceVariableUninitializedUse",
          "displayName": "Instance field used before initialization",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables which are read prior to initialization.\nEquality checks with <b>null</b> are ignored by this inspection.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report instance variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Fields annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ThisEscapedInConstructor",
          "displayName": "'this' reference escaped in object construction",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports possible escapes of <b>this</b>\nduring object construction. Escapes occur when <b>this</b>\nis used as a method argument or the object of an assignment in a constructor or\ninitializer. Such escapes may result in subtle bugs, as the object is now\navailable in a context in which it is not guaranteed to be initialized.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "NonFinalStaticVariableUsedInClassInitialization",
          "displayName": "Non-final static field is used during class initialization",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of non-<b>final</b> <b>static</b> variables during initialization\nof a class. Such uses may make the semantics of the code dependent on order of class\ncreation, may cause variables to be used before initialized, and generally cause\nextremely difficult and confusing bugs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableInitialization",
          "displayName": "Static field may not be initialized",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables which are not guaranteed to be initialized upon class initialization.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report static variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\n Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceVariableInitialization",
          "displayName": "Instance field may not be initialized",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables which are not guaranteed to be initialized upon object initialization.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report instance variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleBraceInitialization",
          "displayName": "Double brace initialization",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports <a href=\"http://www.c2.com/cgi/wiki?DoubleBraceInitialization\">Double Brace Initialization</a>.\nDouble brace initialization can cause memory leaks when used from a non-<b>static</b> context,\nbecause the anonymous <b>class</b> created will maintain a reference to the surrounding object.\nIt has worse performance than regular initialization because of the additional class loading required.\nIt can cause <b>equals()</b> comparisons to fail, if the <b>equals()</b> method does not accept subclasses as parameter (see link above).\nAnd finally, pre Java 9 it cannot be combined with the diamond operator, because that cannot be used with anonymous classes.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodCallInConstructor",
          "displayName": "Abstract method called during object construction",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls of <b>abstract</b> methods of the current class during object construction.\nA call is during object construction if it is made inside a constructor, in an non-static instance initializer,\nin a non-static field initializer or inside a <b>clone()</b>, <b>readObject()</b> or <b>readObjectNoData()</b> method.\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized\nbefore the method call occurs.\n<!-- tooltip end -->\n<p>\nThe inspections <i>Overridable method called during object construction</i>,\n<i>Overridden method called during object construction</i> and\n<i>Abstract method called during object construction</i> report overlapping problem sets and only one should be enabled at a time\nto prevent duplicate warnings.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableUninitializedUse",
          "displayName": "Static field used before initialization",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables which are read prior to initialization.\nEquality checks with <b>null</b> are ignored by this inspection.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report static variables\nused uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "OverridableMethodCallDuringObjectConstruction",
          "displayName": "Overridable method called during object construction",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to overridable methods of the current class during object construction.\nA call is during object construction if it is made inside a constructor, in an non-static instance initializer,\nin a non-static field initializer or inside a <b>clone()</b>, <b>readObject()</b> or <b>readObjectNoData()</b> method.\nMethods are overridable if they are not declared <b>final</b>, <b>static</b> or <b>private</b>.\nPackage local methods are considered safe, even though they are overridable.\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized\nbefore the method call occurs.\n<!-- tooltip end -->\n<p>\nThe inspections <i>Overridable method called during object construction</i>,\n<i>Overridden method called during object construction</i> and\n<i>Abstract method called during object construction</i> report overlapping problem sets and only one should be enabled at a time\nto prevent duplicate warnings.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverriddenMethodCallDuringObjectConstruction",
          "displayName": "Overridden method called during object construction",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to overridden methods of the current class during object construction.\nA call is made during object construction if it is performed in a constructor, in an non-static instance initializer,\nin a non-static field initializer or in a <b>clone()</b>, <b>readObject()</b> or <b>readObjectNoData()</b> method.\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized\nbefore the method call occurs.\n<!-- tooltip end -->\n<p>\nThe inspections <i>Overridable method called during object construction</i>,\n<i>Overridden method called during object construction</i> and\n<i>Abstract method called during object construction</i> report overlapping problem sets and only one should be enabled at a time\nto prevent duplicate warnings.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonThreadSafeLazyInitialization",
          "displayName": "Unsafe lazy initialization of 'static' field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables being lazily initialized\nin a non-thread-safe manner. Lazy initialization of <b>static</b> variables should be done\nin an appropriate synchronization construct, to prevent different threads from\nperforming conflicting initialization.\n<p>\nIf applicable, a quickfix is suggested\nwhich introduces the static holder pattern described in\n<a href=\"http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom\">\nhttp://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom\n</a>\nwhere the JVM guarantees the thread safety of such initializations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Gradle",
      "inspections": [
        {
          "shortName": "GradleKotlinxCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Gradle",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>kotlinx.coroutines</b> libraries dependencies in Gradle that should be updated in order\nto be compatible with Kotlin 1.3+.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java language level issues",
      "inspections": [
        {
          "shortName": "ForeachStatement",
          "displayName": "Extended 'for' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the Java 5 <b>for</b> statement syntax.\nSuch <b>for</b> statements are not supported under Java 1.4 and older.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AutoBoxing",
          "displayName": "Auto-boxing",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"auto-boxing\", i.e. the automatic wrapping of primitive values as objects, where needed.\nCode which relies on auto-boxing will not work in pre-Java 5.0 environments.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertStatement",
          "displayName": "'assert' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>assert</b> statements.\nSuch statements are not supported under Java 1.3 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnnotationClass",
          "displayName": "Annotation class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports annotation interfaces.\nSuch interfaces are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EnumClass",
          "displayName": "Enumerated class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>enum</b> classes.\nSuch statements are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "VarargParameter",
          "displayName": "Varargs method",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods taking a variable number of arguments, also known as varargs methods.\nSuch methods are not supported under Java 1.4 or earlier JVMs.\nThe quickfix of this inspection replaces a variable argument\nparameter with the equivalent array parameter. Relevant arguments in calls to\nthe method are wrapped in an array initializer expression.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AutoUnboxing",
          "displayName": "Auto-unboxing",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"auto-unboxing\", e.g. the automatic unwrapping of objects into primitive values, where needed.\nCode which relies on auto-boxing will not work in pre-Java 5.0 environments.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Annotation",
          "displayName": "Annotation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of annotations.\nAnnotations are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ForwardCompatibility",
          "displayName": "Forward compatibility",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the Java code constructs that may fail to compile in future Java versions. The following problems are reported:\n<ul>\n  <li>Use of 'assert', 'enum' or '_' as an identifier</li>\n  <li>Use of restricted keyword 'var' as a type name</li>\n  <li>Unqualified calls to method named 'yield'</li>\n  <li>Modifiers on 'requires java.base' statement inside module-info.java</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "TrailingSpacesInProperty",
          "displayName": "Trailing spaces in property",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports all properties which key or value are ending with whitespaces. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedMessageFormatParameter",
          "displayName": "Missing message format parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports properties values\nwhich looks like <b><font color=\"#000080\">java.text.MessageFormat</font></b> format strings\nbut do not use some of the parameters of <b><font color=\"#000080\">{xx}</font></b> kind.\n<p>\n  For example:\n  <code><pre>\n# parameter {0} is not used\n<b><font color=\"#000080\">error.message</font></b>=Something happened in line <b><font color=\"#000080\">{1}</font></b>\n</pre>\n  </code>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousLocalesLanguages",
          "displayName": "Suspicious resource bundle locale languages",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nInspection detects locales which contain language codes not supported by Java.\n</body>\n</html>"
        },
        {
          "shortName": "AlphaUnsortedPropertiesFile",
          "displayName": "Properties file or resource bundle is alphabetically unsorted",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on alphabetically unsorted resource bundles or properties files.\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentResourceBundle",
          "displayName": "Inconsistent resource bundle",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nReports problems in the properties files contained in the resource bundle.\n<ul>\n  <li><b>Report missing translation</b>\n  </li>\n</ul>\noption controls search for an untranslated properties. <br>\nIt reports properties contained in parent properties file that are missing in inherited (unless it's a language dialect). <br>\nE.g. having this resource bundle: <br>\n\n<b>messages.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n<b>messages_fr.properties</b> : empty <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as untranslated.\n<ul>\n  <li>\n\n    <b>Report inconsistent properties</b>\n  </li>\n</ul>\noption controls invalid resource bundle structure inspection. <br>\nIt reports properties contained in inherited properties file that are missing in parent (or in sibling if there is no parent). <br>\nE.g. having this resource bundle: <br>\n<b>messages.properties</b> : empty <br>\n<b>messages_fr.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> translation here is not available for any language except French,\nand, thus, will be reported as missing in the (default) properties file <b>messages.properties</b> .\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with the same value</b>\n  </li>\n</ul>\noption checks for properties which are copy-pasted into several properties files verbatim. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n<b>messages_fr.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as unnecessarily inherited in the file <b>messages_fr.properties</b> .\n<br>\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with different placeholders</b>\n  </li>\n</ul>\noption checks for properties which are overridden for placeholders consistency. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <br>\n<font color=\"#000080\"><b>qwe={0}xxx{1}</b></font> <br>\n<font color=\"#000080\"><b>abc={0}yyy{1}</b></font> <br>\n<b>messages_fr.properties</b> : <br>\n<font color=\"#000080\"><b>qwe={0}xxx{0}xxx{1}</b></font> <br>\n<font color=\"#000080\"><b>abc={0}yyy</b></font> <br>\n\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as property contains message format placeholders\nwith value not corresponding to <b>messages.properties</b> .\n<br>\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with different values endings</b>\n  </li>\n</ul>\noption checks for properties which are overridden for endings consistency. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <br>\n<font color=\"#000080\"><b>abc=xxxzzz</b></font> <br>\n<b>messages_fr.properties</b> : <br>\n<font color=\"#000080\"><b>abc=xxx;</b></font> <br>\n\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as property contains special signs\n( <b>'!'</b> , <b>'?'</b> , <b>'.'</b> , <b>':'</b> or <b>';'</b> ) at the end of value but\nvalue in <b>messages.properties</b> doesn't.\n<br>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedProperty",
          "displayName": "Unused property",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports all properties not referenced from outside of the properties file.\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicatePropertyInspection",
          "displayName": "Duplicate property",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicate property keys with different values, duplicate keys or duplicate property values.\nScope defines the area where inspection would search for duplicates.\n<p>\n  For example:\n  <code><pre>\nproperty1=<b><font color=\"#000080\">value</font></b>;\nproperty2=<b><font color=\"#000080\">value</font></b>;\n</pre>\n  </code>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "WrongPropertyKeyValueDelimiter",
          "displayName": "Property key/value delimiter doesn't match code style settings",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on properties in which key/value delimiter doesn't match code style settings.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring MVC",
      "inspections": [
        {
          "shortName": "MVCIncorrectMimeTypeReference",
          "displayName": "Incorrect MIME Type declaration",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks MIME Type declarations in Spring MVC annotations."
        },
        {
          "shortName": "MVCPathVariableInspection",
          "displayName": "Spring MVC @PathVariable",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks references for @PathVariable."
        },
        {
          "shortName": "SpringMVCInitBinder",
          "displayName": "Spring MVC @InitBinder",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates @InitBinder methods in Controllers."
        },
        {
          "shortName": "SpringMVCViewInspection",
          "displayName": "Spring MVC view reference",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks if Spring MVC View references are resolved correctly."
        }
      ]
    },
    {
      "name": "Java 7",
      "inspections": [
        {
          "shortName": "SafeVarargsDetector",
          "displayName": "Possible heap pollution from parameterized vararg type",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports all methods with variable arity which can be annotated as @SafeVarargs.\n  @SafeVarargs annotation suppresses unchecked warnings about parameterized array creation at call sites.\n  <p>\n  This annotation is not supported under Java 1.6 or earlier JVMs.\n</body>\n</html>"
        },
        {
          "shortName": "EqualsReplaceableByObjectsCall",
          "displayName": "'equals()' expression replaceable by 'Objects.equals()' expression",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions that can be replaced with a call to <code>java.util.Objects.equals()</code>, which is available since JDK 1.7.\nFor example:\n<p>\n  <code><pre>a == b || a != <b>null</b> && a.equals(b)</pre></code>\n<br>\n  <code><pre>a != <b>null</b> ? a.equals(b) : b == <b>null</b></pre></code>\n</p>\n<!-- tooltip end -->\n<p>\n  Replacing expressions like <code><pre>a != null && a.equals(b)</pre></code> with\n  <code><pre>Objects.equals(a, b)</pre></code> slightly changes the semantics,\n  but if that's what you need there's a check box for that in the inspection settings.\n<p>This inspection only reports if the language level of the project or module is 7 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2Diamond",
          "displayName": "Explicit type can be replaced with <>",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports all new expressions with type arguments which can be replaced with diamond type &lt;&gt;\n  <p>\n  Such <b>&lt;&gt;</b> syntax is not supported under Java 1.6 or earlier JVMs.\n</body>\n</html>\n"
        },
        {
          "shortName": "TryWithIdenticalCatches",
          "displayName": "Identical 'catch' branches in 'try' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports identical <b>catch</b> sections in a single <b>try</b> statement. Such sections can be collapsed into\na multi-catch section.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 7 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "TryFinallyCanBeTryWithResources",
          "displayName": "'try finally' replaceable with 'try' with resources",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>try finally</b> statements which can use Java 7\nAutomatic Resource Management. A quickfix is available to convert the <b>try finally</b>\nstatement into a <b>try</b> with resources statement.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 7 or higher</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "GroovyUnusedCatchParameter",
          "displayName": "Unused catch parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> parameters that are unused in their\ncorresponding blocks. This inspection will not report any <b>catch</b> parameters\nnamed \"ignore\" or \"ignored\".\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyThrowFromFinallyBlock",
          "displayName": "'throw' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>throw</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyTryBlock",
          "displayName": "Empty 'try' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>try</b> blocks.\nEmpty <b>try</b> blocks usually indicate coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyCatchBlock",
          "displayName": "Empty 'catch' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>catch</b> blocks. While occasionally intended,\nempty <b>catch</b> blocks can make debugging extremely difficult.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyFinallyBlock",
          "displayName": "Empty 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>finally</b> blocks.\nEmpty <b>finally</b> blocks usually indicate coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyReturnFromFinallyBlock",
          "displayName": "'return' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>return</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyContinueOrBreakFromFinallyBlock",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> or <b>continue</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and\ntremendously complicate debugging.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Plugin descriptor",
      "inspections": [
        {
          "shortName": "PluginXmlDynamicPlugin",
          "displayName": "Plugin.xml dynamic plugin verification",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports dynamic plugin problems.\n<p>\n  Dynamic plugins can be installed, updated and uninstalled without restarting the IDE (supported in 2020.1 and later).\n</p>\n<p>\n  Please see <a href=\"http://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/dynamic_plugins.html\">Dynamic Plugins</a> for further reference.\n</p>\n<p><small>New in 2020.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlValidity",
          "displayName": "Plugin.xml validity",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds various problems in plugin.xml.\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlCapitalization",
          "displayName": "Plugin.xml text capitalization",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights text capitalization problems in plugin.xml.\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlI18n",
          "displayName": "Plugin.xml i18n verification",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<p>This inspection finds hardcoded names or descriptions in plugin.xml.</p>\n</body>\n</html>"
        },
        {
          "shortName": "InspectionMappingConsistency",
          "displayName": "<inspection> tag consistency",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks inspection mappings consistency.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 11",
      "inspections": [
        {
          "shortName": "StringRepeatCanBeUsed",
          "displayName": "String.repeat() can be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports loops which could be replaced with single <code>String.repeat()</code> method (available since Java 11). E.g.:\n<pre>\n  for(int i=0; i&lt;count; i++) {\n    sb.append('*');\n  }\n</pre>\nSuch code could be replaced with <code>sb.append(\"*\".repeat(count));</code>\n<!-- tooltip end -->\n<p>\n  By default the inspection may wrap count expression with <code>Math.max(0, count)</code> if it cannot prove statically that count is \n  non-negative. This is done to prevent possible semantics change, as <code>String.repeat()</code> rejects negative numbers.\n  You may disable this behavior via option if you don't like it. Similarly a String to repeat could be wrapped with \n  <code>String.valueOf</code> to prevent possible <code>NullPointerException</code> if it's unknown whether it could be <code>null</code>.\n</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ReadWriteStringCanBeUsed",
          "displayName": "'Files.readString()' or 'Files.writeString()' can be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports code fragments that could be replaced via the <b>Files.readString</b> and <b>Files.writeString</b>\nmethods introduced in Java 11.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Setup",
      "inspections": [
        {
          "shortName": "SpringFacetInspection",
          "displayName": "Spring facet XML configuration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks Spring XML configuration files setup in Spring facet."
        },
        {
          "shortName": "SpringFacetCodeInspection",
          "displayName": "Spring facet code configuration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks Spring code configuration files setup in Spring facet."
        },
        {
          "shortName": "SpringFacetProgrammaticInspection",
          "displayName": "Spring facet programmatic configuration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "Checks programmatic Spring context code setup in Spring facet."
        }
      ]
    },
    {
      "name": "PSR-12",
      "inspections": [
        {
          "shortName": "PhpVarUsageInspection",
          "displayName": "Usage of var",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of the <code>var</code> keyword for declaring class properties.\n\n<p>According to PSR-12, the <code>var</code> keyword MUST NOT be used to declare a property.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#43-properties-and-constants\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpLongTypeFormInspection",
          "displayName": "Short form of type keywords",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of long form type keywords.\n<p>\n  According to PSR-12, short form of type keywords MUST be used, that is <code>bool</code> instead of <code>boolean</code>, <code>int</code> instead of <code>integer</code>, and so on.\n</p>\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#25-keywords-and-types\">Keywords and Types (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNewClassMissingParameterListInspection",
          "displayName": "Missing parameter list",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports missing parameter lists in a classes' instantiations.\n\n<p>According to the PSR-12 specification, when instantiating a new class, parentheses MUST always be present even when there are no arguments passed to the constructor.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#4-classes-properties-and-methods\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpTraitsUseListInspection",
          "displayName": "One-per-line trait uses",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the cases of several traits being imported via a single <code>use</code> statement.\n\n<p>\n  According to PSR-12, each individual trait imported into a class MUST be included one-per-line, and each inclusion MUST have its own <code>use</code> import statement.\n</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#42-using-traits\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingVisibilityInspection",
          "displayName": "Missing visibility",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports properties, constants, and methods that are declared without visibility definition.\n\n<p>According to PSR-12, visibility MUST be defined on:</p>\n<ul>\n  <li>\n    All properties,\n  </li>\n  <li>\n    All constants if your project's PHP minimum version supports constant visibilities (PHP 7.1 or later),\n  </li>\n  <li>\n    All methods.\n  </li>\n</ul>\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#43-properties-and-constants\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCompoundNamespaceDepthInspection",
          "displayName": "Compound namespace depth is more than 2",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of compound namespaces whose depth exceeds two levels.\n\n<p>According to PSR-12, compound namespaces with a depth of more than two MUST NOT be used.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#3-declare-statements-namespace-and-import-statements\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpModifierOrderInspection",
          "displayName": "Order of modifiers",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports visibility modifiers that are specified in the incorrect order.\n\n<p>According to PSR-12, the correct order is as follows:</p>\n\n<ul>\n  <li>When present, the <code>abstract</code> and <code>final</code> declarations MUST precede the visibility declaration.</li>\n\n  <li>When present, the <code>static</code> declaration MUST come after the visibility declaration.</li>\n</ul>\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#46-abstract-final-and-static\">PSR-12: Extended Coding Style (php-fig.org)</a> for\n  details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpSeparateElseIfInspection",
          "displayName": "Else if",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of the <code>else if</code> constructs specified in two words.\n\n<p>According to PSR-12, the keyword <code>elseif</code> SHOULD be used instead of <code>else if</code> so that all control keywords look like single words.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#51-if-elseif-else\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Type compatibility",
      "inspections": [
        {
          "shortName": "PhpFieldAssignmentTypeMismatchInspection",
          "displayName": "Type mismatch in property assignment",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports type violations in properties assignments\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpArithmeticTypeCheckInspection",
          "displayName": "PHP 8 TypeError on arithmetic operations",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n\nReports arithmetic and bitwise expressions with unsupported operands.\n\n<p>\n  Starting with PHP 8, using the arithmetic and bitwise operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>%</code>, <code><<</code>, <code>>></code>, <code>&</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>++</code>, <code>--</code>\n  when one of the operands is an array, resource, or non-overloaded object will result in a <code>TypeError</code>. The only exception is the\n  <code>array + array</code> merge operation, which remains supported.\n</p>\n\n<p>\n  See <a href=\"https://github.com/php/php-src/blob/master/Zend/tests/operator_unsupported_types.phpt\">PHP's internal test source</a> for the complete list of operations.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIllegalArrayKeyTypeInspection",
          "displayName": "Illegal array key type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the array keys that are of illegal type, such as objects or arrays.\n  <p>\n    See <a href=\"http://www.php.net/manual/en/language.types.array.php\">Arrays (php.net)</a> for details.\n  </p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpMissingStrictTypesDeclarationInspection",
          "displayName": "Missing strict types declaration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Detects the missing <code>declare(strict_types=1)</code> directive in the file.\n<!-- tooltip end -->\n<p>\n  See <a href=\"https://wiki.php.net/rfc/scalar_type_hints_v5\">PHP RFC: Scalar Type Declarations (php.net)</a> to learn more about why you may need use this directive.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpWrongForeachArgumentTypeInspection",
          "displayName": "Invalid argument supplied for foreach()",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>foreach</code> constructs used on variables that are not of the <code>array</code> or <code>object</code> type.\n  <p>See <a\n      href=\"http://www.php.net/manual/en/control-structures.foreach.php\">foreach (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingParamTypeInspection",
          "displayName": "Missing parameter's type declaration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the parameters that have no type declaration specified.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpRedundantTypeInUnionTypeInspection",
          "displayName": "Type declaration is redundant and could be simplified",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports union type declarations that contain redundant types, for example, a union type that contains both the class alias and the original class.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/union_types_v2#duplicate_and_redundant_types\">Union Types RFC: Duplicate and redundant types (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIncompatibleReturnTypeInspection",
          "displayName": "Incompatible return type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>return</code> statements whose return value type is not compatible with the one declared for a function/method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingFieldTypeInspection",
          "displayName": "Missing property's type declaration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the properties that have no type declaration.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpIllegalStringOffsetInspection",
          "displayName": "Illegal string offset",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of non-<code>integer</code> offsets in string access expressions such as <code>$str[42]</code>.\n<p>\n  Starting from PHP 5.4, string offsets have to be either integers or integer-like strings.\n  Since it's considered bad practice to use strings as a string offset, the inspection reports them, as well.\n</p>\n<p>See <a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.substr\">String access and modification by character (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingReturnTypeInspection",
          "displayName": "Missing return type declaration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the functions that have no return type declaration specified.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpStrictTypeCheckingInspection",
          "displayName": "Strict type checking rules violation",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports violations of the strict type checking rules.\n<!-- tooltip end -->\n<p>\n  In strict mode, only variables exactly matching the declaration types are accepted. Strict type-checking mode can be enabled:\n</p>\n<ul>\n  <li>Per file, if the <code>declare(strict_types=1)</code> directive is specified.\n    The directive must be the first statement in a file, block mode is explicitly disallowed.\n  </li>\n  <li>For all files, if the <b>Enable for all files</b> option is selected below.</li>\n</ul>\n<p>\n  See <a href=\"http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict\">Strict typing (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpParamsInspection",
          "displayName": "Parameter type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the parameters passed to a function call, whose types do not match the ones\nspecified in the function definition via type declaration or the PHPDoc <code>@param</code> tag.\n<!-- tooltip end -->\n\n<p>See <a href=\"http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration\">Type declarations (php.net)</a> and\n  <a href=\"http://docs.phpdoc.org/references/phpdoc/tags/param.html\">@param (phpdoc.org)</a> for details.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects missing comma between selectors at the end of line.\n</body>\n</html>"
        },
        {
          "shortName": "CssFloatPxLength",
          "displayName": "Float px length",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects float values of pixel lengths. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection verifies that the CSS <b>font-family</b> property contains a generic font name as a fallback alternative.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnitlessNumber",
          "displayName": "Missing measure unit",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights CSS number property values for which no units\nof measurement are specified.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused define",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for any unused named patterns (\"define\") in a RELAX-NG file (XML or Compact Syntax) and\n  highlights them as unused symbols. This is done with respect to includes from other files, i.e. a define is not\n  marked as unused if it is used through an include in another file.\n</p>\n\n<p id=\"footer\">Powered by RELAX-NG Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved references",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for any unresolved references to named patterns (\"define\") in a RELAX-NG file in XML Syntax.\n  For unresolved references, a QuickFix is offered to create a corresponding define-element.\n</p>\n\n<p id=\"footer\">Powered by RELAX-NG Support</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "ThrowCaughtLocally",
          "displayName": "'throw' caught by containing 'try' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements whose exceptions are always\ncaught by containing <b>try</b> statements. Using <b>throw</b>\nstatements as a \"goto\" to change the local flow of control is both confusing and likely to have poor performance.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadThrows",
          "displayName": "Overly broad 'throws' clause",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throws</b> clauses which contain exceptions which are more generic than the\nexceptions actually thrown by the method.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection only warn on the most generic exceptions.\n<p>\nUse the second checkbox below to ignore overly broad <b>throws</b> clauses in methods which override a library method.\n<p>\nUse the third checkbox below to ignore any exceptions which hide other exceptions, but which may be thrown from the method body and thus\nare technically not overly broad.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CheckedExceptionClass",
          "displayName": "Checked exception class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exception classes (i.e. subclasses of <b>Exception</b> which are\nnot also subclasses of <b>RuntimeException</b>). Certain coding standards require that all user-defined exception\nclasses be unchecked.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptyTryBlock",
          "displayName": "Empty 'try' block",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports empty <b>try</b> blocks.\n<!-- tooltip end -->\n<p>\nAt present, this inspection is disabled in JSP files.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NullThrown",
          "displayName": "'null' thrown",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any null literals which are used as the argument for a throw statement.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionThrown",
          "displayName": "Prohibited exception thrown",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements\nwhich throw inappropriate exceptions. One use of this inspection would be to warn of\n<b>throw</b> statements which throw overly generic exceptions\n(e.g. <b>java.lang.Exception</b> or <b>java.io.IOException</b>).\n<!-- tooltip end -->\n<p>\nUse the list below to specify which exceptions should be flagged by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UncheckedExceptionClass",
          "displayName": "Unchecked exception class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unchecked exception classes (i.e. subclasses of <b>RuntimeException</b>).\nCertain coding standards require that all user-defined exception classes be checked.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReturnFromFinallyBlock",
          "displayName": "'return' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>return</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>return</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadDeathRethrown",
          "displayName": "'java.lang.ThreadDeath' not rethrown",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>try</b> statements which catch\n<b>java.lang.ThreadDeath</b> which do not rethrow the exception.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedTryStatement",
          "displayName": "Nested 'try' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <b>try</b> statements. Nested <b>try</b> statements\nmay result in confusing code, and should probably have their <b>catch</b> and <b>finally</b> sections\nmerged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryInitCause",
          "displayName": "Unnecessary call to 'Throwable.initCause()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to <b>Throwable.initCause()</b> where the exception constructor also takes a <b>Throwable</b> cause argument.\nIn this case the <b>initCause()</b> call can be removed and its argument added to the call to the exception's constructor.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "ThrowsRuntimeException",
          "displayName": "Unchecked exception declared in 'throws' clause",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations of unchecked exceptions (RuntimeException and its subclasses) in the <b>throws</b> clause of a method.\nDeclaration of unchecked exceptions are not required and may be removed or moved to a Javadoc <b>@throws</b> tag.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadCatch",
          "displayName": "Overly broad 'catch' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> blocks which have parameters which are more generic than the\nexceptions thrown by the corresponding <b>try</b> block.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection only warn on the most generic exceptions.\n<p>\nUse the second checkbox below to ignore any exceptions which hide other exceptions, but which may be thrown and thus\nare technically not overly broad.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionCaught",
          "displayName": "Prohibited exception caught",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> clauses\nwhich catch inappropriate exceptions. Some exceptions, for instance\n<b>java.lang.NullPointerException</b> and\n<b>java.lang.IllegalMonitorStateException</b> represent programming errors\nand so should almost certainly not be caught in production code.\n<!-- tooltip end -->\n<p>\nUse the list below to specify which exceptions should be flagged by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsThrowable",
          "displayName": "Class directly extends 'java.lang.Throwable'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which directly extend <b>java.lang.Throwable</b>.\nIt is generally considered bad practice to extend <b>java.lang.Throwable</b> directly and\nit is usually enough to extend either <b>java.lang.RuntimeException</b> or <b>java.lang.Exception</b> or in special\ncases <b>java.lang.Error</b>.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionDeclared",
          "displayName": "Prohibited exception declared",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports inappropriate exceptions declared by methods. One use of this inspection would be to warn of\n<b>throws</b> clauses which declare overly generic exceptions (e.g. <b>java.lang.Exception</b> or <b>java.lang.Throwable</b>).\n<!-- tooltip end -->\n<p>\nUse the list below to specify which exceptions should be flagged by this inspection.\n<p>\nUse the checkbox below to ignore exceptions declared on methods which override a library method.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofCatchParameter",
          "displayName": "'instanceof' on 'catch' parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any <b>instanceof</b> expressions on <b>catch</b> block parameters.\nTesting the type of <b>catch</b> parameters is usually better done by having separate\n<b>catch</b> blocks, rather than <b>instanceof</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NewExceptionWithoutArguments",
          "displayName": "Exception constructor called without arguments",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports exception instance creation without any arguments specified. When an exception is constructed\nwithout arguments it contains no information about the fault that happened, which makes debugging needlessly hard.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CatchMayIgnoreException",
          "displayName": "Catch block may ignore exception",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>catch</b> blocks which are empty or may ignore exception.\nWhile occasionally intended, empty <b>catch</b> blocks can make debugging extremely difficult.\nAlso ignoring catch parameter could be wrong. Finally it will be reported if it's statically detected\nthat catch block may silently ignore important VM exceptions like <b>NullPointerException</b>. Ignoring such exception\n(without logging or rethrowing it) may hide a bug.\n<p>\n  This inspection will not report any <b>catch</b> parameters named \"ignore\" or \"ignored\".\n  Conversely this inspection will warn on any <b>catch</b> parameters named \"ignore\" or \"ignored\" that are actually used.\n  Also <b>catch</b> parameters named \"expected\" or \"ok\" are not reported inside test sources.\n</p>\n<p>\n  For empty <b>catch</b> blocks an additional fix to generate the <b>catch</b> body is suggested.\n  You can modify the \"Catch Statement Body\" template in\n  <a href=\"settings://fileTemplates\">Settings | Editor | File and Code Templates</a> (see the \"Code\" tab).\n</p>\n  <!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ThrowFromFinallyBlock",
          "displayName": "'throw' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>throw</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>throw</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptyFinallyBlock",
          "displayName": "Empty 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports empty <b>finally</b> blocks. Empty <b>finally</b> blocks\nusually indicate coding errors.\n<!-- tooltip end -->\n<p>\nAt present, this inspection is disabled in JSP files.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalFieldOfException",
          "displayName": "Non-final field of exception class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields on subclasses of\n<b>java.lang.Exception</b> which are not declared as\n<b>final</b>. Data on exception objects should not\nbe modified, as it may result in loss of error context for later debugging and\nlogging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlock",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> or <b>continue</b> statements\ninside of <b>finally</b>\nblocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and\ntremendously complicate debugging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinallyBlockCannotCompleteNormally",
          "displayName": "'finally' block which can not complete normally",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>finally</b> blocks which\ncan not complete normally.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CaughtExceptionImmediatelyRethrown",
          "displayName": "Caught exception is immediately rethrown",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any <b>catch</b> block where\nthe caught exception is immediately rethrown, without performing any action on it.\nSuch <b>catch</b> blocks are unnecessary or lack error\nhandling.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionFromCatchWhichDoesntWrap",
          "displayName": "'throw' inside 'catch' block which ignores the caught exception",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports exceptions constructed and thrown\nfrom inside <b>catch</b> blocks, which do not \"wrap\" the caught\nexception. It is considered good practice when throwing an exception in response to an exception\nto wrap the initial exception, so that valuable context information\nsuch as stack frames and line numbers are not lost.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to indicate if the inspection should ignore exceptions which\nreceive the result of a method call on the original exception, such as <b>getMessage()</b>,\nas an argument.\n<p>\nUse the second checkbox below to have this inspection ignore throw statements which throw exceptions which do not have a\nconstructor which accepts a <b>Throwable</b> cause.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ErrorRethrown",
          "displayName": "'java.lang.Error' not rethrown",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>try</b> statements which catch\n<b>java.lang.Error</b> or any subclass and which do not rethrow the error.\nStatements which catch <b>java.lang.ThreadDeath</b> are not\nreported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Reflective access",
      "inspections": [
        {
          "shortName": "Java9ReflectionClassVisibility",
          "displayName": "Reflective access across modules issues",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects reflective access to classes which aren't visible due to Java 9 module accessibility rules.\n</body>\n</html>"
        },
        {
          "shortName": "MetaAnnotationWithoutRuntimeRetention",
          "displayName": "Non-runtime annotation to be used by reflection",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Report meta annotations which are used by frameworks by reflection but their retention policy is not RUNTIME.\n  If retention policy is missed, then default retention policy 'CLASS' would be used, which means that annotations by default are not visible at runtime</p>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaLangInvokeHandleSignature",
          "displayName": "MethodHandle/VarHandle type mismatch",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects the case where the signature of a MethodHandle or the type of a VarHandle doesn't match the actual method or field.\n<p>It also checks that the arguments provided to MethodHandle.invoke(), VarHandle.set(), etc match the method signature/field type.\n  <!-- tooltip end -->\n\n<p>Examples:</p>\n<pre><code>\n  MethodHandle mh = MethodHandles.lookup().findVirtual(\n      MyClass.class, \"foo\", MethodType.methodType(void.class, int.class));\n  <i>// the argument should be an <b>int</b> value</i>\n  mh.invoke(myObj, \"<b>abc</b>\");\n</code></pre>\n<br>\n<pre><code>\n  <i>// the argument should be <b>String</b>.class</i>\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", <b>int</b>.class);\n</code></pre>\n<br>\n<pre><code>\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", String.class);\n  <i>// the argument should be a <b>String</b> value</i>\n  vh.set(myObj, <b>42</b>);\n</code></pre>\n<p>\n  <small>New in 2017.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaReflectionInvocation",
          "displayName": "Reflective invocation arguments mismatch",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThe inspection checks that the arguments provided to Method.invoke() and Constructor.newInstance()\nmatch the signature specified in Class.getMethod() and Class.getConstructor()\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\n  Method m = myObj.getClass().getMethod(\"myMethod\", <b>int</b>.class);\n  <i>// the argument should be an <b>int</b> value</i>\n  m.invoke(myObj, \"<b>abc</b>\");\n</code></pre>\n\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaReflectionMemberAccess",
          "displayName": "Reflective access to nonexistent/not visible class member",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects reflective access to fields and methods which don't exist or aren't visible.\n<!-- tooltip end -->\n<p>\n  With a 'final' class it's clear if there's a field or method with the specified name in the class.\n</p>\n<p>\n  With non-final classes it's possible that a subclass has a field or method with that name, so there could be false positives.\n  You may use the inspection settings to get rid of such false positives, everywhere or with specific classes.\n</p>\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Migration",
      "inspections": [
        {
          "shortName": "ProhibitUseSiteTargetAnnotationsOnSuperTypesMigration",
          "displayName": "Annotations on superclass are meaningless since 1.4",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n  Since Kotlin 1.4, annotations on superclass are meaningless.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantLabelMigration",
          "displayName": "Redundant labels since 1.4",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant labels.\n</body>\n</html>\n"
        },
        {
          "shortName": "WarningOnMainUnusedParameterMigration",
          "displayName": "Unused `args` on `main` since 1.4",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Since Kotlin 1.4, a main function with an unused parameter has a compiler warning <code>UNUSED_PARAMETER</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ObsoleteKotlinJsPackages",
          "displayName": "'kotlin.browser' and 'kotlin.dom' packages are deprecated since 1.4",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports usages of 'kotlin.dom' and 'kotlin.browser' packages which were moved to 'kotlinx.dom' and 'kotlinx.browser'\nrespectively in Kotlin 1.4+.\n</body>\n</html>"
        },
        {
          "shortName": "FromClosedRangeMigration",
          "displayName": "MIN_VALUE step in fromClosedRange() since 1.3",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Since Kotlin 1.3 it's prohibited to call <i>IntProgression.fromClosedRange()</i> and <i>LongProgression.fromClosedRange()</i> with\n  <i>MIN_VALUE</i> step. All such calls should be checked during migration to Kotlin 1.3+.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RestrictReturnStatementTargetMigration",
          "displayName": "Target label does not denote a function since 1.4",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n  Since Kotlin 1.4, it's forbidden to declare a target label which does not denote a function.\n</body>\n</html>\n"
        },
        {
          "shortName": "ProhibitRepeatedUseSiteTargetAnnotationsMigration",
          "displayName": "Repeatable annotation without `@Repeatable` are not allowed since 1.4",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nSince Kotlin 1.4, it's forbidden to repeat annotation without <b>@Repeatable</b> annotation and <b>SOURCE</b> retention on property accessors.\n</body>\n</html>\n"
        },
        {
          "shortName": "ProhibitJvmOverloadsOnConstructorsOfAnnotationClassesMigration",
          "displayName": "'@JvmOverloads' annotation cannot be used on constructors of annotation classes since 1.4",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n  Since Kotlin 1.4, it's forbidden to use <code>@JvmOverloads</code> on constructors of annotation classes.\n</body>\n</html>\n"
        },
        {
          "shortName": "ObsoleteExperimentalCoroutines",
          "displayName": "Experimental coroutines usages are deprecated since 1.3",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports experimental coroutines usages that are incompatible with Kotlin 1.3+ and should be updated.\n</body>\n</html>"
        },
        {
          "shortName": "ProhibitTypeParametersForLocalVariablesMigration",
          "displayName": "Local variables are not allowed to have type parameters since 1.4",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n  Since Kotlin 1.4, it's forbidden to declare a local variable with type parameters.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinDeprecation",
          "displayName": "Usage of redundant or deprecated syntax or deprecated symbols",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection is used during the code cleanup operation (<b>Analyze | Code Cleanup</b>) to automatically\nreplace usages of obsolete language features or unnecessarily verbose code constructs with\ncompact and up-to-date syntax.\n<p>\nDeprecated symbol usages are also replaced with their proposed substitutions.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Threading issues",
      "inspections": [
        {
          "shortName": "ThreadRun",
          "displayName": "Call to 'Thread.run()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to <b>run()</b> on <b>java.lang.Thread</b> or any of its subclasses.\nWhile occasionally intended, this is usually a mistake, with <b>start()</b> intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnLock",
          "displayName": "Synchronization on a Lock object",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>synchronized</b>\nblock which locks on an instance of <b>java.util.concurrent.locks.Lock</b>.\nSuch synchronization is almost certainly inadvertent, and appropriate versions of <b>.lock()</b>\nand <b>.unlock()</b> should be used instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AwaitNotInLoop",
          "displayName": "'await()' not in loop",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>java.util.concurrent.locks.Condition.await()</b> not made inside a loop.\n<b>await()</b> and related methods are normally\nused to suspend a thread until a condition is signalled as true, and that condition should be checked after the <b>await()</b>\nreturns. A loop is the clearest way to achieve this.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitOrAwaitWithoutTimeout",
          "displayName": "'wait()' or 'await()' without timeout",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Object.wait()</b> or <b>Condition.await()</b> which\ndoes not specify a timeout. Such calls may be dangerous in high-availability programs, as failures in one\ncomponent may result in blockages of the waiting component,\nif <b>notify()</b>/<b>notifyAll()</b>\nor <b>signal()</b>/<b>signalAll()</b> never\nget called.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsThread",
          "displayName": "Class directly extends 'java.lang.Thread'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which directly extend <b>java.lang.Thread</b>.\nIt is usually thought better practice to delegate to rather than extend\n<b>java.lang.Thread</b>, so that a thread creator may exert better\ncontrol over the thread's behavior, and to better localize all concurrency related operations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NakedNotify",
          "displayName": "'notify()' or 'notifyAll()' without corresponding state change",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.notify()</b> or\n<b>.notifyAll()</b> being called without any detectable state change occurring.\nNormally, <b>.notify()</b> and <b>.notifyAll()</b> are\nused to inform other threads that a state change has occurred. That state change should occur in a synchronized\ncontext that contains the <b>.notify()</b> or\n<b>.notifyAll()</b> call, and prior to the call. While not having such a state change\nisn't necessarily incorrect, it is certainly worth examining.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SafeLock",
          "displayName": "Lock acquired but not safely unlocked",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>java.util.concurrent.locks.Lock</b> resource which is not acquired in front of a\n<b>try</b> block and unlocked in the corresponding <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptySynchronizedStatement",
          "displayName": "Empty 'synchronized' statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements\nhaving empty bodies. While theoretically this may be the semantics intended, this construction is\nconfusing, and often the result of a typo.\n<!-- tooltip end -->\n<p>\nAt present, this inspection is disabled in JSP files.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AwaitWithoutCorrespondingSignal",
          "displayName": "'await()' without corresponding 'signal()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Condition.signal()</b>\nor <b>Condition.signalAll()</b>\nfor which no call to a corresponding <b>Condition.await()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CallToNativeMethodWhileLocked",
          "displayName": "Call to a native method while locked",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any to methods declared <b>native</b> while in\na synchronized block or method. While not necessarily representing a problem, such calls cause\nan expensive context switch, and are best kept out of synchronized contexts, if possible.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadLocalNotStaticFinal",
          "displayName": "ThreadLocal field not declared static final",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields of type <b>java.lang.ThreadLocal</b> which are not declared <b>static final</b>.\nIn the most common case a <b>java.lang.ThreadLocal</b> instance\nassociates state with a thread. A non-static non-final\n<b>java.lang.ThreadLocal</b> field associates state with\nan instance-thread combination. This is seldom necessary and often a bug\nwhich can cause memory leaks and possibly incorrect behavior.\n<!-- tooltip end -->\n<p>\nThis inspection has a quick fix to make the field <b>static final</b>\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticInitializerReferencesSubClass",
          "displayName": "Static initializer references subclass",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports classes that refer to their own subclasses in their static initializers or in static fields.\nSuch references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load superclass\nand another thread tries to load subclass at the same time.\n</body>\n</html>"
        },
        {
          "shortName": "NonAtomicOperationOnVolatileField",
          "displayName": "Non-atomic operation on volatile field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any non-atomic operations on <b>volatile</b> fields. Non-atomic\noperations on <b>volatile</b> fields are operations where the field is read and\nthe value is used to update the field. It is possible for the value of the\nfield to change between the read and the write, possibly invalidating the operation.\nThe non-atomic operation can be avoided by surrounding it with a synchronized block or\nby making use of one of the classes from the <b>java.util.concurrent.atomic</b> package.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AtomicFieldUpdaterIssues",
          "displayName": "AtomicFieldUpdater issues",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports issues on fields of type <b>java.util.concurrent.atomic.AtomicLongFieldUpdater</b>,\n<b>java.util.concurrent.atomic.AtomicIntegerFieldUpdater</b> or <b>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</b>.\nThe issues reported are identical to the runtime problems that can happen with atomic field updaters:\nspecified field not found, specified field not accessible, specified field of the wrong type, etc.\n\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "SleepWhileHoldingLock",
          "displayName": "Call to 'Thread.sleep()' while synchronized",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Thread.sleep()</b> that occur while\nwithin a <b>synchronized</b> block or method. Sleeping\nwhile synchronized may result in decreased performance, poor scalability, and possibly\neven deadlocking. Consider using <b>wait</b> instead,\nas it will release the lock held.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizedMethod",
          "displayName": "'synchronized' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports use of the <b>synchronized</b> modifier on methods.\nThere are several reasons a <b>synchronized</b> modifier on a method may be a bad idea:\nFirst, as a rule as little work as possible should be performed under a lock.\nTherefore it is often better to use a <b>synchronized</b> statement and move as much of the methods code outside the\n<b>synchronized</b> region.\nSecond, it makes synchronization part of the external interface of the class.\nThis makes a future change to a different locking mechanism difficult.\nThird, it makes it hard to track just who is locking on a given object.\nAnd fourth, it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.\n\n<p>\nAs an alternative, consider\nsynchronizing on a <b>private final</b> lock object, access to which can be completely controlled.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides synchronized method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports non-<b>synchronized</b>\nmethods overriding <b>synchronized</b> methods.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SignalWithoutCorrespondingAwait",
          "displayName": "'signal()' without corresponding 'await()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Condition.signal()</b>\nor <b>Condition.signalAll()</b>\nfor which no call to a corresponding <b>Condition.await()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in synchronized context",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports non-final, non-private fields which are accessed in a synchronized context.\nA non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\naccess may result in unexpectedly inconsistent data structures.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnNonFinalField",
          "displayName": "Synchronization on a non-final field",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements where the lock expression\nis a reference to a non-<b>final</b> field. Such statements are unlikely to have useful semantics, as different\nthreads may be locking on different objects even when operating on the same object.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AccessToNonThreadSafeStaticFieldFromInstance",
          "displayName": "Non-thread-safe static field access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports access to <b>static</b> fields that are of a non-thread-safe type.\nWhen this access is from an instance field or a non-synchronized block,\nit is possible that the static field is accessed from multiple threads.\nThis can lead to unspecified side effects, like exceptions and incorrect results.\n<!-- tooltip end -->\n<p>\nUse the table below to specify which types are not thread-safe.\nOnly fields with these exact types or initialized with these exact types are reported,\nbecause there may exist thread-safe subclasses of these types.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitWithoutCorrespondingNotify",
          "displayName": "'wait()' without corresponding 'notify()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Object.wait()</b>\nfor which no call to a corresponding <b>Object.notify()</b> or\n<b>Object.notifyAll()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnconditionalWait",
          "displayName": "Unconditional 'wait()' call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.wait()</b>\nbeing called unconditionally within a synchronized context.\nNormally, <b>.wait()</b> is\nused to block a thread until some condition is true. If <b>.wait()</b>\nis called unconditionally, that often indicates that the condition was checked before a lock was\nacquired. In that case a data race may occur, with the condition becoming true between the time\nit was checked and the time the lock was acquired. While constructs found by this inspection\nare not necessarily incorrect, they are certainly worth examining.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitWhileHoldingTwoLocks",
          "displayName": "'wait()' while holding two locks",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>.wait()</b>\nbeing called while the current thread is holding two locks. Since the call to <b>.wait()</b>\nonly frees locks on the its target, waiting with two locks held can easily lead to deadlock.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BusyWait",
          "displayName": "Busy wait",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Thread.sleep()</b> that occur inside loops. Such calls\nare indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\nas busy-waiting threads do not release locked resources.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectNotify",
          "displayName": "Call to 'notify()' instead of 'notifyAll()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to <b>notify()</b>. While occasionally useful, in almost all cases\n<b>notifyAll()</b> is a better choice. See Doug Lea's <I>Concurrent Programming in Java</I> for a discussion.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "VolatileArrayField",
          "displayName": "Volatile array field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports array fields\nwhich are declared as <b>volatile</b>. Such fields\nmay be confusing, as accessing the array itself follows the rules for <b>volatile</b>\nfields, but accessing the array's contents does not. If such volatile access is needed to array contents,\nthe JDK5.0 <b>java.util.concurrent.atomic</b> classes should be used instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the double-checked locking construct. For a\ndiscussion of double-checked locking and why it is unsafe, see\n<a href = \"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore double-checked locking on <b>volatile</b> fields. Using\na <b>volatile</b> field for double-checked locking works correctly on virtual machines which\nimplement the Java Memory Model.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionSignal",
          "displayName": "Call to 'signal()' instead of 'signalAll()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>java.util.concurrent.locks.signal()</b>. While occasionally useful, in almost all cases\n<b>signalAll()</b> is a better and safer choice.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AccessToStaticFieldLockedOnInstance",
          "displayName": "Access to static field locked on instance data",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any access to a non-constant <b>static</b> field which is\nlocked on either <b>this</b> or an instance field of <b>this</b>.\nLocking a <b>static</b> field on instance data does not prevent the field from being\nmodified by other instances, and thus may result in surprising race conditions.\n<!-- tooltip end -->\n<p>\nUse the table below to specify classes to ignore. Any static fields of the types specified will be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NotifyWithoutCorrespondingWait",
          "displayName": "'notify()' without corresponding 'wait()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Object.notify()</b>\nor <b>Object.notifyAll()</b>\nfor which no call to a corresponding <b>Object.wait()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitNotInLoop",
          "displayName": "'wait()' not in loop",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any call to <b>wait()</b> not made inside a loop. <b>wait()</b> is normally\nused to suspend a thread until a condition is true, and that condition should be checked after the <b>wait()</b>\nreturns. A loop is the clearest way to achieve this.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitCalledOnCondition",
          "displayName": "'wait()' called on 'java.util.concurrent.locks.Condition' object",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>wait()</b>\nmade on a <b>java.util.concurrent.locks.Condition</b>\nobject. This is probably a programming error, and some variant of the\n<b>await()</b> method was intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizationOnGetClass",
          "displayName": "Synchronization on 'getClass()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports synchronization on a call to <b>getClass()</b>.\nIf the class containing the synchronization is subclassed, the subclass will synchronize on a different class object.\nUsually the call to <b>getClass()</b> can be replaced with a class literal expression, for example <b>String.class</b>.\nAn even better solution is synchronizing on a <b>private static final</b> lock object, access to which can be completely controlled.\n<!-- tooltip end -->\n<p>\n<small>New in 2016.2</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "NotifyCalledOnCondition",
          "displayName": "'notify()' or 'notifyAll()' called on 'java.util.concurrent.locks.Condition' object",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>notify()</b>\nor <b>notifyAll()</b> on an object\nof class <b>java.util.concurrent.locks.Condition()</b>.\nIt is almost certain that <b>signal()</b> or\n<b>signalAll()</b> was intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SharedThreadLocalRandom",
          "displayName": "'ThreadLocalRandom' instance might be shared",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>java.util.concurrent.ThreadLocalRandom</b> instances which might be shared between threads.\nA <b>ThreadLocalRandom</b> might be shared between threads and is reported when it is assigned to a field,\nused as a method argument or assigned to a local variable and used in anonymous or nested classes.\nA <b>ThreadLocalRandom</b> should not be shared between threads because that is not thread-safe.\n<p>\nUsages of <b>ThreadLocalRandom</b> should typically look like <b>ThreadLocalRandom.current().nextInt(...)</b>\n(or <b>nextDouble(...)</b> etc.).\nWhen all usages are in this form, <b>ThreadLocalRandom</b> instances can not be used accidentally by multiple threads.\n<!-- tooltip end -->\n<p>\nUse the table below to specify methods that are safe to pass a <b>ThreadLocalRandom</b> to, as an argument.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ThreadYield",
          "displayName": "Call to 'Thread.yield()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Thread.yield()</b>.\n<b>Thread.yield()</b> has no useful guaranteed semantics,\nand is often used by inexperienced programmers to mask race conditions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizationOnLocalVariableOrMethodParameter",
          "displayName": "Synchronization on local variable or method parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports synchronization on a local variable or parameter.\nIt is very difficult to guarantee correctness when such synchronization is used.\nIt may be possible to improve code like this by controlling access through e.g. a synchronized wrapper class,\nor by synchronizing on a field.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "AtomicFieldUpdaterNotStaticFinal",
          "displayName": "AtomicFieldUpdater field not declared 'static final'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports fields of type <b>java.util.concurrent.atomic.AtomicLongFieldUpdater</b>,\n<b>java.util.concurrent.atomic.AtomicIntegerFieldUpdater</b> or <b>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</b>\nthat are not <b>static final</b>. Because only one atomic field updater is needed for updating a <b>volatile</b> field in all instances\nof a class, it can almost always be <b>static</b>.\nMaking the updater <b>final</b>, allows the JVM to optimize access for improved performance.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "MethodMayBeSynchronized",
          "displayName": "Method with synchronized block could be synchronized method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods of which the body is contained in a single\n<b>synchronized</b> statement. The lock expression\nfor this <b>synchronized</b> statement must be\nequal to <b>this</b> for instance methods\nor ClassName.<b>class</b> for static methods. In\nsuch cases the synchronized statements may be replaced by their contents and the\ncontaining method marked <b>synchronized</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitNotifyNotInSynchronizedContext",
          "displayName": "'wait()' or 'notify()' while not synchronized",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>wait()</b>, <b>notify()</b> or <b>notifyAll()</b> not made inside a corresponding synchronized\nstatement or synchronized method. Calling <b>wait()</b>, <b>notify()</b> or <b>notifyAll()</b> on an object\nwithout holding a lock on that object will result in an <b>IllegalMonitorStateException</b> being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but its worth looking at.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WhileLoopSpinsOnField",
          "displayName": "'while' loop spins on field",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on <b>while</b> loops which spin on the\nvalue of a non-volatile field, waiting for it to be changed by another thread.\n<p>\nIn addition to being potentially extremely CPU intensive when little work is done inside the loop, such\nloops are likely have different semantics than intended, as the Java Memory Model allows such field accesses\nto be hoisted out of the loop, causing the loop to never complete even if another thread does change the\nfield's value.\n</p>\n<p>\n  Additionally since Java 9 it's recommended to call <code>Thread.onSpinWait()</code> inside spin loop\n  on a volatile field which may significantly improve performance on some hardware.\n</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemRunFinalizersOnExit",
          "displayName": "Call to 'System.runFinalizersOnExit()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>System.runFinalizersOnExit()</b>.\nThis call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\nmay result in data corruption, deadlock, and may affect parts of the program far removed from its call point.\nIt is deprecated, and its use strongly discouraged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedSynchronizedStatement",
          "displayName": "Nested 'synchronized' statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports nested <b>synchronized</b> statements. Nested <b>synchronized</b> statements\nare either redundant (if the lock objects are identical) or prone to deadlock.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadWithDefaultRunMethod",
          "displayName": "Instantiating a Thread with default 'run()' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports Thread instances being created without specifying\na Runnable parameter or overriding the run() method. Such threads do nothing\nuseful.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizationOnStaticField",
          "displayName": "Synchronization on 'static' field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization on static fields. While not strictly incorrect,\nsynchronization on static fields can lead to bad performance because of contention.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ThreadStopSuspendResume",
          "displayName": "Call to 'Thread.stop()', 'suspend()' or 'resume()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Thread.stop()</b>,\n<b>Thread.suspend()</b>, or <b>Thread.resume()</b>.\nThese calls are inherently prone to data corruption and deadlock, and their use is strongly\ndiscouraged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadPriority",
          "displayName": "Call to 'Thread.setPriority()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Thread.setPriority()</b>.\nModifying priorities of threads is an inherently non-portable operation, as no guarantees\nare given in the Java specification of how priorities are used in scheduling threads, or even\nif they are used at all.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldAccessedSynchronizedAndUnsynchronized",
          "displayName": "Field accessed in both synchronized and unsynchronized contexts",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports non-final fields which are accessed in both synchronized and\nunsynchronized contexts. Volatile fields and accesses in constructors and initializers are ignored by this\ninspection. Such \"partially synchronized\" access is often the result of a coding oversight, and may\nresult in unexpectedly inconsistent data structures.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to specify if simple getters and setters are counted as accesses too.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadStartInConstruction",
          "displayName": "Call to 'Thread.start()' during object construction",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to <b>start()</b> on <b>java.lang.Thread</b>\nor any of its subclasses during object construction. While occasionally useful, this construct should be avoided due\nto inheritance issues. Subclasses of a class which launches a thread during object construction will not have finished\nany initialization logic of their own before the thread has launched.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnThis",
          "displayName": "Synchronization on 'this'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports synchronization on <b>this</b> or <b>class</b> expressions.\nConstructs reported include <b>synchronized</b> blocks, and calls to <b>wait()</b>,\n<b>notify()</b> or <b>notifyAll()</b>.\n<p>\nThere are several reasons synchronization on this or class expressions may be a bad idea:\nFirst, it makes synchronization part of the external interface of the class.\nThis makes a future change to a different locking mechanism difficult.\nSecond, it makes it hard to track just who is locking on a given object.\nAnd third , it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.\n\n<p>As an alternative, consider\nsynchronizing on a <b>private final</b> lock object, access to which can be completely controlled.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizedOnLiteralObject",
          "displayName": "Synchronization on an object initialized with a literal",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>synchronized</b>\nblock which locks on an object which is initialized with a literal.\nString literals are interned and Character, Boolean and Number literals can be allocated from a cache.\nBecause of this, it is possible that some other part of the system\nwhich uses an object initialized with the same literal, is actually holding a\nreference to the exact same object. This can create unexpected dead-lock situations,\nif the lock object was thought to be private.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to warn on any synchronization on String, Character, Boolean and Number objects.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that JSON5 files conform to language specification (http://json5.org/).<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved '$ref' and '$schema' references",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that '$ref' and '$schema' paths are valid<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that JSON files conform to JSON Schemas assigned to them<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that object literals don't contain duplicate keys.<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for deprecated properties in JSON files<br>\nNote that deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard extension 'deprecationMessage'.\n</body>\n</html>"
        },
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that JSON files conform to language specification (RFC-7159).<br>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "PropertyName",
          "displayName": "Property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "EnumEntryName",
          "displayName": "Enum entry naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports enum entry names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "PrivatePropertyName",
          "displayName": "Private property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports private property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "ConstPropertyName",
          "displayName": "Const property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>const</b> property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "PackageName",
          "displayName": "Package naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports package names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "TestFunctionName",
          "displayName": "Test function naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports test function names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "FunctionName",
          "displayName": "Function naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports function names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "ClassName",
          "displayName": "Class naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports class names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "ObjectPropertyName",
          "displayName": "Object property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports names of properties in objects and companion objects, as well as top-level properties, that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableName",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports local variable names that do not follow the recommended naming conventions.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Batch",
      "inspections": [
        {
          "shortName": "SpringBatchModel",
          "displayName": "Spring Batch model",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring Batch Model Inspection."
        }
      ]
    },
    {
      "name": "JPA",
      "inspections": [
        {
          "shortName": "JpaObjectClassSignatureInspection",
          "displayName": "Persistent object class signature checks",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Persistent object class should be a top-level, not final, annotated once</li>\n<li>Class should not be defined as persistent and entity listener class at the same time</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaConfigDomFacetInspection",
          "displayName": "Persistence.xml is not added to facet",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you add persistence.xml to a facet configuration if it is not there\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaDomInspection",
          "displayName": "persistence.xml problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Persistence Units configuration:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaEntityListenerInspection",
          "displayName": "Entity listener problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Entity listener class should define public no-arg constructor</li>\n<li>Entity listener methods should have correct signature</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaORMDomInspection",
          "displayName": "Orm.xml problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in ORM XML descriptors:\n\n<li>Tag and attribute values that reference to missing database tables and columns\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaAttributeTypeInspection",
          "displayName": "Persistent attribute type checks",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Attribute types checking (collection, entity, embeddable, etc.)</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaEntityListenerWarningsInspection",
          "displayName": "Entity listener warnings",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification warnings:\n<li>Entity listener class has no \"entity listener\" methods</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaQlInspection",
          "displayName": "Query language checks",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection controls whether the Persistence QL Queries are error-checked\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaQueryApiInspection",
          "displayName": "Unresolved queries and query parameters",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<!--\n  ~ Copyright (c) 2000-2007 JetBrains s.r.o. All Rights Reserved.\n  -->\n\n<html>\n<body>\nThis inspection checks for the following Persistence model problems:\n<li>Named query not found</li>\n<li>Query parameter not found</li>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaMissingIdInspection",
          "displayName": "Persistent entity misses primary key",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nCheck whether persistent object has identification property\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaDataSourceORMInspection",
          "displayName": "Unresolved database references in annotations",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection controls whether the Persistence ORM annotations are checked against configured Datasources\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaDataSourceORMDomInspection",
          "displayName": "Unresolved database references in XML",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection controls whether the Persistence ORM descriptors are checked against configured Datasources\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaAttributeMemberSignatureInspection",
          "displayName": "Persistent attribute signature checks",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>More than one attribute configured for method/field</li>\n<li>Attribute cannot be used in Embeddable object (JPA 1.0)</li>\n<li>Persistent attribute metadata should be specified on field or property getter</li>\n<li>For property-based access both setter and getter should be present</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaModelReferenceInspection",
          "displayName": "Unresolved references in queries",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Attribute references specified via JPA annotations should resolve OK</li>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Hibernate",
      "inspections": [
        {
          "shortName": "CriteriaApiResolveInspection",
          "displayName": "Hibernate Criteria API unrecognized property problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection lets you spot the unrecognized property problems that might occur in Hibernate Criteria API usage\n</body>\n</html>"
        },
        {
          "shortName": "HibernateConfigDomInspection",
          "displayName": "Hibernate XML configuration problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Hibernate configuration:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        },
        {
          "shortName": "HibernateMappingDomInspection",
          "displayName": "Hibernate XML mappings problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Hibernate mappings:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        },
        {
          "shortName": "HibernateMappingDatasourceDomInspection",
          "displayName": "Hibernate DB-related XML mappings problems",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Hibernate mappings:\n\n<li>References to unrecognized catalogs/schemas/tables\n<li>References to unrecognized columns\n\n</body>\n</html>"
        },
        {
          "shortName": "HibernateConfigDomFacetInspection",
          "displayName": "Hibernate configuration XML is not added to facet problem",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you add hibernate configuration file to a facet configuration if it is not there\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "FreeMarker",
      "inspections": [
        {
          "shortName": "FtlCallsInspection",
          "displayName": "Calls inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck macro and function call parameter matching\n</body>\n</html>"
        },
        {
          "shortName": "FtlReferencesInspection",
          "displayName": "References inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker references are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "FtlTypesInspection",
          "displayName": "Types inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker expression types are consistent\n</body>\n</html>"
        },
        {
          "shortName": "FtlFileReferencesInspection",
          "displayName": "File references inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker file references (in #include and #import directives) are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "FtlDeprecatedBuiltInsInspection",
          "displayName": "Deprecated built-ins inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports deprecated built-ins (default, exists, if_exists, web_safe) usages\n</body>\n</html>"
        },
        {
          "shortName": "FtlImportCallInspection",
          "displayName": "Import calls inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nSuggest quick fixes to #import/#include files containing referenced #macro/#function\n</body>\n</html>"
        },
        {
          "shortName": "FtlWellformednessInspection",
          "displayName": "Wellformedness inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker directives are well-formed, have appropriate nesting and closing tags if necessary\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Class metrics",
      "inspections": [
        {
          "shortName": "ClassComplexity",
          "displayName": "Overly complex class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes with too high of a total complexity. The\ntotal complexity of a <b>class</b> is the sum of the cyclomatic complexities of all the methods\nand initializers the <b>class</b> declares. Inherited methods and initializers are not counted\ntoward the total complexity.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum complexity a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodCount",
          "displayName": "Class with too many methods",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes with too many methods. Classes with\na large number of methods are often trying to 'do too much', and may need to be\nrefactored into multiple smaller classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of methods a class is allowed to have.\n<p>\nUse the first checkbox below to ignore simple getters and setters in the method count.\n<p>\nUse the second checkbox below to ignore methods overriding or implementing a method from a superclass\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNestingDepth",
          "displayName": "Inner class too deeply nested",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports inner classes too deeply nested. Nesting inner classes inside\ninner classes is almost certain to be confusing, and is a good sign that refactoring may be necessary.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum nesting depth a class is allowed have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassInheritanceDepth",
          "displayName": "Class too deep in inheritance tree",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports class too deep in the inheritance hierarchy. Classes too deeply inherited\nmay be confusing, and are a good sign that refactoring may be necessary. This inspection counts all superclasses\nfrom a library as a single superclass (libraries are considered unmodifiable).\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum inheritance depth a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassMethodCount",
          "displayName": "Anonymous inner class with too many methods",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous inner <b>class</b> with too many methods.\nAnonymous classes with more than a very low number of methods may be\ndifficult to understand, and should probably be promoted to become named inner classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of methods an anonymous inner <b>class</b> is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstructorCount",
          "displayName": "Class with too many constructors",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports class with too many constructors. Classes with\ntoo many constructors are prone to initialization errors, and may often be better modeled as\nmultiple subclasses.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of constructors a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldCount",
          "displayName": "Class with too many fields",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes with too many fields. Classes with\na large number of fields are often trying to 'do too much', and may need to be\nrefactored into multiple smaller classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of fields a class is allowed to have.\n<p>\nUse the first checkbox below to indicate whether constant fields count toward this number.\n<p>Per default this inspection only counts immutable <b>static final</b> objects as constant. Use the second checkbox below to\ncount any <b>static final</b> field as constant.\n<p>\nUse the third checkbox below to indicate if enum constants in an enum class should count.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassCoupling",
          "displayName": "Overly coupled class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which are highly coupled, i.e. that reference too many other classes.\nClasses with too high a coupling can be very fragile, and should probably be broken up. References to system classes\n(those in the <b>java.</b>or <b>javax.</b> packages), are not counted.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum coupling a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassComplexity",
          "displayName": "Overly complex anonymous class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous inner classes with too high of a total complexity. The\ntotal complexity of a class is the sum of the cyclomatic complexities of all the methods\nand initializers the class declares. Inherited methods and initializers are not counted\ntoward the total complexity. Anonymous classes with more than very low complexities may be\ndifficult to understand, and should probably be promoted to become named inner classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum complexity a class is allowed to have.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Kotlin",
      "inspections": [
        {
          "shortName": "DeprecatedGradleDependency",
          "displayName": "Deprecated library is used in Gradle",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports that some deprecated dependency is used in Gradle.\n</body>\n</html>"
        },
        {
          "shortName": "DifferentMavenStdlibVersion",
          "displayName": "Library and maven plugin versions are different",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports different kotlin stdlib and compiler versions that could lead to unpredictable issues\n</body>\n</html>"
        },
        {
          "shortName": "DifferentKotlinGradleVersion",
          "displayName": "Kotlin Gradle and IDE plugins versions are different",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports that different IDE and Gradle plugin versions are used.\nThis can cause inconsistencies between IDE and Gradle builds in error reporting or code behaviour.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedMavenDependency",
          "displayName": "Deprecated library is used in Maven",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports that some deprecated dependency is used in Maven.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinMavenPluginPhase",
          "displayName": "Kotlin Maven Plugin misconfigured",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Reports kotlin-maven-plugin configuration issues"
        },
        {
          "shortName": "DifferentKotlinMavenVersion",
          "displayName": "Maven and IDE plugins versions are different",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports different IDE and Maven plugin versions are used.\nThis can cause inconsistencies between IDE and Maven build in error reporting or code behaviour.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinInvalidBundleOrProperty",
          "displayName": "Invalid property key",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unresolved references to .properties file keys and resource bundles in Kotlin files.\n</body>\n</html>\n"
        },
        {
          "shortName": "DifferentStdlibGradleVersion",
          "displayName": "Kotlin library and Gradle plugin versions are different",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports different kotlin stdlib and compiler versions that could lead to unpredictable issues.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinTestJUnit",
          "displayName": "kotlin-test-junit could be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nIf you have kotlin-test and junit dependency\nthen most likely you better to include kotlin-test-junit instead of just kotlin-test\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "SwitchStatement",
          "displayName": "'switch' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements.\n<b>switch</b> statements are often (but not always) indicators of poor object-oriented design.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBooleanExpression",
          "displayName": "Pointless boolean expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports pointless or pointlessly\ncomplicated boolean expressions. Such expressions include <b>and</b>ing with <b>true</b>,\n<b>or</b>ing with <b>false</b>,\nequality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore named constants when determining if an expression is pointless.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DefaultNotLastCaseInSwitch",
          "displayName": "'default' not last case in 'switch' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements where the <b>default</b> case\ncomes before some other case. This construct is unnecessarily confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementWithIdenticalBranches",
          "displayName": "'if' statement with common parts",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nInspection that can extract common parts from branches of if statement.\n<!-- tooltip end -->\n<p>Before:</p>\n<pre><code>\n  if (x > 12) {\n    doSomethingBefore();\n    doSomethingDifferent1();\n    doSomethingAfter();\n  } else {\n    doSomethingBefore();\n    doSomethingDifferent2();\n    doSomethingAfter();\n  }\n</code></pre>\n<p>After:</p>\n<pre><code>\n  doSomethingBefore();\n  if (x > 12) {\n    doSomethingDifferent1();\n  } else {\n    doSomethingDifferent2();\n  }\n  doSomethingAfter();\n</code></pre>\n<p><small>Updated in 2018.1</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "LoopConditionNotUpdatedInsideLoop",
          "displayName": "Loop variable not updated inside loop",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variables and parameters which are used in a loop condition\nand are not updated inside the loop. These may cause an infinite loop if executed and\nare probably not what was intended.\n<!-- tooltip end -->\n<p>\n  The option \"Ignore possible non-local changes\" suppresses warnings if condition can be updated indirectly (via called method\n  or concurrently from another thread).\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithTooManyBranches",
          "displayName": "'switch' statement with too many branches",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements with too many <b>case</b> labels.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of <b>case</b> labels expected.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementWithTooManyBranches",
          "displayName": "'if' statement with too many branches",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements with too many branches.\nSuch statements may be confusing, and are often the sign of inadequate levels of design\nabstraction.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of branches an <b>if</b> statement is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BreakStatementWithLabel",
          "displayName": "'break' statement with label",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements with labels.\nLabeled <b>break</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertionCanBeIf",
          "displayName": "Assertion can be replaced with if statement",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>assert</b> statements.\nFor example, <br>\n<code><b>assert</b> param != <b>null</b>;</code>\n<p>Quick fix replaces it with\n<b>if</b> statement throwing an <b>java.lang.AssertionError</b>.\n<p>Example:<br>\n<code>if (param == <b>null</b>) <b>throw new</b> AssertionError();</code>\n</body>\n</html>\n"
        },
        {
          "shortName": "SwitchStatementsWithoutDefault",
          "displayName": "'switch' statement without 'default' branch",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements that do not contain\n<b>default</b> labels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ContinueStatement",
          "displayName": "'continue' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements.\n<b>continue</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IdempotentLoopBody",
          "displayName": "Idempotent loop body",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nDetects loops whose second and the subsequent iterations do not produce any additional side effects other than produced by the first iteration,\nwhich could indicate a programming error. Such loops may iterate only zero, one or infinite number of times.\nIf infinite number of times case is unreachable, such loop could be replaced with <b>if</b> statement. Otherwise there's a danger that\nthe program could stuck. Example:\n<pre>\n  int suffix = 1;\n  String name = baseName;\n  while(names.contains(name)) {\n    name = baseName + suffix; // error: suffix is not updated making loop body idempotent\n  }\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementDensity",
          "displayName": "'switch' statement with too low of a branch density",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements\nwith too low a ratio of switch labels to executable statements. Such <b>switch</b> statements\nmay be confusing, and should probably be refactored.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithConfusingDeclaration",
          "displayName": "Local variable used and declared in different 'switch' branches",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables declared in one branch of a <b>switch</b> statement\nand used in a different branch. Such declarations can be extremely confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithTooFewBranches",
          "displayName": "'switch' statement with too few branches",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements with too few <b>case</b> labels.\nSuch statements may be more clearly expressed as <b>if</b> statements.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the minimum number of <b>case</b> labels expected.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TrivialIf",
          "displayName": "Redundant 'if' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements which can be simplified to a single assignment,\n<b>return</b> or <b>assert</b> statement.\n<p>\nFor example:\n<pre><code>\n    <b>if</b> (foo()) {\n       <b>return true</b>;\n    } <b>else</b> {\n       <b>return false</b>;\n    }\n</code></pre>\ncan be simplified to\n<pre><code>\n    <b>return</b> foo();\n</code></pre>\n<!-- tooltip end -->\n<p>Use the option below to not display a warning in case of chained if statement. E.g.:\n</p>\n<pre><code>\n    if (condition1) return true;\n    if (condition2) return false;\n    return true;\n</code></pre>\n<p>\n  The fix action will still be available in this case.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NegatedEqualityExpression",
          "displayName": "Negated equality expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports equality expressions which are negated by a prefix expression. For example:\n<pre><code>!(i == 1)</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "BreakStatement",
          "displayName": "'break' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements,\nother than at the end of a <b>switch</b> statement branch.\n<b>break</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantConditionalExpression",
          "displayName": "Constant conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions of the form\n<b>true?<i>result1</i>:<i>result2</i></b> or <b>false?<i>result1</i>:<i>result2</i></b>.\nThese expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanExpressionMayBeConditional",
          "displayName": "Boolean expression could be replaced with conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>boolean</b> expressions which can be expressed more compactly, and arguably more clearly, as a conditional expression.\nTake for example the following expression:\n<pre>a && b || !a && c;</pre>\nwhich may be expressed as:\n<pre>a ? b : c;</pre>\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "LoopWithImplicitTerminationCondition",
          "displayName": "Loop with implicit termination condition",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>while</b>,\n<b>do-while</b> and <b>for</b>\nloops which have the constant <b>true</b> as their\nonly condition, but which still can be terminated by a containing\n<b>if</b> statement which can break out of the loop.\nThis <b>if</b> statement must be the first or only statement\nin a <b>while</b> or <b>for</b>\nloops and the last or only statement in a <b>do-while</b> loop.\nSuch a loop would be clearer if the if statement was removed and its condition\nwas made an explicit loop condition.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedConditionalExpression",
          "displayName": "Nested conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested conditional expressions. Nested conditional expressions\nmay result in extremely confusing code.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessIndexOfComparison",
          "displayName": "Pointless 'indexOf()' comparison",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless comparison with\n<b>.indexOf()</b> expression. An example of such an expression\nis comparing the result of <b>.indexOf()</b> with numbers less than -1.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LabeledStatement",
          "displayName": "Labeled statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports labeled statements.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedSwitchStatement",
          "displayName": "Nested 'switch'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <b>switch</b> statements/expressions. Nested <b>switch</b>-es\nmay result in extremely confusing code.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleNegation",
          "displayName": "Double negation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports double negation.\n<p>\nFor example:\n<pre><code><b>if</b> (!!functionCall())</code></pre>\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of terms allowed in a boolean expression.\n<p>\nUse the checkbox below to ignore boolean expressions which use only a single boolean operator repeatedly.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateCondition",
          "displayName": "Duplicate condition",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate conditions in &amp;&amp; and || expressions\nand branches of an if statement.\nWhile sometimes intended, in most cases this is an oversight.\n\n<p>\n  To ignore conditions that may produce side effects, use the <b>Ignore conditions with side effects</b> checkbox.\nClearing this checkbox may lead to false-positives, for example, when the same method returns different values on subsequent invocations.\n</p>\n\n<p>\n<b>Examples:</b><br>\n<ul>\n  <li>\n    <code>boolean result = digit1 != digit2 || digit1 != digit2;</code>\n  </li>\n  <li>\n    <code>if (iterator.next() != null || iterator.next() != null)</code><br>\n    &nbsp&nbsp<code>System.out.println(\"Got it\");</code><br>\n    <code>}</code><br>\n    <code>// Due to possible side effects of iterator.next(), the warning will only be issued if the Ignore conditions with side effects option is disabled.</code><br>\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ContinueStatementWithLabel",
          "displayName": "'continue' statement with label",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements with labels.\nLabeled <b>continue</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EnumSwitchStatementWhichMissesCases",
          "displayName": "Enum 'switch' statement that misses case",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>switch</b> statements\nover enumerated types which do not include all of the enumerated type's elements as cases.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore <b>switch</b> statements which have a <b>default</b> branch.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableConditionalExpression",
          "displayName": "Simplifiable conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions that could be simplified. Examples:\n<pre>condition ? true : foo &rarr; condition || foo</pre>\n<pre>condition ? false : foo &rarr; !condition && foo</pre>\n<pre>condition ? foo : !foo &rarr; condition == foo</pre>\n<pre>condition ? true : false &rarr; condition</pre>\n<pre>a == b ? b : a &rarr; a</pre>\n<pre>result != null ? result : null &rarr; result</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NegatedConditional",
          "displayName": "Conditional expression with negated condition",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions whose conditions are negated.\nFlipping the order of the conditional expression branches will usually increase the clarity of such statements.\n<!-- tooltip end -->\n<p>\n  Use the checkboxes below to ignore comparisons of the form <tt>obj != null</tt> or <tt>num != 0</tt>.\n  Since <tt>obj != null</tt> effectively means \"obj exists\",\n  the meaning of the whole expression does not involve any negation\n  and is therefore easy to understand.\n<p>\n  The same reasoning applies to <tt>num != 0</tt> expressions, especially when using bit masks.\n<p>\n  These forms have the added benefit of mentioning the interesting case first.\n  In most cases, the value for the <tt>== null</tt> branch is <tt>null</tt> itself,\n  like in the following examples:\n\n<pre>\n    static String getName(Person p) {\n        return p != null ? p.getName() : null;\n    }\n\n    static String getExecutableString(int fileMode) {\n        return (fileMode & 0xb001001001) != 0 ? \"executable\" : \"non-executable\";\n    }\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "InfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>for</b>, <b>while</b>,\nor <b>do</b> statements which\ncan only exit by throwing an exception. While such statements may be correct, they\nare often a symptom of coding errors.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfCanBeAssertion",
          "displayName": "Statement can be replaced with 'assert' or 'Objects.requireNonNull'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>if</b> statements (with no <b>else</b> branch) throwing <code>java.lang.Throwable</code>.\n<!-- tooltip end -->\n<br>For example:<br>\n<code><b>if</b> (param == 2) <b>throw new</b> Exception();</code>\n<br>or guava's:<br>\n<code>Preconditions.checkNotNull(param, message)</code>\n\n<p>Quick fix replaces it with an <b>assert</b> statement.<br>\nExample:<br>\n<code><b>assert</b> param != 2;</code>\n</body>\n</html>\n"
        },
        {
          "shortName": "FallthruInSwitchStatement",
          "displayName": "Fallthrough in 'switch' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports 'fall-through' in a <b>switch</b> statement.\nFall-through is defined to occur when a series of executable statements after a <b>case</b> label is not guaranteed\nto transfer control before the next <b>case</b> label. For example if the branch is missing a <b>break</b> statement.\nIn that case, control falls through to the statements after\nthat <b>switch</b> label, even though the <b>switch</b> expression does not equal\nthe value of the fallen-through label. While occasionally intended, this construction is confusing, and is often the result of a typo.\n<p>\nThis inspection ignores any fall-through commented with a text matching the regex pattern <code>(?i)falls?\\s*thro?u</code>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalExpression",
          "displayName": "Conditional expression (?:)",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports the ternary condition operator. Some coding standards prohibit the use of\nthe condition operator, in favor of <b>if-else</b> statements.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore simple assignments and returns and thus allow constructs like this:\n<pre>\n    String s = (foo == null) ? \"\" : foo.toString();\n</pre>\n<p>\nUse the second checkbox below to ignore conditional expression in contexts where automatic replacement with an if statement is not possible.\nFor example when the conditional expression is used as an argument to a <b>super()</b> constructor call.\n</body>\n</html>"
        },
        {
          "shortName": "PointlessNullCheck",
          "displayName": "Unnecessary 'null' check before method call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports a <b>null</b> check followed by a method call that will definitely return <b>false</b> when  <b>null</b> is passed (e.g. <b>Class.isInstance</b>).\n  Such a check seems excessive as the method call always returns <b>false</b>.\n</p>\n<p>Here is an example of a violation: </p>\n<pre><code>    if (x != null && myClass.isInstance(x)) { ... }</code></pre>\n<p>The quickfix changes this code to:</p>\n<pre><code>    if (myClass.isInstance(x)) { ... }</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ConfusingElse",
          "displayName": "Redundant 'else'",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant <b>else</b> keywords in <b>if</b>&mdash;<b>else</b> statements and statement chains.\nAn <b>else</b> keyword is redundant when all previous <b>if</b> branches in the chain don't complete normally\nbecause they end with <b>return</b>, <b>throw</b>, <b>break</b>, or <b>continue</b> statement.\n<p>\n  In these cases the statements from the <b>else</b> branch can be placed after the <b>if</b> statement and\n  the <b>else</b> keyword can be removed.\n  <!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalCanBePushedInsideExpression",
          "displayName": "Conditional can be pushed inside branch expression",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions with <em>then</em> and <em>else</em> branches so similar that the conditional expression can be pushed inside, thereby shortening the code.\n<p>For example the following conditional expression:\n  <pre><code>condition ? message(\"value: \" + 1) : message(\"value: \" + 2)</code></pre>\nCan be pushed inside and transformed into:\n  <pre><code>message(\"value: \" + (condition ? 1 : 2))</code></pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "ForLoopWithMissingComponent",
          "displayName": "'for' loop with missing components",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> loops\nthat lack initialization, condition, or update clauses. Some coding styles prohibit\nsuch loops.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to let this inspection ignore loops which use an iterator.\nThis is a standard way to iterate over a collection, in which the\n<b>for</b> loop does not have an update\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableBooleanExpression",
          "displayName": "Simplifiable boolean expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports boolean expressions of the form<br>\n<code>!(foo ^ bar)</code> and <code>(foo && bar) || !foo</code>.<br>\nSuch expressions may be safely simplified to<br>\n<code>foo == bar</code> and <code>!foo || bar</code> respectively.<br>\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalBreakInInfiniteLoop",
          "displayName": "Conditional break inside infinite loop",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nDetects conditional breaks at the beginning or end of a loop and suggests to use a loop condition instead.\n<!-- tooltip end -->\nExample:\n<p><code>\n  while(true) {\n    if(i  == 23) break;\n    i++;\n  }\n</code></p>\n<p>Will be replaced with:\n<p><code>\n  while(i != 23) {\n    i++;\n  }\n</code></p>\n</body>\n</html>"
        },
        {
          "shortName": "ForLoopReplaceableByWhile",
          "displayName": "'for' loop may be replaced with 'while' loop",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>for</b> loops which contain neither initialization or update components, and can thus be replaced by\nsimpler <b>while</b> statements. Example:\n<pre><code>\n  for(; exitCondition(); ) {\n    process();\n  }\n</code></pre>\n  This loop can be replaced with\n<pre><code>\n  while(exitCondition()) {\n    process();\n  }\n</code></pre>\nA fix action is also available for other <code>for</code> loops, so you can replace any <code>for</code> loop with <code>while</code>.\n<!-- tooltip end -->\n<p>\nUse the checkbox below if you wish this inspection to ignore <b>for</b> loops with trivial or non-existent conditions.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NegatedIfElse",
          "displayName": "'if' statement with negated condition",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements\nwhich contain <b>else</b> branches and whose conditions are negated.\nFlipping the order of the <b>if</b> and <b>else</b>\nbranches will usually increase the clarity of such statements.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore comparisons of the form <b>!= null</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranches",
          "displayName": "Conditional expression with identical branches",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions with identical <em>then</em> and <em>else</em> branches.\nSuch expressions are almost certainly a mistake.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NegatedConditionalExpression",
          "displayName": "Negated conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions which are negated with a prefix expression. For example:\n<pre><code>!(i == 1 ? a : b)</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LoopStatementsThatDontLoop",
          "displayName": "Loop statement that does not loop",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any instance of <b>for</b>,\n<b>while</b> and <b>do</b> statements whose\nbodies are guaranteed to execute at most once. Normally, this is an indication of a bug.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore foreach loops.\nThese are sometimes used to perform an action only on the first item of an iterable in a compact way.\nFor example:\n<pre><code>\n  <b>for</b> (String s : stringIterable) {\n    doSomethingOnFirstString(s);\n    <b>break</b>;\n  }\n</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "SimplifiableAnnotation",
          "displayName": "Simplifiable annotation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports annotations which can be simplified to their 'single element'\nor 'marker' shorthand form. Annotations that contain whitespace between the @-sign and the name\nof the annotation are also reported.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaBodyCanBeCodeBlock",
          "displayName": "Lambda body can be code block",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports lambdas which body is an expression, e.g. <code>n&nbsp;-&gt;&nbsp;n&nbsp;+&nbsp;1</code>\n<p>The quick fix converts lambda's expression body to a code block, like the following:\n<pre><code>n -&gt; {\n  return n + 1;\n}</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableEqualsExpression",
          "displayName": "Unnecessary 'null' check before 'equals()' call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports comparisons to null which are followed by an 'equals()' call\nwith a constant argument.\n<p>\nFor example the following will be reported by this inspection:\n<code><pre>\n    <b>if</b> (s != <b>null</b> && s.equals(\"literal\")) {}\n</pre></code>\nAnd the quickfix will replace that with:\n<code><pre>\n    <b>if</b> (\"literal\".equals(s)) {}\n</pre></code>\n</p>\n<p>\n    When checkbox is checked, 'equals()' with non-constant argument may also be reported if 'equals()' argument\n    is proven to be not-null.\n</p>\n  <!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "LocalCanBeFinal",
          "displayName": "Local variable or parameter can be final",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports parameters or local variables, found in the specified inspection\nscope, that may have a <b><font color=\"#000080\">final</font></b> modifier added.\n<!-- tooltip end -->\n<br> <br>\nUse checkboxes in the inspection options below, to define whether parameters or local variables (or both) are to be reported.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryInterfaceModifier",
          "displayName": "Unnecessary interface modifier",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any redundant modifiers on interfaces or interface components.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OptionalContainsCollection",
          "displayName": "'Optional' contains array or collection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>java.util.Optional</b> or <b>com.google.common.base.Optional</b> types with an array or collection type parameter.\nIn such cases it is more clear to just use an empty array or collection to indicate no result.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedInnerClassAccess",
          "displayName": "Unqualified inner class access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to inner classes which are not qualified with the name\nof the enclosing class.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore references to inner classes contained within the same class, which therefore do not require an import.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedInnerClassAccess",
          "displayName": "Unnecessarily qualified inner class access",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to inner classes which are unnecessarily qualified with the name\nof the enclosing class. Such qualification is unnecessary, and may be safely removed. This may\nrequire the addition of an import for the inner class.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore references to inner classes where the removal of the qualification\nwould require the addition of an import.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JoinDeclarationAndAssignmentJava",
          "displayName": "Assignment can be joined with declaration",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports variable assignments that can be joined with the variable's declaration.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantLabeledSwitchRuleCodeBlock",
          "displayName": "Labeled switch rule has redundant code block",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports rules of <code>switch</code> expression or enhanced <code>switch</code> statement which have redundant code block.<br>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ChainedMethodCall",
          "displayName": "Chained method calls",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls whose target is another\nmethod call.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any instance of unnecessary parentheses. Parentheses\nare considered unnecessary if the evaluation order of an expression remains\nunchanged if the parentheses are removed.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore parentheses which help to clarify a binary\nexpression. Parentheses are clarifying if the expression parenthesized is an\n<b>instanceof</b> expression part of a larger\nexpression or has a different operator than the parent expression.\n<p>\nUse the second checkbox below to ignore any parentheses around the condition\nof conditional expressions. Some coding standards specify that all such conditions\nmust be surrounded by parentheses.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RawTypeCanBeGeneric",
          "displayName": "Raw type can be generic",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports variable declarations with initializer where the variable type is declared with\n<b>raw</b> type whereas initializer has fully parameterized <b>generic</b> type, e.g.\n<code>List&nbsp;list&nbsp;=&nbsp;new ArrayList&lt;String&gt;()</code>\n<p> The quick fix adds generic parameters to the variable type. The result would be like the following:\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;()</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessarySuperQualifier",
          "displayName": "Unnecessary 'super' qualifier",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any unnecessary uses of the <b>super</b>\nqualifier in method calls and fields references. A super qualifier is unnecessary\nwhen the field or method of the super class is not overridden in the calling class.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore qualifiers, which help to distinguish super members access from the same named members of the outer class.\n  See also\n  <ul>\n   <li>Java | Visibility issues | Access of inherited field looks like access of element in surrounding code</li>\n   <li>Java | Visibility issues | Call to inherited method looks like call to local method</li>\n  </ul>\n<p>\n\n\n</body>\n</html>"
        },
        {
          "shortName": "LiteralAsArgToStringEquals",
          "displayName": "'expression.equals(\"literal\")' rather than '\"literal\".equals(expression)'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>String.equals()</b> or <b>String.equalsIgnoreCase()</b> calls with a <b>String</b> literal argument.\nSome coding standards specify that <b>String</b> literals should be the qualifier of <b>equals()</b>, rather than\nargument, thus minimizing <b>NullPointerException</b>s.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryConstantArrayCreationExpression",
          "displayName": "Redundant 'new' expression in constant array creation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any constant new array expression, like <code>int[] a = new int[]{42}</code> which can be replaced\nwith an array initializer, e.g. <code>int[] a = {42}</code>. Array initializers omit the type declaration because\nthat is already specified by the declaration of the variable the expression is\nassigned to.\n</body>\n</html>"
        },
        {
          "shortName": "FuseStreamOperations",
          "displayName": "Subsequent steps can be fused into Stream API chain",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nDetects transformations outside a Stream API chain that could be incorporated into it. For example:\n<pre>\n  List&lt;String&gt; list = stream.collect(Collectors.toList());\n  list.sort(null);\n  return list.toArray(new String[list.size()]);\n</pre>\ncould be converted to\n<pre>\n  return stream.sorted().toArray(String[]::new);\n</pre>\n<p>\n  Note that sometimes the converted stream chain may replace explicit <code>ArrayList</code> with <code>Collectors.toList()</code> or explicit\n  <code>HashSet</code> with <code>Collectors.toSet()</code>. While the current library implementation uses these collections internally,\n  this is not specified and thus can be changed in future, which may affect the semantics of your code.\n<!-- tooltip end -->\nIf you are concerned about this,\nuse the checkbox below to suggest <code>Collectors.toCollection()</code> instead of <code>toList</code> and <code>toSet</code> collectors.\n<p>This inspection only applies to language level 8 or higher.</p>\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CallToStringConcatCanBeReplacedByOperator",
          "displayName": "Call to 'String.concat()' can be replaced with '+'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the <b>concat</b> method\nof a <b>java.lang.String</b> object. Such calls can be\nreplaced with the '+' operator for increased code clarity and possible increased\nperformance if the method was invoked on a constant with a constant argument.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BoundedWildcard",
          "displayName": "Can use bounded wildcard",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports generic method parameters that can use <a href=\"https://en.wikipedia.org/wiki/Wildcard_(Java)\">bounded wildcards</a> in your API.\nTo quote <a href=\"https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java\">Josh Bloch</a> in <em>Effective Java</em> third Edition:\n<blockquote>\n  <h4>Item 31: Use bounded wildcards to increase API flexibility</h4>\n  Using wildcard types in your APIs, while tricky, makes the APIs far more flexible.\n  If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory.\n  Remember the basic rule: producer-extends, consumer-super (PECS).\n  Also remember that all Comparables and Comparators are consumers.\n</blockquote>\n<p>Example:\n  <pre><code>void process(Consumer&lt;Number&gt; consumer);</code></pre> should be replaced with:\n  <pre><code>void process(Consumer&lt;? super Number&gt; consumer);</code></pre>\n  This method signature is more flexible because it accepts more types, not only\n  <code>Consumer&lt;Number&gt;</code> but also <code>Consumer&lt;Object&gt;</code>.\n<p>\n  Likewise, type parameters in covariant position:\n  <pre><code>T produce(Producer&lt;T&gt; p);</code></pre> should be replaced with:\n  <pre><code>T produce(Producer&lt;? extends T&gt; p);</code></pre>\n  <!-- tooltip end -->\n<p>\n  Use the first checkbox to ignore <b>invariant</b> classes.\n  Invariant classes (e.g. <code>java.util.List&lt;T&gt;</code>) are\n  classes that both accept values (via its <code>List.add(T)</code> method)\n  and produce values (via its <code>T List.get()</code> method). On the\n  other hand, <b>contravariant</b> classes only receive values, e.g. <code>java.util.function.Consumer&lt;T&gt;</code>\n  with the only method <code>accept(T)</code>, and <b>covariant</b> classes\n  only produce values, e.g. <code>java.util.function.Supplier&lt;T&gt;</code>\n  with the only method <code>T get()</code>. People\n  are often OK with bounded wildcards in covariant/contravariant\n  classes but afraid of wildcards in invariant classes, e.g. <code>void\n  process(List&lt;? extends T&gt; l)</code>. Turn this setting off to ignore\n  these invariant classes and leave them rigidly typed, e.g. <code>void\n  process(List&lt;T&gt; l)</code>.\n<p>\n  Uncheck the second checkbox to ignore <b>private</b> methods, which can be considered as not a part of the public API.\n<p>\n  Uncheck the third checkbox to ignore instance methods and only report <b>static</b> methods.\n</body>\n</html>"
        },
        {
          "shortName": "ControlFlowStatementWithoutBraces",
          "displayName": "Control flow statement without braces",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports any <b>if</b>,\n<b>while</b> or <b>for</b>\nstatements without braces. Braces make the code easier to read and help prevent\nerrors when modifying the code.\n<p>The quick fix for the inspection wraps the statement body with braces.\n</body>\n</html>"
        },
        {
          "shortName": "OptionalToIf",
          "displayName": "Optional can be replaced with sequence of if statements",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>Optional</code> call chains which could be replaced with a sequence of 'if' statements.\n<!-- tooltip end -->\n<p>Example:\n<pre><code>\n  return Optional.ofNullable(name)\n    .map(this::extractInitials)\n    .map(initials -> initials.toUpperCase(Locale.ENGLISH))\n    .orElseGet(this::getDefault);\n</code></pre>\n<p>can be replaced with</p>\n<pre><code>\n  if (name != null) {\n    String initials = extractInitials(name);\n    if (initials != null) return initials.toUpperCase(Locale.ENGLISH);\n  }\n  return getDefault();\n</code></pre>\n<p>This inspection only reports if the configured language level is 8 or higher.</p>\n<p><small>New in 2020.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CharsetObjectCanBeUsed",
          "displayName": "Standard Charset object can be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports methods and constructors where constant charset String literal is used (like <b>\"UTF-8\"</b>) which could be replaced with\na predefined Charset object like <b>StandardCharsets.UTF_8</b>. This may work a little bit faster, because charset lookup becomes\nunnecessary. Also catching <b>UnsupportedEncodingException</b> may become unnecessary as well. In this case the catch block will\nbe removed automatically.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterTypeCanBeSpecified",
          "displayName": "Lambda parameter type can be specified",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda parameters which don't have their type specified, e.g. <code>a&nbsp;->&nbsp;a&nbsp;+&nbsp;1</code>\n<p>The quick fix adds type declaration to the lambda parameters, the result looks like this:\n  <code>(int&nbsp;a)&nbsp;->&nbsp;a&nbsp;+&nbsp;1</code>\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitCallToSuper",
          "displayName": "Implicit call to 'super()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports constructors which do not begin with calls to \"super\" constructor, or\nother constructors of the same class. Such constructors can be thought of as implicitly beginning with a\ncall to <b>super()</b>. Some coding standards prefer that such calls to\n<b>super()</b> be made explicitly.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryQualifierForThis",
          "displayName": "Unnecessary qualifier for 'this' or 'super'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any unnecessary qualification of <b>this</b> or <b>super</b>.\nUsing a qualifier on <b>this</b> or <b>super</b> to\ndisambiguate a code reference may easily become unnecessary via automatic refactorings, and should be deleted for clarity.\n<p>\nFor example:\n<pre><code>OuterClass.<b>this</b>.foo();</code></pre>\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedMethodCall",
          "displayName": "Nested method call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls used as parameters of another\nmethod call.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore method calls in field initializers.\n<p>\nUse the second checkbox below to ignore calls to static methods.\n<p>\nUse the third checkbox below to ignore calls to simple getters.\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any unnecessary semicolons, whether between class members, inside block statements, or after\nclass definitions. While valid Java, these semicolons are redundant, and may be removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertMessageNotString",
          "displayName": "'assert' message is not a String",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>assert</b> messages which are not of type <b>java.lang.String</b>.\nBy using a String more information can be provided to help diagnose the failure,\nor the reason for the assertion.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only warn when the <b>assert</b> message type is <b>boolean</b> or <b>java.lang.Boolean</b>.\nA <b>boolean</b> detail message is unlikely to provide additional information about an assertion failure,\n  and could possibly be the result of a mistakenly entered <b>':'</b> instead of a <b>'&'</b>.\n<p>\n<small>New in 15</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "MoveFieldAssignmentToInitializer",
          "displayName": "Field assignment can be moved to initializer",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nProvides a quick fix to replace initialization of a field via assignment with a field initializer.\nThe code is highlighted only if field initializer is located in the initializer\nand joining with the field declaration is likely to be safe.\nIn other cases the inspection provides the quick fix without highlighting, as it may change the code semantics.\n<!-- tooltip end -->\n<small>Since 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "FillPermitsList",
          "displayName": "Same file subclasses are missing from permits clause of a sealed class",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports sealed classes whose permits clause doesn’t contain some of the subclasses from the same file.\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ListIndexOfReplaceableByContains",
          "displayName": "'List.indexOf()' expression is replaceable with 'contains()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>List.indexOf()</b>\nexpressions which can be replaced with the method\n<b>List.contains()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticallyImportedElement",
          "displayName": "Unnecessarily qualified statically imported element",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to static members which are statically imported and also qualified with\ntheir containing class name. Because the elements are already statically imported such qualification is unnecessary\nand can be removed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalCanBeOptional",
          "displayName": "Conditional can be replaced with Optional",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nSuggests to replace a null-check condition with an <b>Optional</b> chain. E.g.\n<pre>return str == null ? \"\" : str.trim();</pre>\nCould be rewritten as\n<pre>return Optional.ofNullable(str).map(String::trim).orElse(\"\");</pre>\n<p>While the replacement is not always shorter, this could be a helpful step for further refactoring\n  (e.g. changing the method return value to an Optional).</p>\n<p>Note that when not-null branch of the condition returns null, the corresponding mapping step will produce an empty Optional\npossibly changing the semantics. If it cannot be statically proven that semantics will be preserved, quick-fix action name\nwill contain \"(may change semantics)\" notice and inspection highlighting will be turned off.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "BlockMarkerComments",
          "displayName": "Block marker comment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports comments which are used as code block markers. For example:<br>\n<pre><code>\n  while (i &lt; 10) {\n    i++;\n  } <b>// end while</b>\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "DiamondCanBeReplacedWithExplicitTypeArguments",
          "displayName": "Diamond can be replaced with explicit type arguments",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports instantiation of generic classes where <b>&lt;&gt;</b> (diamond) is used instead of type parameters.\n<p>The quick fix replaces the <b>&lt;&gt;</b> (diamond) with the explicit type parameters.\n<p>Example of use of the diamond:\n<pre><code>List &lt;String&gt; list = new ArrayList&lt;&gt;()</code></pre>\n<p>The statement above is replaced with the following:\n<pre><code>List &lt;String&gt; list = new ArrayList&lt;String&gt;()</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "OptionalAssignedToNull",
          "displayName": "Null value for Optional type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection warns when <code>null</code> is assigned to <code>Optional</code> variable or returned from method returning\n  <code>Optional</code>. It's recommended to use <code>Optional.empty()</code> (or <code>Optional.absent()</code> for Guava) to denote\n  an empty value.\n<p>\n  Use checkbox below to report also comparisons like <b>optional == null</b>. While in rare cases (e.g. lazily initialized optional field)\n  this might be correct, usually optional variable is never null, and probably <b>optional.isPresent()</b> was intended.\n</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableIfStatement",
          "displayName": "If statement can be replaced with ?:, &&, ||, ==, or != expression",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports 'if' statements which can be replaced with condition using '&&', '||' or '?:' operator.\nThe result is usually shorter, but not always more clear, so it's not advised to apply it everywhere.\nAlso this change may reduce compiled bytecode size which could be useful in some environments like Java ME.\n<p>\n  Example: <b>if (<i>condition</i>) return true; else return <i>foo</i>;</b> could be replaced with\n  <b>return <i>condition</i> || <i>foo</i>;</b>\n</p>\n  <!-- tooltip end -->\n<p>\n  Use the first checkbox to skip warning when '?:' operator is suggested. In this case only '&&' and '||' suggestions\n  will be highlighted. The fix action to replace with '?:' will still be available in the editor.\n</p>\n<p>\n  Use the second checkbox to skip warning on 'if-else' chains. The fix action will still be available in the editor.\n</p>\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryToStringCall",
          "displayName": "Unnecessary call to 'toString()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any calls to <b>toString()</b> used in string concatenations and as arguments to the\n<b>print()</b> and <b>println()</b> methods of <b>java.io.PrintWriter</b> and <b>java.io.PrintStream</b>, the <b>append()</b>\nmethod of <b>java.lang.StringBuilder</b> and <b>java.lang.StringBuffer</b> or the <b>trace()</b>, <b>debug()</b>, <b>info()</b>,\n<b>warn()</b> and <b>error()</b> methods of <b>org.slf4j.Logger</b>. In these cases the conversion\nto string will be handled by the underlying library methods and an explicit call to <b>toString()</b> is no needed.\n<p>\nNote that without the <b>toString()</b> call the expression will have slightly different semantics (the string <b>null</b> will be used instead of\n throwing a <b>NullPointerException</b>).\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaCanBeReplacedWithAnonymous",
          "displayName": "Lambda can be replaced with anonymous class",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda expressions which can be replaced with anonymous class.\n<p> The quick fix expands lambda expression to the anonymous class.\n<p>For example the lambda expression <code>s -> System.out.println(s)</code> can be expanded to the following class:\n<pre><code>new Consumer&lt;String&gt;() {\n  @Override\n  public void accept(String s) {\n    System.out.println(s);\n  }\n}</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsObject",
          "displayName": "Class explicitly extends 'java.lang.Object'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any classes explicitly declared to extend <b>java.lang.Object</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingOctalEscape",
          "displayName": "Confusing octal escape sequence",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any string literals which contain an octal escape sequence immediately followed by\na digit. Such strings may be confusing, and are often the result of errors in escape code creation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ChainedEquality",
          "displayName": "Chained equality comparisons",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports chained equality comparisons (i.e. <b>a==b==c</b>).\nSuch comparisons are confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedFieldAccess",
          "displayName": "Instance field access not qualified with 'this'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on field accesses which are not qualified with\n<b>this</b> or some other qualifier. Some coding styles\nmandate that all field accesses are qualified to prevent confusion with local\nvariable or parameter accesses.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SingleStatementInBlock",
          "displayName": "Code block contains single statement",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports control flow statements with\nonly a single statement in their code block.\n<p>The quick fix for the inspection removes braces from the statement body.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstantOnWrongSideOfComparison",
          "displayName": "Constant on wrong side of comparison",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on comparison operations with the constant value on the wrong side.\nSome coding conventions specify that constants should be on a specific side of a comparison, either left or right.\n<!-- tooltip end -->\n<p>\n<small>New in 2019.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "MissortedModifiers",
          "displayName": "Missorted modifiers",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on declarations whose modifiers are not in the canonical\npreferred order (as stated in the Java Language Specification).\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to report when annotations are misplaced:\nannotations with ElementType.TYPE_USE <em>not</em> directly before the type after the modifier keywords,\nother annotations <em>not</em> before the modifier keywords.\nWhen the checkbox is unchecked any annotation can be positioned before or after the modifier keywords.\nModifier lists with annotations in between modifier keywords will always be reported.\n<p>\nUse the second checkbox below to warn when an ElementType.TYPE_USE annotation is not positioned directly before\na type, even when the annotation has other targets specified.\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryEnumModifier",
          "displayName": "Unnecessary enum modifier",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any redundant modifiers on enumerated classes or components of\nenumerated classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySuperConstructor",
          "displayName": "Unnecessary call to 'super()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any no-argument calls to a superclass\nconstructor as the first call of a constructor. Such calls are unnecessary, and may be removed.<p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryCallToStringValueOf",
          "displayName": "Unnecessary conversion to String",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any calls to static methods like <b>String.valueOf()</b> or <b>Integer.toString()</b> used in\nstring concatenations and as arguments to the\n<b>print()</b> and <b>println()</b> methods of <b>java.io.PrintWriter</b> and <b>java.io.PrintStream</b>, the <b>append()</b>\nmethod of <b>java.lang.StringBuilder</b> and <b>java.lang.StringBuffer</b> or the <b>trace()</b>, <b>debug()</b>, <b>info()</b>,\n<b>warn()</b> and <b>error()</b> methods of <b>org.slf4j.Logger</b>. In these cases the conversion\nto string will be handled by the underlying library methods and an explicit call to <b>String.valueOf()</b> is not needed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryFinalOnLocalVariableOrParameter",
          "displayName": "Unnecessary 'final' on local variable or parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables or parameters unnecessarily declared <b>final</b>.\nSome coding standards frown on variables declared <b>final</b>, for reasons of terseness.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to enable or disable warnings on local variables\n<p>\nUse the second checkbox below to enable or disable warnings on parameters (including\nparameters of <b>catch</b> blocks and enhanced <b>for</b> statements)\n<p>\nUse the third checkbox below to only warn on <b>final</b> parameters of <b>abstract</b> or <b>interface</b>\nmethods, which may be considered extra unnecessary, as such markings have no\neffect on the implementation of these methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SingleElementAnnotation",
          "displayName": "Single-element annotation",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports annotations in the 'single element' shorthand form, like <code>@Retention(RUNTIME)</code>.\n<p>The quick fix for this inspection converts annotation to the 'normal' form (with attribute name),\ne.g. <code>@Retention(value=RUNTIME)</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "EqualsCalledOnEnumConstant",
          "displayName": "'equals()' called on Enum value",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>equals()</b> on\n<b>Enum</b> constants. Such calls can be replaced by\nan identity comparison <b>(==)</b> because two\n<b>Enum</b> constants are equal only when they\nhave the same identity.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ReturnThis",
          "displayName": "Return of 'this'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods returning <b>this</b>.\nWhile such a return is valid, it is rarely necessary, and usually indicates that the developer intends the method to be used\nas part of a chain of similar method calls (e.g. buffer.append(\"foo\").append(\"bar\").append(\"baz\")).\nSuch chains are frowned upon by many coding standards.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldMayBeFinal",
          "displayName": "Field may be 'final'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields which may safely be made <b>final</b>.\nA <b>static</b> field may be final if it is initialized in its declaration\nor in one static class initializer, but not both. A non-static field may be final if it is initialized\nin its declaration or in one non-static class initializer or in all constructors.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryBlockStatement",
          "displayName": "Unnecessary code block",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports code blocks which are unnecessary to the semantics of the program, and can\nbe replaced by their contents. Code blocks which are the bodies of <b>if</b>, <b>do</b>,\n<b>while</b> or <b>for</b> statements will not be reported by this\ninspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below if you wish this inspection to ignore code blocks which are used as branches of switch statements.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CStyleArrayDeclaration",
          "displayName": "C-style array declaration",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports array declarations made using C-style syntax,\nwith the array indicator brackets positioned after the variable name or after the method parameter list.\nFor example:\n<code><pre>\n  <b>public</b> String process(String value[])[] {\n    return value;\n  }\n</pre></code>\nMost code styles prefer Java-style array declarations, with the array indicator brackets attached to the type name.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report C-style array declaration of method return types.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectsEqualsCanBeSimplified",
          "displayName": "Objects.equals() can be replaced with equals()",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <b>Objects.equals(a, b)</b> where the first argument is statically known to be non-null.\n  Such a call can be safely replaced with <b>a.equals(b)</b> or <b>a == b</b> if both arguments are primitives.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ArrayCreationWithoutNewKeyword",
          "displayName": "Array creation without 'new' expression",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports array initializer without new array expression, like <code>int[] a = {42}</code>.\n<p>The quick fix for this inspection adds a new array expression to the initializer, e.g. <code>int[] a = new int[]{42}</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RecordCanBeClass",
          "displayName": "Record can be converted to a class",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nSuggests to replace records with ordinary classes.\nThe inspection could be useful if you need to move a Java record\nto codebases that use earlier Java versions.\n<p>\n  Note that the resulting class is not completely equivalent to the original record:\n</p>\n<ul>\n  <li>the resulting class no longer extends <code>java.lang.Record</code>,\n    so <code>instanceof Record</code> returns false.</li>\n  <li>reflection methods like <code>Class.isRecord()</code> and\n    <code>Class.getRecordComponents()</code> produce different results.</li>\n  <li>the generated <code>hashCode()</code> implementation may produce a different result\n    because the formula to calculate record hashCode is deliberately not specified.</li>\n  <li>record serialization mechanism differs from that of ordinary classes.\n    Refer to Java Object Serialization Specification for details.</li>\n</ul>\n<!-- tooltip end -->\n<p>Example:</p>\n<pre>\n  record Point(int x, int y) {}\n</pre>\nThis record will be converted to\n<pre>\n  final class Point {\n    private final int x;\n    private final int y;\n\n    Point(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    public int x() {\n      return x;\n    }\n\n    public int y() {\n      return y;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (obj == this) return true;\n      if (obj == null || obj.getClass() != this.getClass()) return false;\n      var that = (Point) obj;\n      return this.x == that.x &&\n              this.y == that.y;\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(x, y);\n    }\n\n    @Override\n    public String toString() {\n      return \"Point[\" +\n              \"x=\" + x + \", \" +\n              \"y=\" + y + ']';\n    }\n  }\n</pre>\n<p>This inspection only applies to language level 14 preview and 15 preview.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedStaticUsage",
          "displayName": "Unqualified static access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports static method calls or field accesses that are not qualified\nwith the class name of the static method. This is legal if the static method or field is in\nthe same class as the call, but may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterExtendsObject",
          "displayName": "Type parameter explicitly extends 'java.lang.Object'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any type parameters and wildcard type arguments explicitly declared to extend <b>java.lang.Object</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryFullyQualifiedName",
          "displayName": "Unnecessary fully qualified name",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports on fully qualified class names which can be shortened. The quick fix for this\ninspection will shorten the fully qualified names, adding import statements as necessary.\n<!-- tooltip end -->\n<p>\nIn <a href=\"settings://preferences.sourceCode.Java?JavaDoc%20Inner\">Settings | Editor | Code Style | Java | Imports</a>\ntwo settings can be found which influence this inspection.\nUse the settings there to  specify if references to inner classes\nshould be qualified with the outer class and if fully qualified names are allowed in javadoc.\n<p>\nUse the checkbox below to ignore fully qualified names inside the Java 9 <b>provides</b> and <b>uses</b> module statements.\n</body>\n</html>"
        },
        {
          "shortName": "StreamToLoop",
          "displayName": "Stream API call chain can be replaced with loop",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nFinds Stream API chains, <b>Iterable.forEach</b> and <b>Map.forEach</b> calls and provides quick fix to convert them into classical loops.\n<p>\n  Note that sometimes this inspection might cause slight semantic changes.\n  Special care should be taken when it comes to short-circuiting, as it's not specified how many elements will be actually read when\n  the stream short-circuits.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodRefCanBeReplacedWithLambda",
          "displayName": "Method reference can be replaced with lambda",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports method references, like <code>MyClass::myMethod</code> and <code>myObject::myMethod</code>.\n<p> The quick fix for the inspection replaces the method reference with an equivalent lambda expression that invokes the method.\n<p>For example, the method reference <code>System.out::println</code> is replaced with\n<code>s&nbsp;->&nbsp;System.out.println(s)</code>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchLabeledRuleCanBeCodeBlock",
          "displayName": "Labeled switch rule can have code block",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports rules of <code>switch</code> expression or enhanced <code>switch</code> statement which can be converted to a code block.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "MultipleVariablesInDeclaration",
          "displayName": "Multiple variables in one declaration",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports multiple variables declared in a single declaration.\nSome coding standards prohibit such declarations.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore multiple variables declared in the initialization of a 'for' loop statement, e.g.:\n<pre><code><b>for</b> (int i = 0, max = list.size(); i < max; i++) {}</code></pre>\n<p>\nUse the second checkbox below to only warn when variables with different array dimensions are declared in a single declaration, e.g.:\n<pre><code>String s = \"\", array[];</code></pre>\n<p>\n<small>New in 2019.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "ArrayCanBeReplacedWithEnumValues",
          "displayName": "Array can be replaced with enum values",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports arrays of enum constants which may be replaced with <code>EnumType.values()</code>.\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SizeReplaceableByIsEmpty",
          "displayName": "'size() == 0' replaceable with 'isEmpty()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>.size()</b> or <b>.length()</b>\ncomparisons with a <b>0</b> literal which can be replaced with a call to <b>.isEmpty()</b>.\n<!-- tooltip end -->\n<p>\nUse the table below to add classes for which any <b>.size()</b> or <b>.length()</b> comparisons should not be replaced.\n<p>\nUse the checkbox below to ignore any expressions which would be replaced with '!isEmpty()'.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OptionalIsPresent",
          "displayName": "Optional.isPresent() can be replaced with functional-style expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports conditions like <code>if(Optional.isPresent())</code> which could be rewritten in functional style.\n<!-- tooltip end -->\n<p>\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticUsage",
          "displayName": "Unnecessarily qualified static access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to static methods or accesses of static fields\non the current class which are qualified with the class name. Such qualification is unnecessary,\nand may be safely removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryThis",
          "displayName": "Unnecessary 'this' qualifier",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any unnecessary uses of <b>this</b> in the code.\nUsing <b>this</b> to\ndisambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged\nby many coding styles.\n<p>\nFor example:\n<pre><code><b>this</b>.a = 3;</code></pre>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore assignments to fields.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultiCatchCanBeSplit",
          "displayName": "Multi-catch can be split into separate catch blocks",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>multi-catch</b> sections, like <code>try{} catch&nbsp;(IOException|RuntimeException&nbsp;e)&nbsp;{...}</code>\n<p> The quick fix splits multi-catch section into separate <b>catch</b> blocks.\n<!-- tooltip end -->\n<p>For example, the multi-catch section\n<pre><code>\ntry{}\ncatch (IOException|RuntimeException e) {\n  /*handle the exception*/\n}</code></pre>\nis transformed into the following:\n<pre><code>\ntry{}\ncatch (IOException e) {\n  /*handle the exception*/\n}\ncatch (RuntimeException e) {\n  /*handle the exception*/\n}</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantFieldInitialization",
          "displayName": "Redundant field initialization",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields explicitly initialized to\nthe same values that the JVM would initialize them to by default.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassCanBeRecord",
          "displayName": "Class can be a record",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSuggests replacing classes with records.\nThe inspection could be useful if you need to focus on modeling immutable data rather than extensible behavior.\nAutomatic implementation of data-driven methods such as equals and accessors helps to get rid of boilerplate.\n<p>\n  Note that not every class can be a record. Here are some of the restrictions:\n</p>\n<ul>\n  <li>Class must contain no inheritors and must be a top level class.</li>\n  <li>All the non-static fields in class must be final.</li>\n  <li>Class must contain no instance initializers, generic constructor and native methods.</li>\n</ul>\nTo get a full list of the restrictions refer to https://docs.oracle.com/javase/specs/jls/se15/preview/specs/records-jls.html.\n<!-- tooltip end -->\n<p>Example:</p>\n<pre>\n  class Point {\n    private final double x;\n    private final double y;\n\n    Point(double x, double y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    double getX() {\n      return x;\n    }\n\n    double getY() {\n      return y;\n    }\n  }\n</pre>\nThis record will be converted to:\n<pre>\n  record Point(int x, int y) {\n  }\n</pre>\n<p>This inspection only applies to language level 14 preview and higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnclearBinaryExpression",
          "displayName": "Unclear expression",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports binary, conditional or <b>instanceof</b> expressions consisting of multiple terms with different operators\nwithout parentheses. Such expressions can be unclear because not every developer is intimately familiar with all the precedence rules\nof the different operators. This inspection has a quickfix which adds clarifying parentheses.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ReturnSeparatedFromComputation",
          "displayName": "'return' separated from the result computation",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects <code>return</code> statements which return a local variable, where the value of the variable is computed\nsomewhere else within the same code block with the <code>return</code> statement.\n<p>The quick fix inlines the returned variable by moving the return statement to the location where the value of the variable is computed.\n  When the returned value can't be inlined into return statement, the quick fix attempts to move the return statement as close to the\n  computation of the returned value as possible.\n<p>For example, the code below could be simplified:\n<pre><code>int n = -1;\nfor(int i = 0; i &lt; a.length; i++) {\n    if (a[i] == b) {\n        n = i;\n        break;\n    }\n}\nreturn n;</code></pre>\nAfter the quick fix it becomes the following:\n<pre><code>int n = -1;\nfor(int i = 0; i &lt; a.length; i++) {\n    if (a[i] == b) {\n        return i;\n    }\n}\nreturn n;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "TryStatementWithMultipleResources",
          "displayName": "'try' statement with multiple resources can be split",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>try</b> statements with multiple resources.\n<p>The quick fix suggests to split such statements into nested <b>try-with-resources</b> statements.\n<!-- tooltip end -->\n<p>Example of <b>try</b> statement with multiple resources:\n<pre><code>try (FileInputStream in = new FileInputStream(\"in.txt\");\n     FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n  /*read and write*/\n}</code></pre>\n<p>The example above is transformed into the following:\n<pre><code>try (FileInputStream in = new FileInputStream(\"in.txt\")) {\n  try (FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n    /*read and write*/\n  }\n}</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnqualifiedMethodAccess",
          "displayName": "Instance method call not qualified with 'this'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to non-static methods of the same object which are not qualified with <b>this</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ConstantExpression",
          "displayName": "Constant expression can be evaluated",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nAllows you to replace compile-time constant expression with its actual value (e.g. \"2 + 2\" with \"4\").\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryConstructor",
          "displayName": "Redundant no-arg constructor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary constructors.\nA constructor is unnecessary if it is the only constructor of a class, has no parameters,\nhas the same access modifiers as its containing class,\nand does not perform any initialization except explicitly or implicitly calling the super class constructor without arguments.\nSuch a constructor can be safely removed as it will be generated by the compiler even if not specified.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore unnecessary constructors which have an annotation.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Numeric issues",
      "inspections": [
        {
          "shortName": "CharUsedInArithmeticContext",
          "displayName": "'char' expression used in arithmetic context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any expressions of type char which are used in\naddition or subtraction expressions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DivideByZero",
          "displayName": "Divide by zero",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports division by zero or remainder by zero.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IntegerMultiplicationImplicitCastToLong",
          "displayName": "Integer multiplication or shift implicitly cast to long",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports integer multiplications or left shifts which are implicitly cast to long.\nFor example:\n<pre><code>\n  <b>void</b> x(int i) {\n    <b>long</b> val = 65536 * i;\n  }\n</code></pre>\nSuch multiplication is often a mistake, as overflow truncation may occur unexpectedly.\nConverting the <b>int</b> literal to a <b>long</b> literal (<code>65536L</code>) fixes the problem.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RemoveLiteralUnderscores",
          "displayName": "Underscores in numeric literal",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports numeric literals with underscores so they can be removed using a quick-fix\n<p>This inspection only reports if the language level of the project or module is 7 or higher</p>\n<!-- tooltip end -->\n<p>Quick fix: removes underscores from numeric literals. E.g. 1_000_000 will be converted to 1000000.</p>\n<p><small>New in 2020.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryUnaryMinus",
          "displayName": "Unnecessary unary minus",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any unnecessary unary minuses.\n<p>\nFor example:\n<code><pre>\n    i += -8;\n    i = i + -8;\n</pre></code>\ncould be replaced by:\n<code><pre>\n    i -= 8;\n    i = i - 8;\n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OctalLiteral",
          "displayName": "Octal integer",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports octal integer literals. Some coding standards prohibit the\nuse of octal literals, as they may be easily confused with decimal literals.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OctalAndDecimalIntegersMixed",
          "displayName": "Octal and decimal integers in same array",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports mixed octal and decimal integer literals in a single array initializer.\nThis is often due to copying a list of numbers into an array initializer, where\nsome of the numbers in the array are zero-padded, and will thus be interpreted by the Java compiler as octal.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InsertLiteralUnderscores",
          "displayName": "Unreadable numeric literal",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports long numeric literals without underscores.\n<p>\n  Underscores make long numeric literals easier to read.\n</p>\n<p>\n  The quick-fix adds underscores to the literal, for example, <code>1000000</code> becomes <code>1_000_000</code>.\n</p>\n<!-- tooltip end -->\n<p>This inspection only applies to language level 7 or higher.</p>\n<p><small>New in 2020.2</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "FloatingPointEquality",
          "displayName": "Floating point equality comparison",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports floating-point values\nbeing compared with an <b>==</b> or <b>!=</b> operator.\nFloating point values are inherently inaccurate, and comparing them for exact\nequality is almost never the desired semantics. This inspection ignores comparisons\nwith zero and infinity literals.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ComparisonOfShortAndChar",
          "displayName": "Comparison of 'short' and 'char' values",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports equality comparisons between\n<b>short</b> and <b>char</b> values.\nSuch comparisons may cause subtle bugs, as <b>short</b> values are\nsigned and <b>char</b> values unsigned.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CastThatLosesPrecision",
          "displayName": "Numeric cast that loses precision",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any cast operations between primitive numeric types which may\nresult in loss of precision. Such casts are not necessarily a problem, but may result in difficult to\ntrace bugs if the loss of precision is unexpected.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to indicate that this inspection should ignore casts from\n<b>int</b> to <b>char</b>.\nThis type of cast is often used when implementing I/O operations, because the\n<b>read()</b> method of the class\n<b>java.io.Reader</b> returns an <b>int</b>.\n<p>\n  Use the second checkbox below to ignore casts of constant values 128-255 from <b>int</b> to <b>byte</b>.\n  Such values will overflow to negative numbers that still fit inside a byte.\n</body>\n</html>"
        },
        {
          "shortName": "ComparisonToNaN",
          "displayName": "Comparison to Double.NaN or Float.NaN",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any equality or inequality comparisons to\n<b>Double.NaN</b> or <b>Float.NaN</b>.\nEquality comparison to these values is always false. Instead, use the\n<b>Double.isNaN()</b> of <b>Float.isNaN()</b>\nmethods instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CachedNumberConstructorCall",
          "displayName": "Number constructor call with primitive argument",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>Long</b>,\n<b>Integer</b>, <b>Short</b> or\n<b>Byte</b> object from a primitive <b>long</b>,\n<b>integer</b>, <b>short</b> or\n<b>byte</b>\nargument. It may be more efficient to use the static method <b>valueOf()</b>\nhere (introduced in Java 5), which will cache objects for values between -128 and\n127 inclusive.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\nUse the first checkbox below to ignore calls to number constructors with a <b>String</b> argument.\n<p>\nUse the second checkbox to only report calls to deprecated constructors.\n<b>Long</b>, <b>Integer</b>, <b>Short</b> and<b>Byte</b> constructors are deprecated since JDK 9.\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryExplicitNumericCast",
          "displayName": "Unnecessary explicit numeric cast",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any primitive numeric casts which would otherwise be inserted implicitly by the compiler.\nAlso reports any primitive numeric casts which the compiler will remove.\nFor example:\n<pre><code>\n  <b>int</b> x = (<b>short</b>)5; // cast will be removed by javac\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalEquals",
          "displayName": "'equals()' called on 'java.math.BigDecimal'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.equals()</b> being called\nto compare two <b>java.math.BigDecimal</b> numbers. This is normally\na mistake, as two <b>java.math.BigDecimal</b>s are only equal if\nthey are equal in both value and scale, so that 2.0 is not equal to 2.00\nTo compare <b>java.math.BigDecimal</b>s for mathematical equality,\nuse <b>.compareTo()</b> instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleLiteralMayBeFloatLiteral",
          "displayName": "'double' literal cast to 'float' could be 'float' literal",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>double</b> literal expressions\nwhich are immediately cast to <b>float</b>. Such\nliteral expressions can be replaced with the equivalent <b>float</b>\nliteral.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "IntLiteralMayBeLongLiteral",
          "displayName": "'int' literal cast to 'long' could be 'long' literal",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>int</b> literal expressions\nwhich are immediately cast to <b>long</b>. Such\nliteral expressions can be replaced with the equivalent <b>long</b>\nliteral.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NumericOverflow",
          "displayName": "Numeric overflow",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection checks for expressions which overflow during computation, i.e.: <br>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><font color=\"#000080\">a = 1.0/0.0;</font></b>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UnpredictableBigDecimalConstructorCall",
          "displayName": "Unpredictable BigDecimal constructor call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>BigDecimal</b> constructors which accept a <b>double</b> value.\nThese constructors produce a <b>BigDecimal</b> which is exactly equal to the supplied <b>double</b> value.\nHowever, as doubles are encoded in <i>IEEE 754 64-bit double-precision binary floating-point</i> format, the exact value could be unexpected.\n<p>\nFor example <code><b>new</b> BigDecimal(0.1)</code> yields a <b>BigDecimal</b> whose value is\n<small><code>0.1000000000000000055511151231257827021181583404541015625</code></small>,\nwhich is the nearest number to 0.1 representable as a double.\nTo get a <b>BigDecimal</b> which stores the same value as written in the source code,\nuse either <code><b>new</b> BigDecimal(\"0.1\")</code> or <code>BigDecimal.valueOf(0.1)</code>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalMethodWithoutRoundingCalled",
          "displayName": "Call to 'BigDecimal' method without a rounding mode argument",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <b>divide()</b> or <b>setScale()</b> without a rounding mode argument.\nSuch calls can lead to an <b>ArithmeticException</b> when the exact value cannot be represented in the result\n(e.g. because it has a non-terminating decimal expansion).\nSpecifying a rounding mode prevents the <b>ArithmeticException</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ConstantMathCall",
          "displayName": "Constant call to 'java.lang.Math'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>java.lang.Math</b> or\n<b>java.lang.StrictMath</b> methods which can be determined\nto be simple compile-time constants.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "NonReproducibleMathCall",
          "displayName": "Non-reproducible call to 'java.lang.Math'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>java.lang.Math</b> methods\nwhose results are not guaranteed to be precisely reproducible.  In environments\nwhere reproducibility of results are needed, <b>java.lang.StrictMath</b>\nshould be used instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UnaryPlus",
          "displayName": "Unary plus",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of the unary <b>+</b> operator. Unary plus is usually a null operation, and\nits presence may represent a coding error.\nParticularly in combination with the increment operator, <b>+++</b>, or the equals operator, <b>=+</b>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report when an unary plus is used together with a binary or another unary expression.\nThis means the inspection won't warn when an unary plus expression is used for example as a method argument, or in an array\ninitializer expression. In such cases it is much less confusing.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BadOddness",
          "displayName": "Suspicious test for oddness",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any checks for oddness of the form:\n<code><pre>x % 2 == 1</pre></code>\nSuch checks will fail for negative odd values, which is probably not the behaviour intended. Consider using:\n<code><pre>x % 2 != 0</pre></code> or: <code><pre>(x & 1) == 1</pre></code> instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitNumericConversion",
          "displayName": "Implicit numeric conversion",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports implicit conversion between numeric types.\nImplicit numeric conversion is not a problem in itself, but if unexpected may be a source\nof difficult to trace bugs.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below if you wish this inspection to ignore implicit conversion which\ncan not result in loss of data (e.g.\n<b>int</b>-><b>long</b>).\n<p>Use the second checkbox to indicate that this inspection should ignore conversion from\nand to <b>char</b>. Conversion from floating point to <b>char</b> and vice versa will still be reported.\n<p>Use the third checkbox to let this inspection ignore conversion from literals and\ncompile time constants.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LongLiteralsEndingWithLowercaseL",
          "displayName": "'long' literal ending with 'l' instead of 'L'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports long literals ending with lowercase 'l'. These\nliterals may be confusing, as lowercase 'l' looks very similar to '1'.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousLiteralUnderscore",
          "displayName": "Suspicious underscore in number literal",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports number literals that use underscores where the groups are not three digits each.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingFloatingPointLiteral",
          "displayName": "Confusing floating-point literal",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any floating point numbers which do not have a decimal point, numbers before the decimal point,\nand numbers after the decimal point. Such literals may be confusing, and violate several coding standards.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore floating point numbers in scientific notation.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IntegerDivisionInFloatingPointContext",
          "displayName": "Integer division in floating point context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports integer division where the\nresult is either directly or indirectly used as a floating point number.\nSuch division is often an error, and may result in unexpected results\ndue to the truncation that happens in integer division.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessArithmeticExpression",
          "displayName": "Pointless arithmetic expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports pointless arithmetic expressions. Such expressions include adding or subtracting zero, \nmultiplying by zero or one and division by one. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n<p>\n  Example:\n</p>\n<pre>\n  int x = a - a; // redundant; can be replaced with 0\n  int y = a + 0; // redundant; can be replaced with a\n  double res = d / d; // redundant; can be replaced with 1.0\n</pre>\n<p>\n  Note that in rare cases, the suggested replacement might not be completely equivalent of the original code \n  for all possible inputs. E.g. the inspection suggests to replace <code>x / x</code> with <code>1</code>.\n  However, if <code>x</code> happens to be zero, the original code throws ArithmeticException or results in NaN.\n  Also, if <code>x</code> is NaN, then the result is also NaN. It's very unlikely that such a behavior is intended.\n</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports arithmetic expressions with too many terms. Such\nexpressions may be confusing and bug-prone.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "GrUnresolvedAccess",
          "displayName": "Access to unresolved expression",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n       Reports unresolved references\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDocCheck",
          "displayName": "GroovyDoc issues",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports unresolved references inside GroovyDoc.</body></html>\n"
        },
        {
          "shortName": "SecondUnsafeCall",
          "displayName": "Second unsafe call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis quick fix prevent possible <b>NullPointerException</b> during chain methods or properties call.\nE.g. <b>domain?.getZone().getName()</b> replaces by <b>domain?.getZone()?.getName()</b>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyLabeledStatement",
          "displayName": "Labeled statement inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports already used labels.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrNamedVariantLabels",
          "displayName": "Unresolved labels after @NamedVariant/@NamedParam/@NamedDelegate transformation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Detects unresolved argument labels in calls to methods annotated by @NamedVariant/@NamedParam/@NamedDelegate\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConstructorNamedArguments",
          "displayName": "Named arguments of constructor call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports named arguments of default class constructor call which don't correspond to properties of this class.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDivideByZero",
          "displayName": "Divide by zero",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports division by zero or remainder by zero.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAccessibility",
          "displayName": "Access to inaccessible element",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports all references which exceed access rights.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyInArgumentCheck",
          "displayName": "Incompatible 'in' argument types",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of membership operator which check items and containers of incompatible types.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNonShortCircuitBoolean",
          "displayName": "Non short-circuit boolean",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the non-short-circuit forms of boolean 'and' and 'or' ( <b>&</b>\nand <b>|</b> ). The non-short-circuit versions are occasionally useful, but\ntheir presence is often due to typos of the short-circuit forms ( <b>&&</b>\nand <b>||</b> ), and may lead to subtle bugs.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyRangeTypeCheck",
          "displayName": "Incorrect range arguments",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports types used in ranges that do not have a <b>next()</b> or <b>previous()</b> method\nor do not implement the <b>java.lang.Comparable</b> interface.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrAnnotationReferencingUnknownIdentifiers",
          "displayName": "Unknown identifier in 'includes' and 'excludes' attributes",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Detects unresolved identifiers in @TupleConstructor/@MapConstructor annotation attributes <code>includes</code> and <code>excludes</code>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyInfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b>, <b>while</b>, or <b>do</b> statements which\ncan only exit by throwing an exception. While such statements may be correct, they\nare often a symptom of coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInfiniteRecursion",
          "displayName": "Infinite recursion",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which must either recurse\ninfinitely or throw an exception. Methods reported by this inspection can not\nreturn normally.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrEqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <strong>.equals()</strong> and <strong>==</strong> operator usages \nwhere the target and argument are of incompatible types. \nWhile such a call might theoretically be useful, most likely it represents a bug.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports object allocation where the object allocated ignored.\nSuch allocation expressions are legal Groovy, but are usually either inadvertent, or\nevidence of a very odd object initialization strategy.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUntypedAccess",
          "displayName": "Access to untyped expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n       Reports the references whose type can't be determined by IntelliJ IDEA\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "NonStaticFinalLogger",
          "displayName": "Non-constant logger",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports logger fields on classes which are not declared <b>static</b> and <b>final</b>.\nEnsuring that every classes logger is effectively constant and bound to that class\nsimplifies the task of providing a unified logging implementation for an application. Interfaces,\nenumerations, annotations and inner classes are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nFields which have a type equal to one of the class names specified and which are not <b>static</b>\nand <b>final</b>, will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicMethodWithoutLogging",
          "displayName": "'public' method without logging",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any public method which does not contain a logging statement. This inspection does not report\nsimple getters and setters.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nPublic methods which do not contain a call to a method of a variable with the type of one of the classes specified,\n  will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutLogger",
          "displayName": "Class without logger",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which do not have a logger declared.\nEnsuring that every class has a dedicated logger is an important step in providing a unified logging\nimplementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nClasses which do not declare a field with the type of one of the classes specified, will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithMultipleLoggers",
          "displayName": "Class with multiple loggers",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which have multiple loggers declared.\nEnsuring that every class has a single dedicated logger is an important step in providing a unified logging\nimplementation for an application. Interfaces,\nenumerations, annotations, inner classes, and abstract classes are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nClasses which declare multiple fields which have the type of one of the classes specified, will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LoggerInitializedWithForeignClass",
          "displayName": "Logger initialized with foreign class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>Logger</b>s which are initialized with a class literal from a different class than the <b>Logger</b>\nis contained in.\n<!-- tooltip end -->\n<p>\nUse the table below to specify the logger factory classes and logger factory methods recognized by this inspection.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationArgumentToLogCall",
          "displayName": "Non-constant string concatenation as argument to logging call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as arguments to SLF4J and Log4j 2 logging methods.\nNon-constant concatenations will be evaluated at runtime even when the logging message is not logged; this can negatively impact performance.\nIt is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.\n<!-- tooltip end -->\n<p>\nUse the combobox below to ignore certain higher logging levels.\n</body>\n</html>"
        },
        {
          "shortName": "LogStatementGuardedByLogCondition",
          "displayName": "Logging call not guarded by log condition",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports logging calls with non-constant arguments which are not surrounded by a guard condition.\nThe evaluation of the arguments of a logging call can be expensive.\nSurrounding a logging call with a guard clause prevents that cost, when the logging\nis disabled for the level used by the logging statement. This is especially useful for the\nleast serious level (trace, debug, finest) of logging calls, because those are\nmost often disabled in a production environment.\n<!-- tooltip end -->\n<p>\nUse the text field below to specify the logger class name used.\n<p>\nUse the table to specify the logging methods this inspection should warn on, with the corresponding\nlog condition text.\n<p>\nUse the checkbox below to let this inspection flag all unguarded log calls, not only those with non-constant arguments.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "PlaceholderCountMatchesArgumentCount",
          "displayName": "Number of placeholders does not match number of arguments in logging call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports SLF4J or Log4j 2 logging calls where the number of {}-placeholders in the string literal argument\ndoes not match the number of other arguments to the logging call.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LoggingConditionDisagreesWithLogStatement",
          "displayName": "Log condition does not match logging call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <em>is log enabled for</em> conditions of if statements which\ndo not match the log level of the contained logging call.\n<p>\nFor example:\n<code><pre>\n<b>if</b> (logger.isTraceEnabled()) {\n    logger.debug(\"some log message\");\n}\n</pre></code>\n<p>This inspection understands the <i>java.util.logging</i>, <i>log4j</i>, <i>Log4j 2</i>, <i>Apache Commons Logging</i>\nand <i>SLF4J</i> logging frameworks.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JavaBeans issues",
      "inspections": [
        {
          "shortName": "SuspiciousGetterSetter",
          "displayName": "Suspicious getter/setter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious getter or setter methods.\nA getter or setter is suspicious if it accesses a different field than would be expected by its name.\n\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate the inspection should only warn when a field\nwith a name matching the getter or setter name is present in the class.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutConstructor",
          "displayName": "Class without constructor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without constructors. Some coding standards prohibit such classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldHasSetterButNoGetter",
          "displayName": "Field has setter but no getter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields which have a \"setter\" method but no \"getter\" method.\nWhile within the Java beans spec, such fields may be unnecessarily difficult to work with in\ncertain bean containers.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutNoArgConstructor",
          "displayName": "Class without no-arg constructor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without a no-argument constructor.\nSuch constructors are necessary in some contexts if a class is to be created reflexively.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate that this inspection should ignore classes which\ncontain no explicit constructors. These classes are provided a default no-argument constructor\nby the compiler.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PropertyValueSetToItself",
          "displayName": "Property value set to itself",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls on a setter with the value of the same object's getter.\nFor example: <code>bean.setPayerId(bean.getPayerId());</code>\nIn regular circumstances this code is a no-op and probably not what was intended.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Bean Validation",
      "inspections": [
        {
          "shortName": "ConstraintValidatorCreator",
          "displayName": "Constraint validator creator",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n\nThis inspection checks for valid ConstraintValidator and allow to run a quick fix for its creation\n</body>\n</html>"
        },
        {
          "shortName": "BvConfigDomInspection",
          "displayName": "Constraints configuration inspection",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nConfiguration issues\n</body>\n</html>"
        },
        {
          "shortName": "BvConstraintMappingsInspection",
          "displayName": "Constraints configuration inspection",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nMistakes in qualified names of classes and fields\n</body>\n</html>"
        },
        {
          "shortName": "MinMaxValuesInspection",
          "displayName": "Bean Validation 'min' and 'max' annotation values",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n\nThis inspection validates max and min values of different constraint annotations\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java EE",
      "inspections": [
        {
          "shortName": "WebProperties",
          "displayName": "Web.xml errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in descriptors that are used to deploy your\nWeb Module to a server:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        },
        {
          "shortName": "WebWarnings",
          "displayName": "Web.xml warnings",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<!--\n  ~ Copyright (c) 2000-2007 JetBrains s.r.o. All Rights Reserved.\n  -->\n\n<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in descriptors that are used to deploy your\nWeb Module to a server:\n\n<li>Duplicate welcome-file\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ServletWithoutMappingInspection",
          "displayName": "Servlet mapping inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if all servlets have mappings\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaeeApplicationDomInspection",
          "displayName": "Java EE application descriptor correctness",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in your application.xml used to deploy\nyour Java EE application to a server:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        },
        {
          "shortName": "MimeType",
          "displayName": "MIME type",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you control MIME type name validity.\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "GroovyPointlessArithmetic",
          "displayName": "Pointless arithmetic expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless arithmetic\nexpressions. Such expressions include adding or subtracting zero, multiplying by zero or one,\ndivision by one, and shift by zero. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyGStringKey",
          "displayName": "GString map key",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports statements which use a <b>GString</b> object as a key to map.\nIn general <b>GString</b> objects are mutable and probably should not be used as keys.\n<p>\nAlso, a <b>GString</b> entry cannot be accessed with a <b>java.lang.String</b> object with same value. Example:\n<br>\n<pre>\n    def map = [:]\n    <b>def</b> key = 'foo'\n    map &lt&lt [\"${key}\": 'bar']\n    <b>assert </b> map[key] == <b>null</b>\n</pre>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyNestedSwitch",
          "displayName": "Nested switch statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements that are nested inside other\n<b>switch</b> statements. Such nested switch statements are confusing, and may result in unexpected behaviour.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyOctalInteger",
          "displayName": "Octal integer",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports octal integer literals. Some coding standards prohibit the\nuse of octal literals, as they may be easily confused with decimal literals.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions with too many terms. Such\nexpressions may be confusing and bug-prone.\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum number of terms allowed in an boolean expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditional",
          "displayName": "Conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the ternary condition operator. Some coding standards prohibit the use of\nthe condition operator, in favor of <b>if-else</b> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyPointlessBoolean",
          "displayName": "Pointless boolean expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless or pointlessly\ncomplicated boolean expressions. Such expressions include <b>and</b>ing with true,\n<b>or</b>ing with false,\nequality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be\nthe result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrReassignedInClosureLocalVar",
          "displayName": "Local variable is reassigned in closure or anonymous class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables assigned to expression with different type inside of closure of anonymous class.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyNegatedConditional",
          "displayName": "Negated conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions whose conditions are negated.\nFlipping the order of the conditional expression branches will usually increase the clarity of such\nstatements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrPackage",
          "displayName": "Package mismatch",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports files with a declared package that does not match the package expected.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports arithmetic expressions with too many terms. Such\nexpressions may be confusing and bug-prone.\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrDeprecatedAPIUsage",
          "displayName": "Deprecated API inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of deprecated code.\n</body>\n</html>"
        },
        {
          "shortName": "ClashingGetters",
          "displayName": "Clashing getters",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\n  Assume you have two methods with signatures 'getX()' and 'isX()'. Both methods are getters for property 'x'. So the result of invoking\n  'foo.x' can be unexpected.\n  Reports methods which have such a problem.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNegatedIf",
          "displayName": "Negated if condition expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements\nwhich contain <b>else</b> branches and whose conditions are negated.\nFlipping the order of the <b>if</b> and <b>else</b>\nbranches will usually increase the clarity of such statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryQualifiedReference",
          "displayName": "Unnecessary qualified reference",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports fully qualified references which can be replaced with import.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyResultOfIncrementOrDecrementUsed",
          "displayName": "Result of increment or decrement used",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports increment or decrement expressions nested inside other expressions.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a\ngiven construct should do precisely one thing.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyStatementBody",
          "displayName": "Statement with empty body",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b>, <b>while</b>, <b>do</b> or <b>for</b> statements\nwith empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "ClashingTraitMethods",
          "displayName": "Clashing trait methods",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Assume you have two traits which contains methods with the same signatures e.g. 'foo()' and you create a class 'MyImplementor' implementing both these traits. So the result of invoking\n  'new MyImplementor().foo()' can be unexpected.\n  Reports classes which have such a problem.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedConditional",
          "displayName": "Nested conditional expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions that are nested inside other\nconditional expressions.  Such nested conditionals may be very confusing.  \"Elvis\" expressions are counted as conditionals\nfor purpose of this inspection.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyDoubleNegation",
          "displayName": "Double negation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports double negation, for example: <b>if (!!functionCall())</b>\n</body>\n</html>\n"
        },
        {
          "shortName": "NewInstanceOfSingleton",
          "displayName": "New instance of class annotated with @groovy.lang.Singleton",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports new instance creation of classes annotated with <b>@groovy.lang.Singleton</b>.\nSuch constructions can lead to runtime exception \"Can't instantiate singleton\".\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JSP",
      "inspections": [
        {
          "shortName": "JspTagBodyContent",
          "displayName": "Tag body content type",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks JSP tag content body type\n</body>\n</html>"
        },
        {
          "shortName": "ReferencesToClassesFromDefaultPackagesInJSPFile",
          "displayName": "References to classes from the default package in JSP files",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to a classes from the default package in JSP files.\n<p>\n Such references will not be resolved during compilation of the JSP\n because a compiled class for the JSP will be usually placed in non-default package\n (e.g. \"org.apache.jsp\" in case of Tomcat, \"com.ibm._jsp\" in case of WebSphere)\n but the import from the default package is prohibited in Java.\n</body>\n</html>\n"
        },
        {
          "shortName": "ELValidationInJSP",
          "displayName": "EL Validation In JSP",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports possible EL problems, such as unresolved references and invalid EL locations.\n</body>\n</html>\n"
        },
        {
          "shortName": "ELMethodSignatureInspection",
          "displayName": "EL method signature inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks if method calls in EL match <code>method-signature</code> constraints in TLD files.\n</body>\n</html>\n"
        },
        {
          "shortName": "ELSpecValidationInJSP",
          "displayName": "JSP EL Specification Validation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports possible EL problems, caused by usage of nonstandard EL extensions e.g. usage of JSF EL\nexpressions outside attribute or using nonstandard EL expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "JspUnescapedEl",
          "displayName": "Unescaped EL Expressions",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nDetects unescaped EL in JSP pages that may lead to <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting\n  (XSS)</a> vulnerability. Provides fixes to wrap EL in JSTL \"out\" tag or mark this usage as safe.\n</body>\n</html>"
        },
        {
          "shortName": "JspDirectiveInspection",
          "displayName": "Jsp Directive Inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks if a JSP import directive has uri or tagdir attributes.\n</body>\n</html>\n"
        },
        {
          "shortName": "TaglibDomModelInspection",
          "displayName": "Tag Library Descriptor Inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nChecks tag library descriptors validity\n</body>\n</html>\n"
        },
        {
          "shortName": "JspAbsolutePathInspection",
          "displayName": "Absolute paths",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks using absolute paths in JSP files\n</body>\n</html>\n"
        },
        {
          "shortName": "ELDeferredExpressionsInspection",
          "displayName": "EL Deferred Expressions Inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports using dynamic expressions where deferred ones are required.\n</body>\n</html>\n"
        },
        {
          "shortName": "JspPropertiesInspection",
          "displayName": "Jsp Properties Inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks unresolved properties from <code>*.property</code> files.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnhandledExceptionInJSP",
          "displayName": "Unhandled Exception in JSP",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports exceptions that are thrown by top level JSP scriptlets.\n<br>\nFor example:\n<b>\n  <pre> &lt;% throw new Exception(); %&gt; </pre>\n</b>\n\n<p>\n\n  These JSPs are still compilable, since servlet container wraps all JSP code with <b>try {} catch() {}</b> statement,\n  but it is bound to produce runtime exception anyway when deployed on the server.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SelfIncludingJspFiles",
          "displayName": "Self-including JSP files",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nReports any include directives in a JSP file which refer to the containing JSP file.\n<p>\n Such self-including leads to infinite recursion and so the JSP file cannot be compiled.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "TestOnlyProblems",
          "displayName": "Test-only class or method call in production code",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of <b>@TestOnly</b> - or <b>@VisibleForTesting</b>\nannotated methods and classes in production code.\n<br> The problems are not reported if such method or class is referenced from\n<ul>\n  <li>code under 'Test Sources' folder\n  <li>a test-class (JUnit/TestNG)\n  <li>another <b>@TestOnly</b>-annotated method\n</ul>\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Test frameworks",
      "inspections": [
        {
          "shortName": "AssertWithoutMessage",
          "displayName": "Message missing on assertion",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>assertXXX()</b> or <b>fail()</b> methods that do not have an error message string argument.\nAn error message on assertion failure may help clarify the test case's intent.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantAssertArgument",
          "displayName": "Constant assert argument",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports constant arguments to assertTrue, assertFalse,\nassertNull and assertNotNull method calls. Calls to these methods with such\nconstant arguments will either always fail or always succeed.\nSuch statements can easily be left over after refactoring and are probably not intended.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MisorderedAssertEqualsArguments",
          "displayName": "Misordered 'assertEquals()' arguments",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>assertEquals()</b> which have the expected argument and the actual argument in the wrong order.\nFor JUnit 3 and JUnit 4 the correct order is <code>(expected, actual)</code>. For Junit 5 and TestNG the correct order is <code>(actual, expected)</code>\nSuch calls will behave fine for assertions which pass, but may give confusing error reports on failure.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableAssertion",
          "displayName": "Simplifiable assertion",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>assert</b> calls which can be replaced by simpler but equivalent calls.\n<table>\n  <tr><th>Example</th><th>&rarr;</th><th>Replacement</th></tr>\n\n  <tr>\n    <td><code>assertEquals(<b>true</b>, x());</code></td>\n    <td></td>\n    <td><code>assertTrue(x());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(y() != null);</code></td>\n    <td></td>\n    <td><code>assertNotNull(y());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(z == z());</code></td>\n    <td></td>\n    <td><code>assertSame(z, z());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(a.equals(a()));</code></td>\n    <td></td>\n    <td><code>assertEquals(a, a());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(<b>false</b>);</code></td>\n    <td></td>\n    <td><code>fail();</code></td>\n  </tr>\n</table>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertBetweenInconvertibleTypes",
          "displayName": "'assertEquals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to assertion methods with “expected” and “actual” arguments of incompatible types. Such calls often indicate that there is a bug.<br>\nThe inspection applies to the following methods:<br>\n<ul>\n  <li><b>org.junit.Assert.assertEquals(), org.junit.Assert.assertNotEquals()</b></li>\n  <li><b>org.junit.Assert.assertSame(), org.junit.Assert.assertNotSame()</b></li>\n  <li><b>org.assertj.core.api.Assert.isEqualTo(), org.assertj.core.api.Assert.isNotEqualTo()</b></li>\n  <li><b>org.assertj.core.api.Assert.isSameAs(), org.assertj.core.api.Assert.isNotSameAs()</b></li>\n</ul>\nThe <b>assertNotEquals()</b> and <b>isNotEqualTo()</b> methods are also reported,<br>\nhowever they are highlighted with a weak warning to take into account the case when the equals() contract is tested.\n<br><br>\nTest samples where <b>the warning is fired:</b><br>\n<code>assertEquals(\"1\", 1);</code><br>\n<code>assertNotSame(new int[0], 0);</code><br>\n<code>// weak warning, because of a possible false positive case</code><br>\n<code>assertThat(foo).as(\"user type\").isNotEqualTo(bar);</code><br>\n</body>\n</html>"
        },
        {
          "shortName": "MaskedAssertion",
          "displayName": "Assertion is masked via 'catch'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports assert statements and test framework assertions that are masked via catch blocks.\nSuch assertions will never fail, as the thrown AssertionError will be caught and silently ignored.\nExamples:<br>\n<code><pre>\nvoid javaAssertion() {\n  try {\n    ...\n    assert 1 == 2; // the assertion is silently ignored\n  } catch (AssertionError e) {}\n}\n</pre></code>\n<code><pre>\n@Test\nvoid testWithAssertJ() {\n  try {\n    ...\n    assertThat(1).as(\"test\").isEqualTo(2); // the assertion is silently ignored\n  } catch (AssertionError e) {}\n}\n</pre></code>\n<code><pre>\n@Test\nvoid testWithJunit() {\n  try {\n    ...\n    assertEquals(1, 2); // the assertion is silently ignored\n  } catch (AssertionError e) {}\n}\n</pre></code>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Style issues",
      "inspections": [
        {
          "shortName": "BooleanLiteralArgument",
          "displayName": "Boolean literal argument without parameter name",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports boolean literal arguments that could be named to remove ambiguity.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceCallWithBinaryOperator",
          "displayName": "Can be replaced with binary operator",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports function calls that can be replaced with binary operators, especially comparison-related.\nExample: <b>2.compareTo(1) > 0</b> can be replaced by <b>2 > 1</b>.\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousAsDynamic",
          "displayName": "Suspicious 'asDynamic' member invocation",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a suspicious <b>asDynamic</b> member invocation.\n</body>\n</html>"
        },
        {
          "shortName": "NestedLambdaShadowedImplicitParameter",
          "displayName": "Nested lambda has shadowed implicit parameter",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a nested lambda with shadowed implicit parameter.\n</body>\n</html>\n"
        },
        {
          "shortName": "MoveVariableDeclarationIntoWhen",
          "displayName": "Variable declaration could be moved inside `when`",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports the variable declaration that can be moved inside <code>when</code> expression.\n</body>\n</html>"
        },
        {
          "shortName": "MoveLambdaOutsideParentheses",
          "displayName": "Lambda argument inside parentheses",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects a lambda expression inside parentheses which can be moved outside of them.\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitThis",
          "displayName": "Implicit 'this'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports usages of implicit <b>this</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ProtectedInFinal",
          "displayName": "'protected' visibility is effectively 'private' in a final class",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>protected</b> visibility used inside of a non-inheritable class.\nIn such cases <b>protected</b> members are accessible only in the class itself, so they are effectively <b>private</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBeVal",
          "displayName": "Local 'var' is never modified and can be declared as 'val'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports mutable local variables (declared with a <b>var</b> keyword) that can be made immutable.\n</body>\n</html>\n"
        },
        {
          "shortName": "DirectUseOfResultType",
          "displayName": "Function returning Result directly",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports functions with <b>Result</b> result.\n\n<b>Result</b> should never be used as return type.\nThrow exception, or use nullable type, or use domain-specific result class to indicate failure.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertPairConstructorToToFunction",
          "displayName": "Convert Pair constructor to 'to' function",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a <b>Pair</b> constructor that can be converted to a <b>to</b> function call.\n</body>\n</html>\n"
        },
        {
          "shortName": "Destructure",
          "displayName": "Use destructuring declaration",
          "defaultSeverity": "INFO",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports declarations that can be destructured.\n</body>\n</html>\n"
        },
        {
          "shortName": "ObjectLiteralToLambda",
          "displayName": "Object literal can be converted to lambda",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports an anonymous object literal implementing a Java interface with a single abstract method that can be converted into a call with a lambda expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceGetOrSet",
          "displayName": "Explicit 'get' or 'set' call",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports explicit calls of <b>get</b> or <b>set</b> functions which can be replaced by an indexing operator <b>[]</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantAsSequence",
          "displayName": "Redundant 'asSequence' call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant 'asSequence()' call that can never have a positive performance effect.\n</body>\n</html>"
        },
        {
          "shortName": "MemberVisibilityCanBePrivate",
          "displayName": "Class member can have 'private' visibility",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceNegatedIsEmptyWithIsNotEmpty",
          "displayName": "Replace negated 'isEmpty'/'isBlank' with 'isNotEmpty'/'isNotBlank'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>!collection.isEmpty()/isNotEmpty()</b> or <b>!str.isBlank()/isNotBlank()</b> call can be replaced with <b>collection.isNotEmpty()/isEmpty()</b> or <b>str.isNotBlank()/isBlank()</b>.\n</body>\n</html>"
        },
        {
          "shortName": "LiftReturnOrAssignment",
          "displayName": "Return or assignment can be lifted out",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b>, <b>when</b> and <b>try</b> statements that can be converted to expressions\nby lifting a return or an assignment out. Typical example:\n<br /><br />\n\n<pre>\n<b>fun</b> foo(arg: Boolean): String {\n    <b>when</b> (arg) {\n        <b>true</b> -> <b>return</b> \"Truth\"\n        <b>false</b> -> <b>return</b> \"Falsehood\"\n    }\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "TrailingComma",
          "displayName": "Trailing comma recommendations",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports commas which have a different position from the one recommended in the style guide,\nand offers to reformat them.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceToStringWithStringTemplate",
          "displayName": "Replace 'toString' with string template",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <code>toString</code> function calls replaceable with string template.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableCall",
          "displayName": "Library function call could be simplified",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports library function calls which could be replaced by simplified one,\ne.g. <b>flatMap { it }</b> call could be simplified to <b>flatten()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaMapForEach",
          "displayName": "Java Map.forEach method call should be replaced with Kotlin's forEach",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a Java Map.<b>forEach</b> method call replaceable by Kotlin's <b>forEach</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceSizeCheckWithIsNotEmpty",
          "displayName": "Replace size check with 'isNotEmpty()'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects size checks of <b>Collections/Array/String</b> that should be replaced with <b>isNotEmpty()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "DeferredIsResult",
          "displayName": "Function returning Deferred directly",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports functions with <b>kotlinx.coroutines.Deferred</b> result.\n\nFunctions which use <b>Deferred</b> as return type should have a name with suffix <b>Async</b>.\nOtherwise, it's recommended to turn a function into a suspend function and unwrap <b>Deferred</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceArrayOfWithLiteral",
          "displayName": "'arrayOf' call can be replaced with array literal [...]",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>arrayOf</b> calls that can be replaced with array literals <b>[...]</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceRangeStartEndInclusiveWithFirstLast",
          "displayName": "Replace Range 'start' or 'endInclusive' with 'first' or 'last'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports usages of <b>boxed</b> <code>Range.start</code> and <code>Range.endInclusive</code> properties.\nThese properties can be replaced with <b>unboxed</b> <code>first</code> and <code>last</code> properties.\nExample: <b>range.start</b> can be replaced with <b>range.first</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplacePutWithAssignment",
          "displayName": "'map.put()' can be converted to assignment",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>map.put</b> function calls replaceable with the indexing operator (<b>[]</b>).\n</body>\n</html>"
        },
        {
          "shortName": "RedundantElseInIf",
          "displayName": "Redundant 'else' in 'if'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant <b>else</b> in <b>if</b> with <b>return</b>:\n\n<pre>\nfun foo(arg: Boolean): Int {\n    if (arg) return 0\n    // This else is redundant, code in braces could be just shifted left\n    else {\n        ...\n    }\n}\n</pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "FoldInitializerAndIfToElvis",
          "displayName": "If-Null return/break/... foldable to '?:'",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports an <b>if</b> expression checking variable being null or not right after initializing it that can be converted into an elvis operator in the initializer.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceStringFormatWithLiteral",
          "displayName": "Replace with string templates",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>String.format</b> call can be replaced with string templates.\n</body>\n</html>\n"
        },
        {
          "shortName": "MayBeConstant",
          "displayName": "Might be 'const'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports an object and a top-level <b>val</b> that might be declared as <b>const</b>\nfor better performance and Java interoperability.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceAssertBooleanWithAssertEquality",
          "displayName": "Replace assert boolean with assert equality",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports assert boolean function calls replaceable with assert equality function.\nExample: <b>assertTrue(a == b)</b> can be replaced by <b>assertEquals(a, b)</b>.\n</body>\n</html>"
        },
        {
          "shortName": "UseWithIndex",
          "displayName": "Manually incremented index variable can be replaced with use of 'withIndex()'",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>for</b> loops with a manually incremented index variable that can be replaced with the use of a <b>withIndex()</b> function.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceAssociateFunction",
          "displayName": "Replace 'associate' with 'associateBy' or 'associateWith'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>associate</b> calls that can be replaced with <b>associateBy</b> or <b>associateWith</b>.\n</body>\n</html>"
        },
        {
          "shortName": "LoopToCallChain",
          "displayName": "Loop can be replaced with stdlib operations",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>for</b> loops that can be replaced with a sequence of stdlib operations (like <b>map</b>, <b>filter</b>, etc).\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceNotNullAssertionWithElvisReturn",
          "displayName": "Replace '!!' with '?: return'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports not-null assertion (<b>!!</b>) calls that can be replaced with elvis and return (<b>?: return</b>). For example:\n<br /><br />\n<pre>\nval number: Int? = 42\nfun foo() {\n    val a = number!! // Replace '!!' with '?: return'\n    println(1 + a)\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceManualRangeWithIndicesCalls",
          "displayName": "Convert manual ranges to indices or iteration over collection",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>until</b> and <b>..</b> operator usages that are replaceable with <b>Collection.indices</b>\nor iteration over collection inside <b>for</b> loop.</body>\n</html>"
        },
        {
          "shortName": "SafeCastWithReturn",
          "displayName": "Safe cast with 'return' should be replaced with 'if' type check",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports safe cast with 'return' should be replaced with 'if' type check. For example:\n<br /><br />\n<pre>\nfun test(x: Any) {\n    <b>x as? String ?: return</b> // Should be replaced with '<b>if (x !is String) return</b>'\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "Reformat",
          "displayName": "File is not formatted according to project settings",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports places that are not formatted according to project settings.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyAssertNotNull",
          "displayName": "‘assert’ call can be replaced with ‘!!’ or ‘?:'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects <b>assert</b> calls checking that a variable declared above has a non-null value.\nSuch asserts can be replaced with a use of <b>!!</b> or <b>?:</b> operator in the variable initializer.\n</body>\n</html>\n"
        },
        {
          "shortName": "MapGetWithNotNullAssertionOperator",
          "displayName": "'map.get()' with not-null assertion operator (!!)",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>map.get()!!</b> that can be replaced with <b>map.getValue()</b>, <b>map.getOrElse()</b>, etc.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceSizeZeroCheckWithIsEmpty",
          "displayName": "Replace size zero check with 'isEmpty()'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects <b>size == 0</b> checks of <b>Collections/Array/String</b> that should be replaced with <b>isEmpty()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "CopyWithoutNamedArguments",
          "displayName": "'copy' method of data class is called without named arguments",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls to a data class' <b>copy</b> method without named arguments.\n</body>\n</html>\n"
        },
        {
          "shortName": "IfThenToElvis",
          "displayName": "If-Then foldable to '?:'",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>if-then</b> expressions that can be folded into elvis (<b>?:</b>) expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyNegatedBinaryExpression",
          "displayName": "Negated boolean expression that can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports negated binary expressions that can be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertTwoComparisonsToRangeCheck",
          "displayName": "Two comparisons should be converted to a range check",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports two consecutive comparisons which can be converted to a range check.\n</body>\n</html>"
        },
        {
          "shortName": "JavaCollectionsStaticMethod",
          "displayName": "Java Collections static method call can be replaced with Kotlin stdlib",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a Java <b>Collections</b> static method call replaceable by Kotlin stdlib, e.g. <b>Collections.sort(list)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithDropLast",
          "displayName": "Replace 'substring' call with 'dropLast' call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(0, s.length - x)</b> replaceable with <b>s.dropLast(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifiableCallChain",
          "displayName": "Call chain on collection type can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports two-call chains replaceable by a single call, e.g. <b>map {}.filterNotNull()</b> to <b>mapNotNull {}</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertReferenceToLambda",
          "displayName": "Can be replaced with lambda",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a function reference expression that can be replaced with a lambda.\n</body>\n</html>\n"
        },
        {
          "shortName": "IfThenToSafeAccess",
          "displayName": "If-Then foldable to '?.'",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>if-then</b> expressions that can be folded into safe-access (<b>?.</b>) expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "SortModifiers",
          "displayName": "Non-canonical modifier order",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports modifiers which have a different order from the one recommended in the style guide,\nand offers to reorder them.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertTryFinallyToUseCall",
          "displayName": "Convert try / finally to use() call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a <b>try-finally</b> block with <b>resource.close()</b> in <b>finally</b> which can be converted to a <b>resource.use()</b> call.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantRunCatching",
          "displayName": "Redundant 'runCatching' call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>runCatching</b> call that is immediately followed by <b>getOrThrow</b>.\nSuch a call can be replaced with just <b>run</b> call.\n</body>\n</html>"
        },
        {
          "shortName": "NullableBooleanElvis",
          "displayName": "Equality check can be used instead of elvis for nullable boolean check",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports when an equality check should be used instead of the elvis operator.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertSecondaryConstructorToPrimary",
          "displayName": "Convert to primary constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a secondary constructor that can be replaced with a more concise primary constructor.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceRangeToWithUntil",
          "displayName": "'rangeTo' or the '..' call can be replaced with 'until'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls to <b>rangeTo</b> or the <b>..</b> operator instead of calls to <b>until</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithTake",
          "displayName": "Replace 'substring' call with 'take' call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(0, x)</b> replaceable with <b>s.take(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyBooleanWithConstants",
          "displayName": "Boolean expression that can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports boolean expressions that have parts which can be reduced to constants.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantObjectTypeCheck",
          "displayName": "Redundant type checks for object",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant type checks for an object.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceSubstringWithSubstringBefore",
          "displayName": "Replace 'substring' call with 'substringBefore' call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(0, s.indexOf(x))</b> replaceable with <b>s.substringBefore(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "IntroduceWhenSubject",
          "displayName": "'when' that can be simplified by introducing an argument",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a <b>when</b> expression that can be simplified by introducing a subject argument.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertLambdaToReference",
          "displayName": "Can be replaced with function reference",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a lambda (function literal) expression that can be replaced with a function reference expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnlabeledReturnInsideLambda",
          "displayName": "Unlabeled return inside lambda",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unlabeled <b>return</b> inside lambda.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithIndexingOperation",
          "displayName": "Replace 'substring' call with indexing operation call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>\"abc\".substring(0, 1)</b> replaceable with <b>\"abc\"[0]</b>.\n</body>\n</html>"
        },
        {
          "shortName": "CascadeIf",
          "displayName": "Cascade if can be replaced with when",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b> statements with three or more branches that can be replaced with a <b>when</b> expression.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceToWithInfixForm",
          "displayName": "Replace ’to’ with infix form",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>to</b> function calls replaceable with the infix form.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceJavaStaticMethodWithKotlinAnalog",
          "displayName": "Replace Java static method with Kotlin analog",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a Java static method call replaceable by a Kotlin function, e.g. <b>System.out.println()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertCallChainIntoSequence",
          "displayName": "Call chain on collection could be converted into 'Sequence' to improve performance",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports call chain on collection should be converted into <b>Sequence</b>.\n</body>\n</html>"
        },
        {
          "shortName": "JoinDeclarationAndAssignment",
          "displayName": "Join declaration and assignment",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports property declarations that can be joined with the following assignment.\n</body>\n</html>\n"
        },
        {
          "shortName": "ScopeFunctionConversion",
          "displayName": "Scope function can be converted to another one",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection provides actions for converting scope functions (<b>let</b>, <b>run</b>, <b>apply</b>, <b>also</b>) between each other.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyNestedEachInScopeFunction",
          "displayName": "Scope function with nested forEach can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects iterate functions in scope functions that can be simplified to <b>onEach</b>.\n</body>\n</html>"
        },
        {
          "shortName": "OptionalExpectation",
          "displayName": "Optionally expected annotation has no actual annotation",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis special inspection reports optionally expected annotations without actual annotation in some platform modules.\n</body>\n</html>"
        },
        {
          "shortName": "UsePropertyAccessSyntax",
          "displayName": "Accessor call that can be replaced with property access syntax",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls to Java <b>get</b> and <b>set</b> methods that can be replaced with the use of Kotlin synthetic properties.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithSubstringAfter",
          "displayName": "Replace 'substring' call with 'substringAfter' call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(s.indexOf(x))</b> replaceable with <b>s.substringAfter(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedMainParameter",
          "displayName": "Main parameter is not necessary",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports an unused main function parameter which is not necessary since Kotlin 1.3.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceCollectionCountWithSize",
          "displayName": "Collection count can be converted to size",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of collection <code>count()</code>. These function calls can be replaced with <code>size</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionWithLambdaExpressionBody",
          "displayName": "Function with `= { ... }` and inferred return type",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports function with `<b>= { ... }</b>` and inferred return type.\n\n<pre>\nfun sum(a: Int, b: Int) = { a + b } // The return type of this function is '() -> Int'.\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceWithOperatorAssignment",
          "displayName": "Assignment that can be replaced with operator assignment",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports modifications of variables with a simple assignment (such as <b>y = y + x</b>)\nthat can be replaced with an operator assignment.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceGuardClauseWithFunctionCall",
          "displayName": "Replace guard clause with kotlin's function call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports guard clause that can be replaced with kotlin's function call. For example:\n<br /><br />\n<pre>\nfun test(foo: Int?) {\n    if (foo == null) throw IllegalArgumentException(\"foo\") // Replace guard clause with kotlin's function call\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "AddOperatorModifier",
          "displayName": "Function should have 'operator' modifier",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a function that matches one of the operator conventions but is not annotated as <b>operator</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertToStringTemplate",
          "displayName": "String concatenation that can be converted to string template",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports string concatenation that can be converted to a simple string template (the one with no <b>${...}</b> entries).\n</body>\n</html>\n"
        },
        {
          "shortName": "AddVarianceModifier",
          "displayName": "Type parameter can have 'in' or 'out' variance",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports type parameters that can have an <b>in</b> or <b>out</b> variance.\nUsage of <b>in</b> and <b>out</b> variances leads to more precise type inference in Kotlin.\n</body>\n</html>\n"
        },
        {
          "shortName": "UseExpressionBody",
          "displayName": "Expression body syntax is preferable here",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports returns (one-liners or <b>when</b>s) replaceable by expression body syntax.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantAsync",
          "displayName": "Redundant 'async' call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>async</b> call that is immediately followed by <b>await</b>.\nSuch a call can be replaced with a kind of blocking call.\n</body>\n</html>"
        },
        {
          "shortName": "RemoveEmptyParenthesesFromAnnotationEntry",
          "displayName": "Remove unnecessary parentheses",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unnecessary parentheses in annotation entries. For example:\n<br /><br />\n<pre>\nannotation class MyAnnotation\n\n@MyAnnotation<b>()</b> // There parentheses can be omitted\nfun test() {\n\n}\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Velocity",
      "inspections": [
        {
          "shortName": "VtlReferencesInspection",
          "displayName": "References inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that Velocity references are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "VtlTypesInspection",
          "displayName": "Types inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that binary and unary expressions have operands with correct types\n</body>\n</html>"
        },
        {
          "shortName": "VtlFileReferencesInspection",
          "displayName": "File references inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that Velocity file references (in #include and #parse directives) are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "VtlInterpolationsInspection",
          "displayName": "Well-formedness inspection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports about illegal usages of formal notation within #macro and #set directives\n</body>\n</html>"
        },
        {
          "shortName": "VtlDirectiveArgsInspection",
          "displayName": "Directive arguments inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports about illegal values or types of arguments of Velocity directives\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "MongoJS",
      "inspections": [
        {
          "shortName": "MongoJSDeprecationInspection",
          "displayName": "Deprecated element",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of deprecated elements.\n</body>\n</html>"
        },
        {
          "shortName": "MongoJSSideEffectsInspection",
          "displayName": "Statement with side effects",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection only runs during a read-only connection to MongoDB\nand reports statements that may may cause side effects.\n</body>\n</html>"
        },
        {
          "shortName": "MongoJSResolveInspection",
          "displayName": "Resolution problems",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports problems related to MongoJS reference resolution\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "PHP strict standards",
      "inspections": [
        {
          "shortName": "PhpAbstractStaticMethodInspection",
          "displayName": "Static function should not be abstract",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the static methods that are declared as abstract.\n</body>\n</html>"
        },
        {
          "shortName": "PhpSignatureMismatchDuringInheritanceInspection",
          "displayName": "Declaration of overridden method should be compatible with parent class",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the overridden methods declarations that are not compatible with the parent class. The inspection is enabled only for PHP language level lower than 8.0.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "GroovyUnreachableStatement",
          "displayName": "Unreachable statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports statements that are unreachable.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyDuplicateSwitchBranch",
          "displayName": "Duplicate switch case",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicated <b>case</b> expressions in <b>switch</b>\nstatements.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Spring Data",
      "inspections": [
        {
          "shortName": "SpringDataRepositoryMethodReturnTypeInspection",
          "displayName": "Spring Data repository method return type errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSpring Data Repository Method Return Types errors.<br><br>\n\nThe following table lists the return types generally supported by Spring Data repositories.<br>\n<table border=\"3\" >\n   <tr>\n     <td><strong>Return type</strong></td>\n     <td><strong>Description</strong></td>\n  </tr>\n  <tr>\n    <td><p><code>void</code></p></td>\n    <td><p>Denotes no return value.</p></td>\n  </tr>\n  <tr>\n    <td><p>Primitives</p></td>\n    <td><p>Java primitives.</p></td>\n  </tr>\n  <tr>\n    <td><p>Wrapper types</p></td>\n    <td><p>Java wrapper types.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>T</code></p></td>\n    <td><p>An unique entity. Expects the query method to return one result at most. In case no result is found <code>null</code> is returned. More than one result will trigger an <code>IncorrectResultSizeDataAccessException</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Iterator&lt;T&gt;</code></p></td>\n    <td><p>An <code>Iterator</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Collection&lt;T&gt;</code></p></td>\n    <td><p>A <code>Collection</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>List&lt;T&gt;</code></p></td>\n    <td><p>A <code>List</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Optional&lt;T&gt;</code></p></td>\n    <td><p>A Java 8 or Guava <code>Optional</code>. Expects the query method to return one result at most. In case no result is found <code>Optional.empty()</code>/<code>Optional.absent()</code> is returned. More than one result will trigger an <code>IncorrectResultSizeDataAccessException</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Option&lt;T&gt;</code></p></td>\n    <td><p>An either Scala or JavaSlang <code>Option</code> type. Semantically same behavior as Java 8&#8217;s <code>Optional</code> described above.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Stream&lt;T&gt;</code></p></td>\n    <td><p>A Java 8 <code>Stream</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Future&lt;T&gt;</code></p></td>\n    <td><p>A <code>Future</code>. Expects method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability enabled.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>CompletableFuture&lt;T&gt;</code></p></td>\n    <td><p>A Java 8 <code>CompletableFuture</code>. Expects method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability enabled.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>ListenableFuture</code></p></td>\n    <td><p>A <code>org.springframework.util.concurrent.ListenableFuture</code>. Expects method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability enabled.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Slice</code></p></td>\n    <td><p>A sized chunk of data with information whether there is more data available. Requires a <code>Pageable</code> method parameter.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Page&lt;T&gt;</code></p></td>\n    <td><p>A <code>Slice</code> with additional information, e.g. the total number of results. Requires a <code>Pageable</code> method parameter.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>GeoResult&lt;T&gt;</code></p></td>\n    <td><p>A result entry with additional information, e.g. distance to a reference location.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>GeoResults&lt;T&gt;</code></p></td>\n    <td><p>A list of <code>GeoResult&lt;T&gt;</code> with additional information, e.g. average distance to a reference location.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>GeoPage&lt;T&gt;</code></p></td>\n    <td><p>A <code>Page</code> with <code>GeoResult&lt;T&gt;</code>, e.g. average distance to a reference location.</p></td>\n  </tr>\n  </tbody>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "SpringDataMethodInconsistencyInspection",
          "displayName": "Spring Data repository method errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSpring Data Repository Method errors.\n</body>\n</html>"
        },
        {
          "shortName": "SpringDataRepositoryMethodParametersInspection",
          "displayName": "Spring Data repository method parameters errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSpring Data Repository Method Parameters errors.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown HTML tag attribute",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights unknown HTML tag attributes as invalid, and lets mark such attributes as Custom to avoid highlighting them as\ninvalid. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Deprecated HTML tag",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights deprecated HTML tags and provides ability to replace them with CSS or with other tags for some of them. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports HTML elements without a closing tag.\nSome coding styles require a closing tag on HTML elements even where this is optional.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports XML/HTML tags with missing mandatory attributes.\nYou can specify attribute names that should not be reported.\n</body>\n</html>\n"
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "File reference problems",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks unresolved file references in HTML. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of <script> tag",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that the <b>script</b> tag content is valid XML. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Image size mismatch",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights <code>width</code> and <code>height</code> attribute values of <code>IMG</code> tag\nthat are different from the width and height of the original image. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty tags (like <b>script</b> ) that do not work in some browsers.\nThe validation works in html or jsp file types. <br>\n\n\n</body>\n</html>"
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag for HTML element",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection spots extra closing tag for the empty elements like IMG or BR. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Deprecated HTML attribute",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights attributes deprecated in HTML5.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational HTML tag",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights pure presentational HTML tags and provides the ability to replace them with CSS or with other tags. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown HTML tag",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights unknown HTML tags, and lets mark such tags as Custom to avoid highlighting them as unknown in future. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Unknown HTML boolean tag attribute",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights HTML non-boolean tag attributes without value as invalid, and lets mark such attributes as Custom to avoid highlighting them as\ninvalid.<br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Anchor reference problems",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks unresolved anchor references in HTML. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Non-existent web resource",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights links to non-existent web resources.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required 'alt' attribute",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>alt</code> attribute for the <code>applet</code> and <code>img</code> tags and the <code>area</code> elements of image maps (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\">H24</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H35.html\">H35</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\">H36</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\">H37</a>) and offers a quick-fix for adding the attribute. This attribute should provide a text alternative for the content of the tag. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required 'title' element",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>title</code> element inside the <code>head</code> section (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H25.html\">H25</a>) and offers a quick-fix for adding the tag. This title should describe the document.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required 'summary' attribute",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>summary</code> attribute for the <code>table</code> tag (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H73.html\">H73</a>) and offers a quick-fix for adding the summary.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required 'lang' attribute",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>lang</code> (or <code>xml:lang</code>) attribute for the <code>html</code> tag (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H57.html\">H57</a>) and offers a quick-fix for adding the attribute. This attribute should state the default language of a document.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights form elements (<code>input</code>, <code>textarea</code>, and <code>select</code>) without required associated labels (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H44.html\">H44</a>) and offers a quick-fix for creating a new label.<br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required 'title' attribute",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights <code>frame</code>, <code>iframe</code>, <code>dl</code>, and <code>a</code> tags without required title attributes (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H33.html\">H33</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H40.html\">H40</a>, and <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H64.html\">H64</a>) and offers a quick-fix for adding a title.\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Method metrics",
      "inspections": [
        {
          "shortName": "MethodCoupling",
          "displayName": "Overly coupled method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which are highly coupled, i.e. that reference too many other classes.\nMethods with too high a coupling can be very fragile, and should probably be broken up. References to system classes\n(those in the <b>java.</b>or <b>javax.</b> packages), are not\ncounted for purposes of this inspection.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum coupling a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParametersPerConstructor",
          "displayName": "Constructor with too many parameters",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports constructors with too many parameters. Constructors\nwith too many parameters can be a good sign that refactoring is necessary, e.g. Replace Constructor with Builder.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of parameters a constructor is allowed to have.\n<p>\nUse the combobox below to specify if the inspection should ignore private, package-private & private or protected, package-private and\nprivate constructors\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CyclomaticComplexity",
          "displayName": "Overly complex method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that have too high a cyclomatic complexity. Cyclomatic\ncomplexity is basically a measurement of the number of branching points in a method. Methods with too high\na cyclomatic complexity may be confusing and difficult to test.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum cyclomatic complexity a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestingDepth",
          "displayName": "Overly nested method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose bodies are too deeply nested. Methods with too much statement\nnesting may be confusing, and are a good sign that refactoring may be necessary.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum nesting depth a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodWithMultipleLoops",
          "displayName": "Method with multiple loops",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods containing multiple loop statements.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreeNegationsPerMethod",
          "displayName": "Method with more than three negations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with three or more negation operations (<b>!</b> or <b>!=</b>).\nSuch methods may be unnecessarily confusing.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to disable this inspection within 'equals()' methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many <b>return</b> points. Methods with too many <b>return</b> points may be confusing,\nand hard to refactor. A <b>return</b> point is either a <b>return</b> statement or the falling through the bottom of a\n<b>void</b> method or constructor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of <b>return</b> points a method is allowed to have.\n<p>\nUse the first checkbox below to ignore guard clauses.\n<p>\nUse the second checkbox below to ignore <b>return</b> points inside <b>equals()</b> methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParametersPerMethod",
          "displayName": "Method with too many parameters",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary.\nMethods which have super methods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of parameters a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThrownExceptionsPerMethod",
          "displayName": "Method with too many exceptions declared",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are declared as throwing too many\ndifferent types of exceptions. Methods with too many exceptions declared\nare a good sign that your error handling code is getting overly complex.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of <b>throws</b> clauses a method might have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyLongLambda",
          "displayName": "Overly long lambda expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda expressions that are too long.\nLambda expressions that are too long\nmay be confusing, and it is often better to extract the statements into their own method.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of non-comment source statements a lambda expression is allowed to have.\n<p>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "NonCommentSourceStatements",
          "displayName": "Overly long method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that have too many statements. Methods that have too many statements\nmay be confusing, and are a good sign that refactoring is necessary.\nEmpty statements and comments are not counted. Only the contents of block statements are counted.\nThe initialization and update statements of a <b>for</b> loop are not counted.\n\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of non-comment source statements a method is allowed to have.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Memory",
      "inspections": [
        {
          "shortName": "UnnecessaryEmptyArrayUsage",
          "displayName": "Unnecessary zero length array usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on allocations of arrays with known lengths of zero when there is a constant for that in the class of array's type.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemGC",
          "displayName": "Calls to 'System.gc()' or 'Runtime.gc()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>System.gc()</b> or <b>Runtime.gc()</b>.\nWhile occasionally useful in testing, explicitly triggering garbage collection via <b>System.gc()</b> is almost always\na bad idea in production code, and can result in serious performance problems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferField",
          "displayName": "StringBuilder field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields with type\n<b>java.lang.StringBuffer</b> or <b>java.lang.StringBuilder</b>.\nStringBuffer fields can grow without limit, and are often the cause of\nmemory leaks.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ZeroLengthArrayInitialization",
          "displayName": "Zero-length array allocation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on allocations of arrays with known lengths of zero. Since array lengths in\nJava are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly\nallocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or\nfootprint. Note that this inspection does not report zero-length arrays allocated as static final fields,\nas it is assumed that those arrays are being used to implement array sharing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticCollection",
          "displayName": "Static collection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Collection</b> variables declared as <b>static</b>. While\nnot necessarily a problem, static collections are often causes of memory leaks, and are\ntherefore prohibited by some coding standards.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReturnOfInnerClass",
          "displayName": "Return of instance of anonymous, local or inner class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements returning an instance of an anonymous, local, or inner class.\nSuch instances keep an implicit reference to the outer instance.\nWhich means the instance can prevent the outer instance from being garbage collected.\nAny caller of a method which returns such an instance might cause a memory leak by holding on to the instance returned.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore returns from <b>protected</b> or package-private methods.\nReturns from <b>private</b> methods are always ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassMayBeStatic",
          "displayName": "Inner class may be 'static'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any inner classes which may safely be made <b>static</b>.\nAn inner class may be <b>static</b> if it doesn't reference its enclosing instance.\n<p>\nA <b>static</b> inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per instance of the class.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousInnerClassMayBeStatic",
          "displayName": "Anonymous class may be a named 'static' inner class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any anonymous classes which may safely be made into a named <b>static</b> inner class.\nAn anonymous class may be <b>static</b> if it doesn't explicitly reference its enclosing instance or local classes from its surrounding method.\n<p>\nA <b>static</b> inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per instance of the class.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Portability",
      "inspections": [
        {
          "shortName": "RuntimeExec",
          "displayName": "Call to 'Runtime.exec()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>Runtime.exec()</b> or any\nof its variants. Calls to <b>Runtime.exec()</b> are inherently unportable\nbetween operating systems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfJDBCDriverClass",
          "displayName": "Use of concrete JDBC driver class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of concrete JDBC driver classes. Use of such classes will\nbind your project to a specific database and driver, defeating the purpose of JDBC and\nresulting in loss of portability.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfAWTPeerClass",
          "displayName": "Use of AWT peer class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of concrete AWT peer classes. Such classes represent\nnative windowing system widgets, and will be non-portable between different windowing\nsystems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfProcessBuilder",
          "displayName": "Use of 'java.lang.ProcessBuilder' class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of <b>java.lang.ProcessBuilder</b>.\nUses of <b>ProcessBuilder</b> are inherently unportable between operating systems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NativeMethods",
          "displayName": "Native method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods declared <b>native</b>. Native methods are inherently unportable.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "HardcodedFileSeparators",
          "displayName": "Hardcoded file separator",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the forward (/) or backward (\\) slash in a string or\ncharacter literal. These characters are commonly used as file separators, and portability may suffer if their use is hardcoded.\nThis will not report backward slash inside escape sequences, or forward slash immediately following a '&lt;' character,\nor immediately preceding a '&gt;' character, as those often indicate XML or HTML tags rather than file names,\nstrings representing a <b>java.util.TimeZone</b> ID, strings that are a valid regular expression or strings that equal an IANA-registered MIME media type.\n<p>\nNormally, usage of the <b>example/*</b> MIME media type outside of an example (<em>e.g.</em> in a <b>Content-Type</b>\nheader) is an error.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to include <b>example/*</b> in the set of recognized media types.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfSunClasses",
          "displayName": "Use of sun.* classes",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of classes from the <b><i>sun.*</i></b> hierarchy.\nSuch classes are non-portable between different JVM's.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemExit",
          "displayName": "Call to 'System.exit()' or related methods",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>System.exit()</b>,\n<b>Runtime.exit()</b>, or <b>Runtime.halt()</b>.\nCalls to these methods make the calling code unportable to most application servers.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore calls in main methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemGetenv",
          "displayName": "Call to 'System.getenv()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>System.getenv()</b>.\nCalls to <b>System.getenv()</b> are inherently unportable.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "HardcodedLineSeparators",
          "displayName": "Hardcoded line separator",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the newline (<b>\\n</b>) or return (<b>\\r</b>) characters in a string or\ncharacter literal. These characters are commonly used as line separators, and portability may suffer if they are hardcoded.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Web services",
      "inspections": [
        {
          "shortName": "EmptyWebServiceClass",
          "displayName": "Empty WebService class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Java web service <b>class</b> to have at least one web service method.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "OneWayWebMethod",
          "displayName": "Oneway web service operation",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nChecks oneway Java web service <b>method</b> to have void return type.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "NonJaxWsWebServices",
          "displayName": "Report non JAX-WS web services",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non JaxWS complaint web service <b>classes</b> .\nThe inspection works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "WSReferenceInspection",
          "displayName": "Can't resolve",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nWeb Services inspections.\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitlyExposedWebServiceMethods",
          "displayName": "Report implicitly exposed web methods",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports web service <b>methods</b> exposed implicitly.\nThe inspection works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "ValidExternallyBoundObject",
          "displayName": "Valid externally bound object",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Java <b>class</b> used as web service or for reading / writing xml data (e.g. web service parameter class)\nto be instantiatable.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Security",
      "inspections": [
        {
          "shortName": "NonStaticInnerClassInSecureContext",
          "displayName": "Non-'static' inner class in secure context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>static</b> inner classes.\nCompilation of such classes causes the creation of hidden, package-visible methods on the parent class, which may\ncompromise security.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalClone",
          "displayName": "Non-final 'clone()' in secure context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods which\nare not declared <b>final</b>. Since <b>clone()</b> may\nbe used to instantiate objects without using a constructor, allowing the <b>clone()</b>\nmethod to be overridden may result in corrupted objects, and possible security\nexploits. This may be prevented by making the <b>clone()</b>\nmethod <b>final</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnsecureRandomNumberGeneration",
          "displayName": "Insecure random number generation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.lang.Random</b> or\n<b>java.lang.math.Random()</b>. In secure environments,\n<b>java.secure.SecureRandom</b> is a better choice, offering cryptographically secure\nrandom number generation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemSetSecurityManager",
          "displayName": "Call to 'System.setSecurityManager()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>System.setSecurityManager()</b>.\nWhile often benign, any call to <b>System.setSecurityManager()</b> should be closely examined in any security audit.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RuntimeExecWithNonConstantString",
          "displayName": "Call to 'Runtime.exec()' with non-constant string",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Runtime.exec()</b> or any\nof its variants which take a dynamically-constructed string as the command to execute.\nConstructed execution strings are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String COMMAND =\n  \"ping \" + getDomainFromUserInput() + \"'\";</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SystemProperties",
          "displayName": "Access of system properties",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any accesses of the System properties. While accessing the\nSystem properties is not a security risk in it self, it is often found in malicious code.\nAccesses to System properties should be closely examined in any security audit.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassLoaderInstantiation",
          "displayName": "ClassLoader instantiation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.lang.ClassLoader</b> objects.\nWhile often benign, any instantiations to <b>ClassLoader</b> should be closely examined in any security audit.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CustomSecurityManager",
          "displayName": "Custom SecurityManager",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any user-defined subclasses of <b>java.lang.SecurityManager</b>.\nWhile not necessarily representing a security hole, such classes should be thoroughly\nand professionally inspected for possible security issues.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DesignForExtension",
          "displayName": "Design for extension",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods which are not <b>static</b>,\n<b>private</b>, <b>final</b> or <b>abstract</b>,\nand whose bodies are not empty. Coding in a style that avoids such methods protects\nthe contracts of classes from being broken by their subclasses. The benefit of this style is that\nsubclasses cannot corrupt the state of the superclass by forgetting to call the super method.\nThe cost is that subclasses are limited in their flexibility, in particular they cannot prevent\nexecution of code in the superclass.\n<p>\nThis inspection is intended for code to be used in secure environments, and is probably not\nappropriate for less restrictive environments.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JDBCExecuteWithNonConstantString",
          "displayName": "Call to 'Statement.execute()' with non-constant string",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.sql.Statement.execute()</b>, or any\nof its variants, which take a dynamically-constructed string as the query to execute.\nConstructed SQL statements are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String SQL =\n  \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JDBCPrepareStatementWithNonConstantString",
          "displayName": "Call to 'Connection.prepare*()' with non-constant string",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.sql.Connection.prepareStatement()</b>,\n<b>java.sql.Connection.prepareCall()</b>, or any\nof their variants, which take a dynamically-constructed string as the statement to prepare.\nConstructed SQL statements are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String SQL =\n  \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LoadLibraryWithNonConstantString",
          "displayName": "Call to 'System.loadLibrary()' with non-constant string",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.System.loadLibrary()</b>, <b>java.lang.System.load()</b>, <b>java.lang.Runtime.loadLibrary()</b>\nand <b>java.lang.Runtime.load()</b>\nwhich take a dynamically-constructed string as the name of the library.\nConstructed library name strings are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String LIBRARY = getUserInput();</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CustomClassloader",
          "displayName": "Custom ClassLoader",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any user-defined subclasses of <b>java.lang.ClassLoader</b>.\nWhile not necessarily representing a security hole, such classes should be thoroughly\nand professionally inspected for possible security issues.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicStaticArrayField",
          "displayName": "'public static' array field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> <b>static</b> array fields. Often used\nto store arrays of constant values, these fields nonetheless represent a security\nhazard, as their contents may be modified, even if the field is declared as <b>final</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CloneableClassInSecureContext",
          "displayName": "Cloneable class in secure context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which may be cloned. A class\nmay be cloned if it supports the <b>Cloneable</b> interface,\nand its <b>clone()</b> method is not defined to immediately\nthrow an error. Cloneable classes may be dangerous in code intended for secure use.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableDeserializableClassInSecureContext",
          "displayName": "Serializable class in secure context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which may be serialized or deserialized. A class\nmay be serialized if it supports the <b>Serializable</b> interface,\nand its <b>readObject()</b> and <b>writeObject()</b> methods are not defined to always\nthrow an exception. Serializable classes may be dangerous in code intended for secure use.\n<!-- tooltip end -->\n<p>\n  Use the table below to specify what specific classes and their inheritors should be excluded\n  from being checked by this inspection. This is meant for those classes which, although they inherit\n  Serializable from a superclass, are not intended for serialization. Such classes would lead this\n  inspection to report unnecessarily. <br>\n  Note that it may be more secure to add <b>readObject()</b> and <b>writeObject()</b> methods which always throw an exception, instead.\n<p>\n  Use the checkbox below to ignore <b>Serializable</b> anonymous classes.\n<p>\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "PublicStaticCollectionField",
          "displayName": "'public static' collection field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports modifiable <b>public</b> <b>static</b> Collection fields. Often used\nto store collections of constant values, these fields nonetheless represent a security\nhazard, as their contents may be modified, even if the field is declared as <b>final</b>.\n<!-- tooltip end -->\n<p>\n  Use the table below to specify methods returning unmodifiable collections.\n  <b>public</b> <b>static</b> Collection fields initialized with these methods will not be reported.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 5",
      "inspections": [
        {
          "shortName": "MethodCanBeVariableArityMethod",
          "displayName": "Method can be varargs method",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with which can be converted to a variable arity method. Example:\n<pre>\n  void process(String name, Object[] objects);\n</pre>\nCan be converted to:\n<pre>\n  void process(String name, Object... objects);\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "WhileCanBeForeach",
          "displayName": "'while' loop replaceable with enhanced 'for' loop",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>while</b> loops which iterate\nover collections, and can be replaced with an enhanced <b>for</b> loop (i.e. foreach iteration syntax).\n<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->\nExample:\n<pre>\n  Iterator it = c.iterator();\n  while(it.hasNext()) {\n    Object obj = it.next();\n    System.out.println(obj);\n  }\n</pre>\nCan be replaced with:\n<pre>\n  for (Object obj : c) {\n    System.out.println(obj);\n  }\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CollectionsFieldAccessReplaceableByMethodCall",
          "displayName": "Collections.EMPTY_* field access replaceable with 'Collections.empty*()' method call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any access to the <b>java.util.Collections</b>\nfields <b>EMPTY_LIST</b>, <b>EMPTY_MAP</b>\nor <b>EMPTY_SET</b>. Those expressions can be replaced by method\ncalls to <b>emptyList()</b>,\n<b>emptyMap()</b> and <b>emptySet()</b>.\nSuch method calls prevent \"unchecked\" warnings by the compiler because the type parameters can be inferred.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryUnboxing",
          "displayName": "Unnecessary unboxing",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"unboxing\", e.g. explicit unwrapping of wrapped primitive values.\nUnboxing is unnecessary under Java 5 and newer, and can be safely removed.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report truly superfluous unboxing, where an unboxed value will immediately be implicitly or explicitly boxed.\nIn this case the entire unboxing-boxing step can be removed. Simple explicit unboxing will not be reported.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalLegacyMethod",
          "displayName": "'BigDecimal' legacy method called",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>divide()</b> or <b>setScale()</b> that use the old <b>int</b> constants for specifying the rounding mode.\nSince JDK 1.5 methods taking a <b>RoundingMode</b> <b>enum</b> parameter are available instead.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "RawUseOfParameterizedType",
          "displayName": "Raw use of parameterized class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of parameterized classes where the type parameters are omitted.\nSuch <i>raw</i> uses of parameterized types are valid in Java, but defeat the purpose of using\ntype parameters, and may mask bugs. This inspection mirrors the <i>rawtypes</i> warning of javac.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore the construction of objects of parameterized types.\n<p>\nUse the second checkbox below to ignore raw types in type casts.\n<p>\nUse the third checkbox to ignore raw types in places where parameterized types would not be compilable\n  (for example in array creation expressions or when overriding a library method)\n<p>\nUse the fourth checkbox to ignore raw types used in the parameters of methods overriding super methods.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferReplaceableByStringBuilder",
          "displayName": "'StringBuffer' may be 'StringBuilder'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any variables declared as <b>java.lang.StringBuffer</b> which may be\nmore efficiently declared as <b>java.lang.StringBuilder</b>.\n<b>java.lang.StringBuilder</b> is a non-thread-safe replacement for\n<b>java.lang.StringBuffer</b>, available in Java 5 and newer.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IndexOfReplaceableByContains",
          "displayName": "'String.indexOf()' expression is replaceable with 'contains()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any <b>String.indexOf()</b>\nexpressions which can be replaced with a call to the\n<b>String.contains()</b> method available in Java 5 and newer.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryBoxing",
          "displayName": "Unnecessary boxing",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports explicit boxing, i.e. wrapping of primitive values in objects.\nExplicit manual boxing is unnecessary under Java 5 and newer, and can be safely removed.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report truly superfluous boxing, where a boxed value will immediately be implicitly or explicitly unboxed.\nIn this case the entire boxing-unboxing step can be removed. Simple explicit boxing will not be reported.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "ForCanBeForeach",
          "displayName": "'for' loop replaceable with enhanced 'for' loop",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> loops which iterate\nover collections or arrays, and can be replaced with an enhanced <b>for</b> loop (i.e. the foreach iteration syntax).\n<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to find loops involving <b>list.get(index)</b> calls.\nThese loops generally can be replaced with an enhanced <b>for</b> loop, unless they modify underlying list in the process, e.g. by calling <b>list.remove(index)</b>.\nIf latter is the case, the enhanced <b>for</b> loop may throw <b>ConcurrentModificationException</b>.\n<p>\nUse the second checkbox below to ignore collections which do not have type parameters. This prevents the creation of\nenhanced <b>for</b> loop variables of type <b>java.lang.Object</b> and the insertion of casts where the loop variable is used.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Web Flow",
      "inspections": [
        {
          "shortName": "WebflowModelInspection",
          "displayName": "Spring Web Flow model",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates Web Flow model."
        },
        {
          "shortName": "WebflowConfigModelInspection",
          "displayName": "Spring Web Flow configuration model",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates Web Flow config model."
        },
        {
          "shortName": "FlowRequiredBeanTypeInspection",
          "displayName": "Spring Web Flow required bean type",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Web Flow: checks bean reference for required bean type."
        },
        {
          "shortName": "WebflowSetupInspection",
          "displayName": "Spring Web Flow setup",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates Web Flow setup (Spring configuration)."
        }
      ]
    },
    {
      "name": "Undefined",
      "inspections": [
        {
          "shortName": "PhpUndefinedNamespaceInspection",
          "displayName": "Undefined namespace",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the references to a namespace that is not found.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedFunctionInspection",
          "displayName": "Undefined function",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to functions that are not defined in the built-in library and project files.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedCallbackInspection",
          "displayName": "Undefined callback",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the functions, methods, properties, or classes that are referenced from a callback but are not found.\n<!-- tooltip end -->\n<p>Use the options below to customize the inspection:</p>\n<ul>\n  <li>\n    <b>Ignore callback from *_exists and is_callable functions</b>: if selected, the inspection will skip callback references from the\n    <code>method_exists</code>, <code>function_exists</code>, <code>property_exists</code>, <code>class_exists</code> and <code>is_callable</code> functions.\n  </li>\n  <li><b>Don't report in case of ambiguity</b>: if selected, the inspection will skip the parameters with multiple possible types, for example marked as <code>callable|string</code>.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpPossiblePolymorphicInvocationInspection",
          "displayName": "Possible polymorphic call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports polymorphic code usages. Such usages are ambiguous and can be potentially inoperable depending on the class instance passed as the argument.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedClassConstantInspection",
          "displayName": "Undefined class constant",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the references to class constants that are not declared.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedGotoLabelInspection",
          "displayName": "Undefined goto label",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>goto</code> labels that are not found in the current scope.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUndefinedConstantInspection",
          "displayName": "Undefined constant",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to constants that are not found in the built-in library and project files.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedFieldInspection",
          "displayName": "Undefined property",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to class properties that are not declared.\n<p>\n  The inspection skips the objects of the <code>stdClass</code> or derived types.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedVariableInspection",
          "displayName": "Undefined variable",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n  Produces two types of warnings:\n  <ul>\n    <li>\n      <i>Undefined variable</i>: the variable's definition is not found in the built-in library and project files.\n    </li>\n    <li>\n      <i>Variable might have not been defined</i>: there are one or more paths to reach the line with the variable usage without defining it.\n    </li>\n  </ul>\n  <p>\n    Use the options below to customize the inspection:\n  </p>\n\n  <ul>\n    <li>\n      <b>Report that variable is probably undefined</b>: clear the checkbox to disable the <i>Variable might have not been defined</i> warnings.\n    </li>\n    <li>\n      <b>Enable inspection in global space</b>: by default, the inspection is enabled for global space. Clear the checkbox to only report\n      undefined variables from functions' local scope.\n    </li>\n    <li>\n      <p>\n        <b>Search for variable's definition outside the current file</b>: if selected, the IDE reports a global variable as undefined only in case there are no <code>include</code> or <code>require</code> statements in the current file and the variable's definition cannot be found in the project.\n      </p>\n      <p>\n        Otherwise, if not selected, the IDE searches for the variable's definition only in the current file and ignores the <code>include</code> or <code>require</code> statements if any.\n      </p>\n    </li>\n  </ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedClassInspection",
          "displayName": "Undefined class",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Produces two types of warnings:\n  <ul>\n    <li><i>Undefined class</i>: the declaration of referenced class is not found in the built-in library and project files.</li>\n    <li><i>Multiple declarations</i>: multiple class definitions were found in project files. This can lead to issues with code completion, members resolution, and class inheritance analysis.</li>\n  </ul>\n  <p>Use the options below to customize the inspection:</p>\n  <ul>\n    <li>\n      <b>Don't report multiple class declaration potential problems</b>: if selected, the inspection will not report classes having multiple definitions in project files.\n    </li>\n    <li>\n      <b>Ignore</b>: if selected, the inspection will not report the undefined classes referenced in PHPDoc blocks.\n    </li>\n  </ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedMethodInspection",
          "displayName": "Undefined method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n    Reports the references to class methods that are not defined.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring OSGi",
      "inspections": [
        {
          "shortName": "SpringOsgiElementsInconsistencyInspection",
          "displayName": "OSGi model",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring OSGi Model"
        },
        {
          "shortName": "SpringOsgiListenerInspection",
          "displayName": "OSGi service lifecycle listener",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring OSGi Listener inconsistencies"
        },
        {
          "shortName": "SpringOsgiServiceCommonInspection",
          "displayName": "OSGi service",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring OSGi Service Common Errors"
        }
      ]
    },
    {
      "name": "Annotations verifying",
      "inspections": [
        {
          "shortName": "DelegatesTo",
          "displayName": "@DelegatesTo inspection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks <b>@groovy.lang.DelegatesTo</b> annotation arguments.\n</body>\n</html>\n"
        },
        {
          "shortName": "SingletonConstructor",
          "displayName": "@Singleton constructors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that classes annotated by <b>@Singleton</b> do not have constructors unless it is declared non strict.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "XPath",
      "inspections": [
        {
          "shortName": "ImplicitTypeConversion",
          "displayName": "Implicit type conversion",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for any implicit conversions between the predefined XPath-types STRING, NUMBER, BOOLEAN and\n  NODESET. While this is usually not a problem as the conversions are well-defined by the standard, this inspection can\n  help to write XSLT scripts that are more expressive about types and can even help to avoid subtle bugs:\n</p>\n\n<p>\n  <code>&lt;xsl:if test=\"<b>foo</b>\" /></code> is not the same as <code>&lt;xsl:if test=\"<b>string(foo)</b>\" /></code>\n</p>\n\n<p>\n  The first test checks whether the element \"foo\" exists (<code>count(foo) > 0)</code>, the latter one however is only\n  true if the element actually contains any text (<code>string-length(foo) > 0</code>). The plugin will then offer to\n  make the type-conversion more explicit.\n</p>\n\n<p>\n  There are several options to adjust the inspection to personal preferences by offering the possibility to\n  individually enable it for implicit conversions between certain types.<br>\n</p>\n\n<p>\n  The plugin can also be told to always flag explicit conversions that do not result in the actually expected type, such\n  as <code>&lt;xsl:if test=\"number(foo)\" /></code> and provides a special option to ignore the conversion from NODESET\n  to BOOLEAN by using the <code>string()</code> function as a shortcut for writing <code>string-length() > 0</code>.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "HardwiredNamespacePrefix",
          "displayName": "Hardwired namespace prefix",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for comparisons of the <tt>name()</tt>-function against strings that contain a \":\" - which\n  usually indicates a hardwired namespace-prefix in the comparison. Such code will break when run against XML that\n  uses a different prefix for the same namespace.\n</p>\n\n<p>Example:</p>\n\n<p>\n  <code>&lt;xsl:if test=\"name() = 'xlink:href'\">...&lt;xsl:if></code>\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantTypeConversion",
          "displayName": "Redundant type conversion",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks whether any type-conversion with the functions <code>string()</code>, <code>number()</code> or\n  <code>boolean()</code> is redundant, i.e. whether the type of argument is the same as the functions return type or if\n  the expected type of the expression is of type \"any\". While such an explicit conversion may sometimes be intentional\n  to emphasize the type, this can usually be safely removed.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "IndexZeroUsage",
          "displayName": "Use of index 0 in XPath predicates",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for any accidental use of zero in a predicate index or in a comparision with the function\n  <code>position()</code>. Such is almost always a bug because in XPath, the index starts at one, <em>not</em> at zero.\n</p>\n\n<p>\n  Example:\n</p>\n\n<p>\n  <code>//someelement[<b>position() = 0</b>]</code> or <code>//something[<b>0</b>]</code>\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "CheckNodeTest",
          "displayName": "Check node test",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks whether any element/attribute names that are used in XPath-expressions are actually part of an\n  associated XML file or are defined in a referenced schema. This helps to avoid problems caused by typos in\n  XPath-expressions that would otherwise occur when running the script and may even then not be recognized immediately.\n</p>\n\n<p>Example:</p>\n\n<p>\n  <code>&lt;xsl:template match=\"<b>h:txtarea</b>\" /></code>\n</p>\n\n<p>\n  If the prefix \"h\" is bound to the XHTML namespace, the inspection will flag this part of the match-expression as an\n  unknown element name because the correct name of the element is \"textarea\".\n</p>\n\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "TooBroadScope",
          "displayName": "Scope of variable is too broad",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variable declarations which can be moved to a smaller scope. Especially\nuseful for <i>Pascal style</i> declarations at the start of a method, but variables with too broad\na scope are also often left over after refactorings.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to only report variables that can be moved inside deeper code blocks.\n<p>\nUse the second checkbox below to report variables which are initialized\nwith a new expression. This makes the inspection potentially unsafe in cases where the\nconstructor has non-local side-effects.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanVariableAlwaysNegated",
          "displayName": "Boolean variable is always inverted",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any boolean variables or fields which are always negated\nwhen its value is used.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLocalVariable",
          "displayName": "Redundant local variable",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary local variables, which add\nnothing to the comprehensibility of a method. Variables caught include local variables\nwhich are immediately returned, local variables that are immediately assigned to another\nvariable and then not used, and local variables which always have the same value as another\nlocal variable or parameter.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection ignore variables which are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging.\n<p>\nUse the second checkbox below to have this inspection ignore variable which are annotated.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantValueVariableUse",
          "displayName": "Use of variable whose value is known to be constant",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of variables which are known to be constant. This\nis the case if the (read) use of the variable is surrounded by an\n<b>if</b>, <b>while</b> or <b>for</b>\nstatement with an <b>==</b> condition which compares the variable with a constant. In such\na case the use\nof a variable which is known to be constant can be replaced with the actual constant.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NegativelyNamedBooleanVariable",
          "displayName": "Negatively named boolean variable",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports negatively named variables, for example 'disabled', 'hidden', 'isNotChanged'.\nIt is usually more clear to invert the <b>boolean</b> value and remove the negation from the name.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ReuseOfLocalVariable",
          "displayName": "Reuse of local variable",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables that are \"reused\", overwriting their\nvalues with new values unrelated to their original use. Such local variable reuse may be confusing,\nas the intended semantics of the local variable may vary with each use. It may also be\nprone to bugs, if code changes result in values that were thought to be overwritten actually\nbeing live. It is good practices to keep variable lifetimes as short as possible, and not\nreuse local variables for the sake of brevity.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LawOfDemeter",
          "displayName": "Method call violates Law of Demeter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Law of Demeter violations.\nSee here <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\">http://en.wikipedia.org/wiki/Law_of_Demeter</a>\nfor an explanation what the Law of Demeter is.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanMethodIsAlwaysInverted",
          "displayName": "Boolean method is always inverted",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with a <b>boolean</b> return type, which are only used in a negated context.\nDue to performance reasons some methods might not be reported during in-editor highlighting.\n<p>\nFor example:\n<code><pre>\n<b>class</b> C {\n  <b>boolean</b> inverted() {\n    <b>return</b> <b>true</b>;\n  }\n\n  <b>void</b> f() {\n    <b>if</b> (!inverted()) {\n      <b>return</b>;\n    }\n  }\n  <b>boolean</b> member = !inverted();\n}  \n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Verbose or redundant code constructs",
      "inspections": [
        {
          "shortName": "UnnecessaryBreak",
          "displayName": "Unnecessary 'break' statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any unnecessary <b>break</b> statements.\nAn <b>break</b> statement is unnecessary when no other statements will be executed when it is removed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatement",
          "displayName": "Unnecessary label on 'break' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements with unnecessary\nlabels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExcessiveLambdaUsage",
          "displayName": "Excessive lambda usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports if trivial lambda expression is used where there's an alternative method which behaves the same way, but\naccepts a concrete value instead of a lambda.\n<p>\n  For example, <code>Optional.orElseGet(() -> null)</code> can be replaced with <code>Optional.orElse(null)</code>.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantCast",
          "displayName": "Redundant type cast",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary cast expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "ExcessiveRangeCheck",
          "displayName": "Excessive range check",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports condition chains where a value range is checked which could be simplified to a single check. E.g. <b>x > 2 && x &lt; 4</b> could be\n  simplified to <b>x == 3</b> or <b>arr.length == 0 || arr.length > 1</b> could be simplified to <b>arr.length != 1</b>. \n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CastCanBeRemovedNarrowingVariableType",
          "displayName": "Too weak variable type leads to unnecessary cast",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports type casts which could be removed if the variable type is narrowed to the cast type. Example:\n<pre>\n  Object x = \"  string  \";\n  System.out.println(((String)x).trim());\n</pre>\nHere changing the type of <b>x</b> to <b>String</b> will make the cast redundant. The suggested quick-fix updates variable type and\nremoves all redundant casts on that variable.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicateBranchesInSwitch",
          "displayName": "Duplicate branches in 'switch'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>switch</code> statements containing the same code in different branches.\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryDefault",
          "displayName": "Unnecessary 'default' for enum 'switch' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports enum <b>switch</b> statements or expression with <b>default</b> branches which can never be taken,\nbecause all possible values are covered by a <b>case</b> branch.\nThese are unnecessary, especially for <b>switch</b> expressions, because they don't compile when all\n<b>enum</b> constants are not covered by a <b>case</b> branch.\n<p>\n  The language level needs to be configured to 13 Preview to report <b>switch</b> expressions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantCompareCall",
          "displayName": "Redundant 'compare()' method call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports comparisons like <b>Integer.compare(a, b) == 0</b> which could be replaced simply with <b>a == b</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryReturn",
          "displayName": "Unnecessary 'return' statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any unnecessary <b>return</b> statements at the end of constructors and methods returning\n<b>void</b>. These may be safely removed.\n<p>\nAt present, this inspection is disabled in JSP files.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to let this inspection ignore <b>return</b> statements in the then branch of <b>if</b> statements\nwhich also have an <b>else</b> branch.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantTypeArguments",
          "displayName": "Redundant type arguments",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports all calls to parametrized methods where explicit argument types\ncan be omitted, since they will be unambiguously inferred by compiler. <br>\nSuch usages make code excessive and thus less readable. <br> <br>\nFor example if you have a call to parametrized method like:\n <pre>\n&nbsp;&nbsp;&nbsp;&nbsp;<b><font color=\"#000080\">this</font></b>.&lt;String&gt;addItem(<font color=\"#008000\">\"\"</font>);\n</pre>\n- the usage of <b><font color=\"#000080\">&lt;String&gt;</font></b> will be highlighted. <br> <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatement",
          "displayName": "Unnecessary label on 'continue' statement",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements with unnecessary\nlabels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryContinue",
          "displayName": "Unnecessary 'continue' statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports on any unnecessary <b>continue</b> statements at the end of loops.\nThese may be safely removed.\n<p>\nAt present, this inspection is disabled in JSP files.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantArrayCreation",
          "displayName": "Redundant array creation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports arrays that are created specifically to be passed as a varargs parameter.\n<p>The quick-fix replaces the array initializer with individual arguments, for example:</p>\n<p><code>Arrays.asList(new String[]{\"Hello\", \"world\"})</code></p>\n<p>is replaced with:</p>\n<p><code>Arrays.asList(\"Hello\", \"world\")</code></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ManualMinMaxCalculation",
          "displayName": "Manual min/max calculation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports cases where the minimum or the maximum of two numbers can be calculated by means of\n<code>Math.max()</code> or <code>Math.min()</code> instead of doing it manually.\n<p>Example:</p>\n<pre>\n  public int getMinWeight(int typeDiffWeight, int rawTypeDiffWeight) {\n    return (rawTypeDiffWeight &lt; typeDiffWeight ? rawTypeDiffWeight : typeDiffWeight);\n  }\n</pre>\n<p>Will be replaced with:</p>\n<pre>\n  public int getMinWeight(int typeDiffWeight, int rawTypeDiffWeight) {\n    return Math.min(rawTypeDiffWeight, typeDiffWeight);\n  }\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2019.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantFileCreation",
          "displayName": "Redundant File object creation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant file creation when the stream constructor that takes a path could be used.\n<p>The quick-fix replaces the constructor call with a <code>String</code> literal that represents the path, for example:</p>\n<pre>\n<code>InputStream is = new FileInputStream(new File(\"in.txt\")); // before\nInputStream is = new FileInputStream(\"in.txt\"); // after\n</code>\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicateExpressions",
          "displayName": "Multiple occurrences of the same expression",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer)\nif the result of the expression can be reused.\n<!-- tooltip end -->\n<p>\n  The expression is reported if it's free of side effects and its result is always the same (in terms of <code>Object.equals()</code>).\n  The examples of such expressions are <code>a + b</code>, <code>Math.max(a, b)</code>, <code>a.equals(b)</code>,\n  <code>s.substring(a,b)</code>. To make sure the result is always the same, it's verified that the variables used in the expression don't\n  change their values between the occurrences of the expression.</p>\n<p>\n  Such expressions may contain methods of immutable classes like <code>String</code>, <code>BigDecimal</code>, etc,\n  and of utility classes like <code>Objects</code>, <code>Math</code> (except <code>random()</code>).\n  The well-known methods, such as <code>Object.equals()</code>, <code>Object.hashCode()</code>, <code>Object.toString()</code>,\n  <code>Comparable.compareTo()</code>, and <code>Comparator.compare()</code> are OK as well because they normally don't have\n  any observable side effects.\n</p>\n\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ExplicitArrayFilling",
          "displayName": "Explicit array filling",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports loops which could be replaced with <code>Arrays.setAll()</code> or <code>Arrays.fill()</code> calls.\nThis inspection suggests replacing loops with <code>Arrays.setAll()</code> if the language level of the project or module is 8 or higher.\nReplacing loops with <code>Arrays.fill()</code> is possible with any language level.\n<p>For example:</p>\n<pre>\n  for (int i=0; i&lt;array.length; i++) {\n     array[i] = calc(i);\n  }\n</pre>\n<p>Will be replaced with:</p>\n<pre>\n  Arrays.setAll(array, this::calc);\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryStringEscape",
          "displayName": "Unnecessarily escaped character",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessarily escaped characters in <b>String</b> and optionally <b>char</b> literals.\nFor example <b>\\'</b> in a <b>String</b> literal or <b>\\n</b> in a Java 13 Preview text block.\nThe escaped tab character <b>\\t</b> is not reported.\n<!-- tooltip end -->\n<p><small>New in 2019.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantClassCall",
          "displayName": "Redundant 'isInstance()' or 'cast()' call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant calls of <b>java.lang.Class</b> methods. E.g. <b>Xyz.class.isInstance(object)</b> could be replaced with <b>object instanceof Xyz</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantComparatorComparing",
          "displayName": "Comparator can be simplified",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant Comparator combinator constructs which can be simplified. Examples:\n<ul>\n  <li><code>c.thenComparing(Comparator.comparing(function))</code> &rarr; <code>c.thenComparing(function)</code></li>\n  <li><code>Comparator.comparing(Map.Entry::getKey)</code> &rarr; <code>Map.Entry.comparingByKey()</code></li>\n  <li><code>stream.min(Collections.reverseOrder(cmp))</code> &rarr; <code>stream.max(cmp)</code></li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferReplaceableByString",
          "displayName": "'StringBuilder' can be replaced with 'String'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any usages of <b>StringBuffer</b>, <b>StringBuilder</b> or <b>StringJoiner</b>\nwhich can be replaced with a single <b>java.lang.String</b> concatenation. Using a <b>String</b> concatenation\nmakes the code shorter and simpler. Example:\n<pre>\n  StringBuilder result = new StringBuilder();\n  result.append(\"i = \");\n  result.append(i);\n  result.append(\";\");\n  return result.toString();\n</pre>\n<p>\n  This code could be replaced with\n</p>\n<pre>\n  String result = \"i = \" + i + \";\";\n  return result;\n</pre>\n<p>\nThis inspection only reports when the suggested replacement does not result in significant \nperformance drawback on modern JVMs. In many cases the String concatenation may perform better. \n</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringOperationCanBeSimplified",
          "displayName": "Redundant String operation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant operations with Strings.\nExamples:\n<ul>\n  <li>calling <code>toString()</code> or <code>substring(0)</code> on a <code>String</code></li>\n  <li>calling <code>toString().substring()</code> on a <code>StringBuilder</code></li>\n  <li>using redundant <code>String</code> constructors. Note that the proposed quick-fix\n    affects <code>String</code> referential equality. If you need to preserve it (which is\n    considered a bad practice), suppress the warning or use the <strong>Do not report String constructors</strong> option.</li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantUnmodifiable",
          "displayName": "Redundant usage of unmodifiable collection wrappers",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant calls to unmodifiable collection wrappers within the Collections class.\nIf the argument that is passed to an unmodifiable collection wrapper is already immutable, such wrapping becomes pointless.\n<p>Example:</p>\n<pre>\n<code>Collections.unmodifiableList(Collections.singletonList(\"abc\"));\n</code>\n</pre>\nIn order to detect the methods that return unmodifiable collections, the inspection uses the <code>org.jetbrains.annotations.Unmodifiable</code> and <code>org.jetbrains.annotations.UnmodifiableView</code> annotations. Use them to extend the inspection to your own unmodifiable collection wrappers.\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantCollectionOperation",
          "displayName": "Redundant Collection operation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessarily complex collection operations which have simpler alternatives. E.g.\n<b>Arrays.asList(array).subList(0, 10).toArray(new String[0])</b> could be simplified to\n<b>Arrays.copyOfRange(array, 0, 10)</b> or <b>collection.containsAll(singletonList(\"x\"))</b> could be\nsimplified to <b>collection.contains(\"x\")</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ConditionCoveredByFurtherCondition",
          "displayName": "Condition is covered by further condition",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports conditions that become redundant as they are completely covered by a subsequent condition.\nFor example, in the <code>value != -1 && value > 0</code> condition, the first part is redundant:\nif it's false, then the second part is also false.\nOr in a condition like <code>obj != null && obj instanceof String</code>,\nthe null-check is redundant as <code>instanceof</code> operator implies non-nullity.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "defaultSeverity": "TYPO",
          "enabled": false,
          "description": "<html>\n<body>\n\nSpellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Performance",
      "inspections": [
        {
          "shortName": "UseBulkOperation",
          "displayName": "Bulk operation can be used instead of iteration",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nWarns when calling some method in a loop (e.g. <code>collection.add(x)</code>) could be replaced when calling a bulk method\n(e.g. <code>collection.addAll(listOfX)</code>.\n<p>\n  If checkbox \"Use Arrays.asList() to wrap arrays\" is checked, the inspection will warn even if the original code iterates over\n  an array while bulk method requires a <code>Collection</code>. In this case the quick-fix action will automatically\n  wrap an array with <code>Arrays.asList()</code> call.\n</p>\n<!-- tooltip end -->\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "ManualArrayToCollectionCopy",
          "displayName": "Manual array to collection copy",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>Reports the copying of array contents to a collection where each element\nis added individually using a for loop. Such constructs may be replaced by a call to\n<b>Collection.addAll(Arrays.asList())</b> or <b>Collections.addAll()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementMissingBreakInLoop",
          "displayName": "Loop can be terminated after condition is met",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports cases in which a loop contains the <b>if</b> statement that can end with <b>break</b>.\n<p>\n  For instance, consider the following code:\n<pre><code>\n  <b>boolean</b> found = <b>false</b>;\n  <b>for</b> (<b>int</b> i = 0; i &lt; arr.length; i++) {\n    <b>if</b> (Objects.equals(value, arr[i])) {\n      found = <b>true</b>;\n    }\n  }\n</code></pre>\nIn this case, iterations have no effect after the condition is met, and you can skip them by adding a <b>break</b>.\n<pre><code>\n  <b>boolean</b> found = <b>false</b>;\n  <b>for</b> (<b>int</b> i = 0; i &lt; arr.length; i++) {\n    <b>if</b> (Objects.equals(value, arr[i])) {\n      found = <b>true</b>;\n      <b>break</b>;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2019.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferMustHaveInitialCapacity",
          "displayName": "StringBuilder without initial capacity",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>StringBuffer</b> or\n<b>StringBuilder</b> object without specifying its initial capacity.\nIf no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing\nto specify initial capacities for <b>StringBuffer</b>s may result in performance issues, if space needs to be reallocated and\nmemory copied when capacity is exceeded\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MapReplaceableByEnumMap",
          "displayName": "Map replaceable with EnumMap",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.util.Map</b> objects\nwhose key types are enumerated classes. Such <b>java.util.Map</b> objects\ncan be replaced by <b>java.util.EnumMap</b> objects.\n<b>java.util.EnumMap</b> implementations can be much more efficient\nthat those of other sets, as the underlying data structure is a simple array.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodMayBeStatic",
          "displayName": "Method may be 'static'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods which may safely be made <b>static</b>.\nA method may be <b>static</b> if it is not <b>synchronized</b>, it does not reference any of its class' non static methods\nand non static fields and is not overridden in a sub class.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to inspect only <b>private</b>\nor <b>final</b> methods, which increases the\nperformance of this inspection.\n<p>\nUse the second checkbox to ignore empty methods.\n<p>\nUse the third checkbox to ignore default methods in interface when using Java 8 or higher\n<p>\nUse the fourth checkbox to let the quick fix replace instance qualifiers with class references\nin calls to methods which are made <b>static</b>.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantStringFormatCall",
          "displayName": "Redundant call to 'String.format()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the combinations of System.out.println(String.format(...)) so they can be converted to System.out.printf(...) using a quick-fix\n<!-- tooltip end -->\n<p>Quick fix: removes String.format() calls and converts println to printf. E.g. System.out.<strong>println</strong>(String.format(\"%s, %s!\", \"Hello\", \"World\")) will be converted to System.out.<strong>printf</strong>(\"%s, %s!<strong>%n</strong>\", \"Hello\", \"World\")</p>\n</body>\n</html>"
        },
        {
          "shortName": "ListRemoveInLoop",
          "displayName": "'List.remove()' called in loop",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>List.remove(index)</b> called in a loop, which can be replaced with <b>List.subList().clear()</b>. The replacement\nis more efficient for most List implementations, when many elements are deleted.\n<p>\n  The quick-fix adds a range-check automatically to prevent a possible <b>IndexOutOfBoundsException</b> when the minimal value is bigger\n  than the maximal value. It can be removed if such a situation is impossible in your code.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInLoops",
          "displayName": "String concatenation in loop",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports String concatenation in loops. As every String concatenation copies the whole String, usually it is preferable to replace\nit with explicit calls to <b>StringBuilder.append()</b> or <b>StringBuffer.append()</b>.\n<!-- tooltip end -->\n<p>\n  Sometimes quick-fix actions are available which allow you to convert <code>String</code> variable to <code>StringBuilder</code> or\n  introduce a new <code>StringBuilder</code>. Be careful if the original code handles <code>null</code> value specially: the replacement\n  might not be semantically correct after that. If <code>null</code> value is possible, null-safe fixes are suggested which generate\n  necessary null-checks. Also it's not guaranteed that the automatic replacement will always be more performant.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "StringReplaceableByStringBuffer",
          "displayName": "Non-constant String should be StringBuilder",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variables declared as <b>java.lang.String</b> which are\nrepeatedly appended to. Such variables may be more efficiently declared as <b>java.lang.StringBuffer</b>\nor <b>java.lang.StringBuilder</b>.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to specify that this inspection should only warn when the variable is appended\nto in a loop.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RandomDoubleForRandomInteger",
          "displayName": "Using 'Random.nextDouble()' to get random integer",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to\n<b>java.util.Random.nextDouble()</b>, which are used to create a positive integer number, by multiplying\nthe call with a factor and casting to an integer. For generating a random positive integer in a range,\n<b>java.util.Random.nextInt(int)</b> is simpler and more efficient.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CollectionContainsUrl",
          "displayName": "Map or Set may contain 'java.net.URL' objects",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports objects which are a subtype of\n<b>java.util.Set</b> or <b>java.util.Map</b>\nand which may contain <b>java.net.URL</b> objects. Adding <b>java.net.URL</b>\nobjects to such collections can cause performance problems because of calls to the\n<b>equals()</b> and <b>hashCode()</b>\nmethods of <b>java.net.URL</b>.\n<b>java.net.URL</b>'s <b>equals()</b> and <b>hashCode()</b> method use a DNS\nlookup, which depending on the availability of the network and the speed of the DNS server\ncan cause significant delays.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectAllocationInLoop",
          "displayName": "Object allocation in loop",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports object or array allocation inside loops. While not\nnecessarily a problem, object allocation inside loop is a great place to look for memory leaks\nand performance issues.\n<p>\n  The inspection reports the following constructs:\n</p>\n<ul>\n  <li>Explicit allocations via <b>new</b> operator</li>\n  <li>Methods known to return new object</li>\n  <li>Instance-bound method references</li>\n  <li>Lambdas that capture variables or <b>this</b> reference</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DynamicRegexReplaceableByCompiledPattern",
          "displayName": "Dynamic regular expression could be replaced by compiled Pattern",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the regular expression methods of\n<b>java.lang.String</b> using constants arguments.\nSuch calls may be profitably replaced with a\n<b>private static final Pattern</b> field so\nthat the regular expression does not have to be compiled each time it is used.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LengthOneStringsInConcatenation",
          "displayName": "Single character string concatenation",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports String literals of length one being used in concatenation.\nThese literals may be replaced by equivalent character literals, gaining some performance enhancement.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CollectionsMustHaveInitialCapacity",
          "displayName": "Collection without initial capacity",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>Collection</b> object without specifying\nan initial capacity. If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing\nto specify initial capacities for collections may result in performance issues, if space needs to be reallocated and\nmemory copied when capacity is exceeded. This inspection checks allocations of the classes which are listed in inspection settings.\n</body>\n</html>"
        },
        {
          "shortName": "EqualsHashCodeCalledOnUrl",
          "displayName": "'equals()' or 'hashCode()' called on 'java.net.URL' object",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.equals()</b> or\n<b>.hashCode()</b> being called\non <b>java.net.URL</b> objects. This can cause performance\nproblems because those methods uses a DNS lookup\nto determine the equality of two <b>java.net.URL</b> objects.\nDepending on the availability of the network and the speed of the DNS server, this can cause\nsignificant delays.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInsideStringBufferAppend",
          "displayName": "String concatenation as argument to 'StringBuilder.append()' call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports String concatenation used as\nthe argument to <b>StringBuffer.append()</b>,\n<b>StringBuilder.append()</b> or\n<b>Appendable.append()</b>. Such calls\nmay profitably be turned into chained append calls on the existing\n<b>StringBuffer/Builder/Appendable</b>, saving the\ncost of an extra <b>StringBuffer/Builder</b>\nallocation.\n<p>\nThis inspection ignores compile time evaluated String\nconcatenations, which when converted to chained append calls would only\nworsen performance.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SetReplaceableByEnumSet",
          "displayName": "Set replaceable with EnumSet",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.util.Set</b> objects\nwhose content types are enumerated classes. Such <b>java.util.Set</b> objects\ncan be replaced by <b>java.util.EnumSet</b> objects.\n<b>java.util.EnumSet</b> implementations can be much more efficient\nthat those of other sets, as the underlying data structure is a simple bitmap.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectEqualsCanBeEquality",
          "displayName": "'equals()' call can be replaced with '=='",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <b>equals()</b> which can be replaced by <b>==</b> or <b>!=</b> expressions without a change in semantics.\nThese calls can be replaced when they are used to compare <b>final</b> classes which don't have their own <b>equals()</b> implementation,\nbut use the default <b>Object.equals()</b>.\nThis may result in better performance.\nThere is a separate inspection for <b>equals()</b> calls on Enums.\n<!-- tooltip end -->\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferToStringInConcatenation",
          "displayName": "'StringBuilder.toString()' in concatenation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>StringBuffer.toString()</b> or <b>StringBuilder.toString()</b> calls in String concatenations.\nSuch calls are unnecessary when concatenating and can be removed, saving a method call and an object allocation which may improve performance.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringEqualsEmptyString",
          "displayName": "'String.equals(\"\")'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when <b>.equals()</b> is called to compare a String with an empty string. In this case, using <b>.isEmpty()</b> is better as\nit shows you exactly what you're checking.\n<!-- tooltip end -->\n<p>\n  <b>\"\".equals(str)</b> returns false when <b>str</b> is null. For safety, this inspection's quick fix inserts an explicit null-check when \n  the <b>equals()</b> argument is nullable. Use the checkbox below to suppress the warning in this case.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "InstantiatingObjectToGetClassObject",
          "displayName": "Instantiating object to get Class object",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any cases where new objects are instantiated for the purpose\nof accessing its class object. It is more performant to access the class object\ndirectly by name.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectInstantiationInEqualsHashCode",
          "displayName": "Object instantiation inside 'equals()' or 'hashCode()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports construction of (temporary) new objects inside an <b>equals()</b>, <b>hashCode()</b>, <b>compareTo</b> or\n<b>Comparator.compare()</b> method.\nBesides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a foreach statement.\nThis can cause performance problems for example when objects are added to a <b>Set</b> or <b>Map</b>,\nwhere these methods will be called often.\nThis inspection will not warn when the objects are created in a <b>throw</b> or <b>assert</b> statement.\n<!-- tooltip end -->\n<p>\n<small>New in 2016.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "CallToSimpleGetterInClass",
          "displayName": "Call to simple getter from within class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to a simple property getter from within the property's class.\nA simple property getter is defined as one which simply returns the value of a field,\nand does no other calculation. Such simple getter calls may be safely inlined.\nSome coding standards also suggest against the use of simple getters for code clarity\nreasons.\n<!-- tooltip end -->\n<p>\nUse the first option below to only report on getter calls on <b>this</b>, not on objects of the same type passed in as a parameter. Use\nthe second option below to only report when the getter is <b>private</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TailRecursion",
          "displayName": "Tail recursion",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports tail recursion, that is when a method calls itself\nas its last action before returning. Tail recursion can always be replaced by looping, which will be considerably faster.\nSome JVMs perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different\nperformance characteristics on different virtual machines.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LengthOneStringInIndexOf",
          "displayName": "Single character string argument in 'String.indexOf()' call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports String literals of length one being used\nas a parameter in <b>String.indexOf()</b> or\n<b>String.lastIndexOf()</b> calls.\nThese String literals may be replaced by equivalent character literals, gaining some performance enhancement.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ManualArrayCopy",
          "displayName": "Manual array copy",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the manual copying of array contents which may be replaced by\ncalls to <b>System.arraycopy()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanConstructor",
          "displayName": "Boolean constructor call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>Boolean</b>\nobject. Constructing new <b>Boolean</b> objects is rarely necessary,\nand may cause performance problems if done often enough.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceInefficientStreamCount",
          "displayName": "Inefficient Stream API call chains ending with count()",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports stream API call chains ending with count() operation which\ncould be optimized.\n<p>\n  The following call chains are replaced by this inspection:\n</p>\n<ul>\n  <li><code>Collection.stream().count()</code> &rarr; <code>Collection.size()</code>. In Java 8 Collection.stream().count()\n    actually iterates over collection elements to count them while Collection.size() is much faster for most of collections.</li>\n  <li><code>Stream.flatMap(Collection::stream).count()</code> &rarr; <code>Stream.mapToLong(Collection::size).sum()</code>. Similarly\n    there's no need to iterate all the nested collections. Instead, their sizes could be summed up.</li>\n  <li><code>collection.stream().filter(o -> ...).count() > 0</code> &rarr; <code>collection.stream().anyMatch(o -> ...)</code></li>\n  <li><code>collection.stream().filter(o -> ...).count() == 0</code> &rarr; <code>collection.stream().noneMatch(o -> ...)</code></li>\n</ul>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ExplicitArgumentCanBeLambda",
          "displayName": "Explicit argument can be lambda",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports cases where method call accepts a non-trivial expression, and there's an equivalent method,\nwhich accepts lambda instead. Converting an expression to lambda ensures that expression will not be evaluated\nif it happens to be unused inside the method. E.g. <b>optional.orElse(createDefaultValue())</b> could be converted\nto <b>optional.orElseGet(this::createDefaultValue)</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CollectionAddAllCanBeReplacedWithConstructor",
          "displayName": "Redundant 'Collection.addAll()' call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Collection.addAll()</b> and <b>Map.putAll()</b> calls after instantiation of a collection using a constructor call without arguments.\nSuch constructs can be replaced with a single call to a parametrized constructor which simplifies code. Also for some collections the replacement\nmight be more performant.\nFor example:\n<pre><code>\n  Set&lt;String&gt; set = new HashSet&lt;&gt;();\n  set.addAll(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n</code></pre>\ncan be replaced with:\n<pre><code>\n  Set&lt;String&gt; set = new HashSet&lt;&gt;(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n</code></pre>\nStandard JDK collection classes are supported by default. Additionally you may specify other classes in the settings.\n</body>\n</html>"
        },
        {
          "shortName": "WrapperTypeMayBePrimitive",
          "displayName": "Wrapper type may be primitive",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports local variable of wrapper type which has most of its usages primitive.\n<!-- tooltip end -->\n<p>In some cases, boxing can be source of significant performance penalty, especially in loops.</p>\n<p>Example:</p>\n<pre>\n  public void example() {\n    Long l = 12L;\n    needBox(l);\n    for (int i = 0; i < 10; i++) {\n      needPrimitive(l); // Loops usages considered as more often\n    }\n  }\n\n  void needPrimitive(long l) {}\n  void needBox(Long l) {}\n</pre>\n<p>\n  <small>New in 2018.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "FieldMayBeStatic",
          "displayName": "Field may be 'static'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any instance variables which may safely be made <b>static</b>. A field\nmay be static if it is declared <b>final</b>, and is initialized with a constant.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BoxingBoxedValue",
          "displayName": "Boxing of already boxed value",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports boxing of already boxed values. This is a redundant\noperation since any boxed value will first be auto-unboxed before boxing the\nvalue again. If done inside an inner loop such code may cause performance\nproblems.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionFromString",
          "displayName": "Unnecessary temporary object in conversion from String",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary creation of temporary objects when converting\nfrom Strings to primitive types.\n<p>\nFor example:\n<code><pre>\n    new Integer(\"3\").intValue()\n</pre></code>\nwill be reported, and can be automatically converted to:\n<code><pre>\n    Integer.valueOf(\"3\")\n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionToString",
          "displayName": "Unnecessary temporary object in conversion to String",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary creation of temporary objects when converting\nfrom primitive types to Strings.\n<p>\nFor example:\n<code><pre>\n    new Integer(3).toString()\n</pre></code>\nwill be reported, and can be automatically converted to:\n<code><pre>\n    Integer.toString(3)\n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CallToSimpleSetterInClass",
          "displayName": "Call to simple setter from within class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to a simple property setter from within the property's class.\nA simple property setter is defined as one which simply assigns the value of its parameter to a field,\nand does no other calculation. Such simple setter calls may be safely inlined.\nSome coding standards also suggest against the use of simple setters for code clarity\nreasons.\n<!-- tooltip end -->\n<p>\nUse the first option below to only report on setter calls on <b>this</b>, not on objects of the same type passed in as a parameter. Use\nthe second option below to only report when the setter is <b>private</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassInitializerMayBeStatic",
          "displayName": "Class initializer may be 'static'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any class initializers which may safely be made <b>static</b>.\nA class initializer may be static if it does not reference any of its class' non static methods\nand non static fields.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "KeySetIterationMayUseEntrySet",
          "displayName": "Iteration over 'keySet()' may be optimized",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports iteration over the <b>keySet()</b> of a <b>java.util.Map</b> instance,\nwhere the iterated keys are used to retrieve the values from the map. Such\niteration may be more efficiently replaced by iteration over the\n<b>entrySet()</b> or <b>values()</b> (if key is not actually used). \nSimilarly <b>keySet().forEach(key -> ...)</b>\ncan be replaced with <b>forEach((key, value) -> ...)</b> if values are retrieved\ninside lambda.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ArraysAsListWithZeroOrOneArgument",
          "displayName": "Call to 'Arrays.asList()' with too few arguments",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Arrays.asList()</b> with zero arguments or only one argument. Such calls could be replaced\nwith either a call to <b>Collections.singletonList()</b> or <b>Collections.emptyList()</b> which will save some memory.\n<p>Note: the list returned by <b>Collections.singletonList()</b> is immutable, while the list returned <b>Arrays.asList()</b> allows\ncalling the <b>set()</b> method. This may break the code in rare cases.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ToArrayCallWithZeroLengthArrayArgument",
          "displayName": "'Collection.toArray()' call style",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThere are two styles to convert a collection to an array: either using a pre-sized array\n(like <b>c.toArray(new String[c.size()])</b>) or using an empty array (like\n<b>c.toArray(new String[0])</b>.\n<p>\n  In older Java versions using pre-sized array was recommended, as the reflection\n  call which is necessary to create an array of proper size was quite slow.\n  However since late updates of OpenJDK 6 this call was intrinsified, making\n  the performance of the empty array version the same and sometimes even better, compared\n  to the pre-sized version. Also passing pre-sized array is dangerous for a concurrent or\n  synchronized collection as a data race is possible between the <b>size</b> and <b>toArray</b>\n  call which may result in extra nulls at the end of the array, if the collection was concurrently\n  shrunk during the operation.\n</p>\n<p>\n  This inspection allows to follow the uniform style: either using an empty array\n  (which is recommended in modern Java)\n  or using a pre-sized array (which might be faster in older Java versions or non-HotSpot based JVMs).\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "TrivialStringConcatenation",
          "displayName": "Concatenation with empty string",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports string concatenations where one of the arguments is the\nempty string. Such a concatenation is unnecessary and inefficient, particularly when used as\nan idiom for formatting non-String objects or primitives into Strings.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant default attribute value assignment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for redundant default XML attribute value assignment.\n</body>\n</html>"
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated elements",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for deprecated XML elements.\n<p>The elements can be marked by XML comment or documentation tag with text \"deprecated\".\n</body>\n</html>"
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved ID",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for unresolved \"id\" attributes in XML.\n</body>\n</html>"
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "XML tag empty body",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>empty</b> tag body.\nThe validation works in XML / JSP / JSPX / HTML/ XHTML file types. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate ID",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for duplicate \"id\" attributes in XML.\n</body>\n</html>"
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "File path resolving in XML",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights unresolved file references in XML.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedClassUsageInspection",
          "displayName": "Deprecated API usage in XML",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for usages of deprecated classes and methods in XML.\n</body>\n</html>"
        },
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks if root tag name is the same as in &lt;doctype&gt;. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused XML schema declaration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for unused namespace declarations and location hints in XML\n</body>\n</html>"
        },
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "File does not pass external validation",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThoroughly checks XML files for DTD / schema compliance using Xerces validator.\nThe validation works in XML or XHTML file types. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound XML namespace prefix",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for unbound namespace prefixes in XML.\n</body>\n</html>"
        },
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nChecks consistency of <b>DTD</b> specific references, e.g. references to XML entity or to DTD element declaration.\nThe validation works in DTD or XML file types. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights XML validation problems in the results of batch code inspection.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "PHPDoc",
      "inspections": [
        {
          "shortName": "PhpRedundantVariableDocTypeInspection",
          "displayName": "Redundant @var tag",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>@var</code> tags for variables whose type is already inferred from source code.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantDocCommentInspection",
          "displayName": "Redundant PHPDoc comment",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the PHPDoc comments that contain only the information already provided in declarations.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocRedundantThrowsInspection",
          "displayName": "Redundant @throws tag(s)",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the <code>@throws</code> tags for exceptions that are not thrown by the function/method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocMissingThrowsInspection",
          "displayName": "Missing @throws tag(s)",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Checks that the PHPDoc block contains the <code>@throws</code> tag for each exception thrown by a function/method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocFieldTypeMismatchInspection",
          "displayName": "Type doesn't match property's declared type",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports type mismatches in PHPDoc @var tags\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpInappropriateInheritDocUsageInspection",
          "displayName": "Inappropriate @inheritDoc usage",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports inappropriate <code>@inheritDoc</code> usages:\n  <ul>\n    <li>\n      On non-class members\n    </li>\n    <li>\n      On class members without any super members having a doc comment.\n    </li>\n  </ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingDocCommentInspection",
          "displayName": "Missing PHPDoc comment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the elements without a PHPDoc comment specified.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDocMissingReturnTagInspection",
          "displayName": "Missing @return tag",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Checks that the PHPDoc block for a function/method contains the <code>@return</code> tag.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocSignatureInspection",
          "displayName": "PHPDoc comment matches function/method signature",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Checks that the number of parameters, their names, or types (if any) in a PHPDoc comment matches the ones in the function/method declaration.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNonCanonicalElementsOrderInspection",
          "displayName": "Non-canonical order of elements",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the PHPDoc tags that have elements listed in non-canonical order.\n  <p>For example, for such tags as <code>@property</code>, <code>@param</code>, or <code>@var</code>, the inspection will report the usages of <code>[name] [\"Type\"]</code> instead of <code>[\"Type\"] [name]</code>.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocDuplicateTypeInspection",
          "displayName": "Type already exists in PHPDoc tag",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate types in PHPDoc comments.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "AssignmentToCatchBlockParameter",
          "displayName": "Assignment to catch block parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to variable declared as a <b>catch</b> block parameter.\nWhile occasionally intended, this construct can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to a\nvariable declared as a method parameter. It also reports any attempt to increment or decrement the variable.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports an assignment being\nused as the condition of an <b>if</b>, <b>while</b>, <b>for</b> or\n<b>do</b> statement. While occasionally intended,\nthis usage is confusing, and often indicates a typo\n(<b>=</b> instead of <b>==</b>).\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToForLoopParameter",
          "displayName": "Assignment to 'for' loop parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports assignment to, or modification of <b>for</b> statement parameters inside the body of a <b>for</b> loop.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n<p>\nAssignments in basic <b>for</b> loops without an update statement are not reported.\nIn these cases the assignment is probably intended and can't be easily moved to the update part of the <b>for</b> loop.\nFor example:\n<pre><code>\n  <b>for</b> (<b>int</b> i = 0; i &lt; list.size(); ) {\n    <b>if</b> (element.equals(list.get(i))) {\n      list.remove(i);\n    } <b>else</b> {\n      i++; // modification of for loop parameter\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToSuperclassField",
          "displayName": "Constructor assigns value to field defined in superclass",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any assignments to fields from a superclass from within a constructor. It is usually better to call a constructor of the\nsuperclass to initialize the fields.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignment",
          "displayName": "Assignment replaceable with operator assignment",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports assignment operations which can be replaced by operator-assignment. Code\nusing operator assignment may be clearer, and theoretically more performant.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore the conditional operators <b>&amp;&amp;</b>\nand <b>||</b>. Replacing conditional operators with operator\nassignment modifies the semantics of the expression.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedAssignment",
          "displayName": "Result of assignment used",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions. While admirably terse,\nsuch expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToLambdaParameter",
          "displayName": "Assignment to lambda parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to a lambda parameter, this includes compound assignments and incrementing or decrementing the parameter.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToNull",
          "displayName": "'null' assignment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the assignment of a variable to\n<b>null</b>, outside of declarations.\nWhile occasionally useful for triggering garbage collection, this\nconstruct may make the code more prone\nto NullPointerExceptions, and often indicates that the developer doesn't\nreally understand the class's intended semantics.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore assignments to fields.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IncrementDecrementUsedAsExpression",
          "displayName": "Value of ++ or -- used",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports increment or decrement expressions nested inside other expressions.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a\ngiven construct should do precisely one thing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToStaticFieldFromInstanceMethod",
          "displayName": "Assignment to static field from instance context",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any assignments to <b>static</b> fields from within\ninstance methods. While legal, such assignments are tricky to do\nsafely, and are often a result of fields being inadvertently marked\n<b>static</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects missing semicolon at the end of declarations. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights zero values with specified unit of measurement.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Control flow",
      "inspections": [
        {
          "shortName": "PhpUnreachableStatementInspection",
          "displayName": "Unreachable statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the statements that cannot be normally reached.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpArrayWriteIsNotUsedInspection",
          "displayName": "Array write access is not used",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the array write access expressions that are not used in code afterwards. The most common source of such problems is modifying an array passed via a parameter: if an array is passed by value, the change will not be visible outside the function.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTypedPropertyMightBeUninitializedInspection",
          "displayName": "Typed Property might be uninitialized",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the attempts to read from an uninitialized typed property. Such attempts will result in <code>TypeError</code>.\n<p>\n  Typed properties should be initialized in any of the following ways:\n</p>\n<ul>\n  <li>by a default value</li>\n  <li>in the constructor</li>\n  <li>by the <code>__get()</code> magic getter</li>\n  <li>in-place, at the moment of usage</li>\n</ul>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/typed_properties_v2#uninitialized_and_unset_properties\">Uninitialized and Unset Properties (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpInstanceofIsAlwaysTrueInspection",
          "displayName": "Result of 'instanceof' is always 'true'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>instanceof</code> expressions whose argument is within the hierarchy of the checked variable. Such expressions will always evaluate to <code>true</code>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpressionAlwaysNullInspection",
          "displayName": "Expression is always 'null'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports return variables which are effectively 'null'\n</body>\n</html>"
        },
        {
          "shortName": "PhpLoopNeverIteratesInspection",
          "displayName": "Loop does not iterate",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the loop statements whose bodies will execute at most once.\n\n<p>\n  The inspection does not report <code>foreach</code> loops with a key or value used inside the loop body. Commonly, such loops are intended to perform an action only on their first iteration (for example, get the first element of an array).\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpressionAlwaysConstantInspection",
          "displayName": "Variable is always true/false when reached",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports variables that are always <code>true</code> (or always <code>false</code>) when reached.\n</body>\n</html>"
        },
        {
          "shortName": "PhpConditionAlreadyCheckedInspection",
          "displayName": "Condition always evaluates to 'true/false'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the conditions that are already covered by earlier conditions and thus have no effect.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "UnresolvedPropertyKey",
          "displayName": "Invalid property key",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nVerifies that arguments passed to functions\nwith parameters annotated as <b>@PropertyKey</b> are valid property keys in the\nrespective properties files. Also verifies that the <b>resourceBundle</b>\nargument of the <b>@PropertyKey</b> annotation is an existing resource bundle.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Class structure",
      "inspections": [
        {
          "shortName": "ClassInitializer",
          "displayName": "Non-'static' initializer",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any non-<b>static</b> initializers\nin classes. Some coding standards prohibit instance initializers, preferring initialization to be done\nin constructors or field initializers. Non-<b>static</b> initializers\nmay also be inadvertently created by deleting the <b>static</b> keyword,\nresulting in obscure bugs.\nThis inspection does not warn on instance initializers in anonymous classes.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore instance initializers in classes which do not have any constructors.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassOnInterface",
          "displayName": "Inner class of interface",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports inner classes\nof <b>interface</b> classes. Some coding standards\ndiscourage such classes. Enumeration classes and annotation classes are not reported\nby this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodReturnAlwaysConstant",
          "displayName": "Method returns per-class constant",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which only ever return a constant, probably different for different inheritors.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ListenerMayUseAdapter",
          "displayName": "Class may extend adapter instead of implementing listener",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which implement a listener, but may extend\nthe corresponding adapter instead. The quickfix for this inspection will also\nremove any redundant empty methods left over after replacing the implementation\nof the listener with an extension of the corresponding adapter.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate if the inspection should warn even if no empty\nimplementing methods are found.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantDeclaredInInterface",
          "displayName": "Constant declared in interface",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any constants (i.e. <b>public static final</b> fields) declared in interfaces.\nSome coding standards require that constants be declared in abstract classes instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassCanBeEnum",
          "displayName": "Utility class can be 'enum'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes that can be converted to an <b>enum</b>.\nTo avoid code coverage problems in <b>private</b> constructors, some coding styles mandate that utility classes are implemented as enums.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalUtilityClass",
          "displayName": "Utility class is not 'final'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes which are not final.\nUtility classes have all fields and methods declared <b>static</b>. Giving such classes making them <b>final</b>\n prevents them from being inadvertently subclassed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "FieldCanBeLocal",
          "displayName": "Field can be local",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection searches for redundant class fields that can be replaced with local variables.\nIf all local usages of a field are preceded by assignments to that field, the\nfield can be removed and its usages replaced with local variables.\n</body>\n</html>\n"
        },
        {
          "shortName": "FinalMethod",
          "displayName": "'final' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods being declared <b>final</b>. Some coding\nstandards discourage <b>final</b> methods.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicConstructorInNonPublicClass",
          "displayName": "'public' constructor in non-public class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports all constructors in non-<b>public</b>\nclasses that are declared <b>public</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalStaticMethod",
          "displayName": "'static' method declared 'final'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports static methods that are marked <code>final</code>.<br>\nSuch code may indicate an error or incorrect assumption about the effect of the <code>final</code> keyword.\nStatic methods are not subject to runtime polymorphism, so the only purpose of the <code>final</code> keyword with static methods\nis to ensure the method will not be hidden in a subclass.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousInnerClass",
          "displayName": "Anonymous inner class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any anonymous inner classes.\nSome code standards discourage the use of anonymous inner classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MarkerInterface",
          "displayName": "Marker interface",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"marker\" interfaces which have no methods or fields.\nSuch interfaces may be confusing, and normally indicate a design failure.\nInterfaces which extend two or more other interfaces or interfaces\nwhich specialize the generic type of their superinterface will not be reported by\nthis inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LimitedScopeInnerClass",
          "displayName": "Limited-scope inner class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any limited-scope inner classes. Some code standards discourage\nthe use of limited-scope inner classes, and they are unusual enough as to possibly be\nconfusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Singleton",
          "displayName": "Singleton",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports singleton classes.\nSingleton classes are declared so that only one instance of the\nclass may ever be instantiated. Singleton classes complicate testing,\nand their presence may indicate a lack of object-oriented design.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClass",
          "displayName": "Utility class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes.\nUtility classes have all fields and methods declared <b>static</b>, and their\npresence may indicate a lack of object-oriented design.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Classes annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalFieldInEnum",
          "displayName": "Non-'final' field in enum",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>final</b> fields in enumeration types. A non-<b>final</b> field in an enum is rarely needed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassWithPublicConstructor",
          "displayName": "Utility class with 'public' constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports utility classes with <b>public</b> constructors. Utility\nclasses have all fields and methods declared <b>static</b>. Giving such classes a <b>public</b>\nconstructor is confusing, and may lead to the class being inadvertently instantiated.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassWithoutPrivateConstructor",
          "displayName": "Utility class without 'private' constructor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes which do not have <b>private</b> constructors.\nUtility classes have all fields and methods declared <b>static</b>. Giving such classes a <b>private</b>\nconstructor prevents them from being inadvertently instantiated.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Classes annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to ignore classes which only have a main method and no other methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalMethodInFinalClass",
          "displayName": "'final' method in 'final' class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods being declared <b>final</b> in\nclasses that are declared <b>final</b>. This is unnecessary, and may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithOnlyPrivateConstructors",
          "displayName": "Class with only 'private' constructors should be declared 'final'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes with only <b>private</b> constructors.\nSuch a class cannot be extended outside its containing file and should be declared <b>final</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MultipleTopLevelClassesInFile",
          "displayName": "Multiple top level classes in single file",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports multiple top-level classes in a single java file. Putting multiple\ntop-level classes in a file can be confusing, and may degrade the usefulness of various\nsoftware tools.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalPrivateMethod",
          "displayName": "'private' method declared 'final'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports methods\ndeclared <b>final</b> and <b>private</b>.\nAs <b>private</b> methods cannot be meaningfully overridden, declaring them\n<b>final</b> is redundant.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NoopMethodInAbstractClass",
          "displayName": "No-op method in abstract class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"no-op\" methods in <b>abstract</b> classes. It is usually a better\ndesign to make such methods <b>abstract</b> themselves, so that classes which inherit the methods will not forget to provide\ntheir own implementations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterCanBeLocal",
          "displayName": "Parameter can be local",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n\nThis inspection searches for redundant method parameters that can be replaced with local variables.\nIf all local usages of a parameter are preceded by assignments to that parameter, the\nparameter can be removed and its usages replaced with local variables.\n</body>\n</html>\n"
        },
        {
          "shortName": "ClassMayBeInterface",
          "displayName": "Abstract class may be interface",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>abstract</b> classes which can be converted to interfaces.\nA class may be converted to an interface if it has no superclass (other\nthan Object), has no fields declared that are not <b>static</b>, <b>final</b>, and <b>public</b>, and has no\nmethods declared that are not <b>public</b> and <b>abstract</b> and no inner classes that are not <b>public</b>.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to report classes containing <b>static</b> methods and non-abstract methods which can be converted to <b>default</b>\n  methods, when using a language level of 8 or higher .\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptyClass",
          "displayName": "Empty class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty classes and Java files without any defined classes. A class is empty if it\ndoesn't have any fields, methods, constructors or initializers. Empty classes are often left over\nafter large changes or refactorings.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Classes annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the first checkbox below to ignore classes which parameterize a super class, for example\n<pre><code><b>class</b> MyList <b>extends</b> ArrayList&lt;String&gt; {}</code></pre>\n<p>\nUse the second checkbox below to ignore classes which extend <b>java.lang.Throwable</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticNonFinalField",
          "displayName": "'static', non-'final' field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>final</b> <b>static</b> fields.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection only report on <b>public</b> fields.\n</body>\n</html>"
        },
        {
          "shortName": "FinalClass",
          "displayName": "'final' class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes being declared <b>final</b>. Some coding\nstandards discourage <b>final</b> classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantDeclaredInAbstractClass",
          "displayName": "Constant declared in abstract class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any constants (i.e. <b>public static final</b> fields) declared in abstract\nclasses. Some coding standards require that constants be declared in interfaces instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceMayBeAnnotatedFunctional",
          "displayName": "Interface may be annotated @FunctionalInterface",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>interface</b> that may be annotated as <b>@FunctionalInterface</b>, which is available in JDK 1.8.\nAnnotating an interface with <b>@FunctionalInterface</b> can be useful to indicate that the interface is supposed to be functional and\nfurther <b>abstract</b> methods should not be added to it.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedMemberInFinalClass",
          "displayName": "'protected' member in 'final' class",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports members being declared <b>protected</b> in\nclasses that are declared <b>final</b>. Such members may be declared <b>private</b>\nor package-visible instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNameDiffersFromFileName",
          "displayName": "Class name differs from file name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports top-level class names which do not match the name of\ntheir containing file. While the Java specification allows such naming for non-<b>public</b> classes,\nsuch misnamed files can be confusing, and may degrade the usefulness of various\nsoftware tools.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicConstructor",
          "displayName": "'public' constructor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> constructors. Some coding standards discourage <b>public</b> constructors, preferring to use\n<b>static</b> factory methods. This way the implementation can be swapped out without affecting the call sites.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Core",
      "inspections": [
        {
          "shortName": "SpringElInspection",
          "displayName": "Spring EL",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks Spring Expression Language (SpEL) problems."
        },
        {
          "shortName": "SpringHandlersSchemasHighlighting",
          "displayName": "Spring custom namespace registration",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates spring.handlers/spring.schemas files"
        },
        {
          "shortName": "SpringElStaticFieldInjectionInspection",
          "displayName": "Spring EL in static fields",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Check injecting to static fields.\nSpring does not allow injecting to static fields ('null' value is injected)."
        }
      ]
    },
    {
      "name": "Code maturity",
      "inspections": [
        {
          "shortName": "ThrowablePrintedToSystemOut",
          "displayName": "'Throwable' printed to 'System.out'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to <b>System.out.println()</b> with an exception as an argument.\nThis is even worse than calling <b>printStackTrace()</b> on an exception, since it will be unclear where the exception originated.\nCalls to <b>System.out.print()</b>, <b>System.err.println()</b> and <b>System.err.print()</b> with an exception argument will also be\nreported.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedIsStillUsed",
          "displayName": "Deprecated member is still used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated classes, methods and fields which are used in your code nonetheless.\n<br>\nFor example:\n\n<pre>\n<b><font color=\"#000080\">class</font></b> MyCode {\n  @Deprecated\n  // warning: \"Deprecated member is still used\"\n  <b><font color=\"#000080\">void</font></b> <span style=\"background-color: yellow;\">oldMethod</span>() {}\n\n  <b><font color=\"#000080\">void</font></b> newMethod() {\n    oldMethod(); // forgotten usage\n  }\n}\n</pre>\n(Usages from within deprecated places are ignored).\n</body>\n</html>"
        },
        {
          "shortName": "Deprecation",
          "displayName": "Deprecated API usage",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports where deprecated code is used in the specified inspection scope.\n</body>\n</html>\n"
        },
        {
          "shortName": "ThrowablePrintStackTrace",
          "displayName": "Call to 'printStackTrace()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to <b>Throwable.printStackTrace()</b> without arguments.\nSuch statements are often used for temporary debugging, and should probably be either removed from production code,\nor replaced with a more robust logging facility.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ObsoleteCollection",
          "displayName": "Use of obsolete collection type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any uses of <b>java.util.Vector</b>\n, <b>java.util.Hashtable</b> and <b>java.util.Stack</b>.\nUsages of these classes can most often be replaced by uses of\n<b>java.util.ArrayList</b>, <b>java.util.HashMap</b> and <b>java.util.ArrayDeque</b> respectively.\nWhile still supported,\nthe former classes were made obsolete by the JDK1.2 collection classes, and should probably\nnot be used in new development.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore any cases where the obsolete collections are used\nas an argument to a method or assigned to a variable that requires the obsolete type.\nEnabling this option is potentially quite processor intensive.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadDumpStack",
          "displayName": "Call to 'Thread.dumpStack()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any uses <b>Thread.dumpStack()</b>.\nThese are often temporary debugging statements, and should probably be either removed from production code,\nor replaced by a more robust logging facility.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CommentedOutCode",
          "displayName": "Commented out code",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports comments that contain Java code.\n<!-- tooltip end -->\n<p><small>New in 2020.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "SystemOutErr",
          "displayName": "Use of System.out or System.err",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any uses of <b>System.out</b> or <b>System.err</b>.\nThese are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust\nlogging facility.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UseOfObsoleteDateTimeApi",
          "displayName": "Use of obsolete date-time API",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.util.Date</b>, <b>java.util.Calendar</b>, <b>java.util.GregorianCalendar</b>, <b>java.util.TimeZone</b>,\nand <b>java.util.SimpleTimeZone</b>.\nWhile still supported, these classes were made obsolete by the JDK8 Date-Time API, and should probably\nnot be used in new development.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MarkedForRemoval",
          "displayName": "Usage of API marked for removal",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of deprecated API (classes, fields, and methods) which are marked for removal with\n<code>@Deprecated(<b>forRemoval</b>=true)</code>\n<!-- tooltip end -->\n<p>\n  The code that uses API marked for removal may cause a runtime error with a future version of the API.<br>\n  The recommended severity of this inspection is <i>Error</i> to emphasize that.\n<p>\n  You may change the severity of this inspection to <i>Warning</i> if you want the same text decoration as ordinary deprecation has.\n<p>\n  <small>New in 2017.3</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "SuppressionAnnotation",
          "displayName": "Inspection suppression annotation",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any inspection suppression comments or annotations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "ParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression expected for method parameter names.\nSpecify <b>0</b> to not check the length of names. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverloadedVarargsMethod",
          "displayName": "Overloaded varargs method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports varargs methods with the same name as other methods in the class or in a superclass.\nOverloaded methods which take a variable number of arguments can be very confusing,\nas it is often not clear which overloading gets called.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StandardVariableNames",
          "displayName": "Standard variable names",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any variables with 'standard' names which are of unexpected types.\nSuch names may be confusing. Standard names and types are as follows:\n<ul>\n<li>i, j, k, m, n  - <b>int</b> </li>\n<li>f  - <b>float</b> </li>\n<li>d  - <b>double</b> </li>\n<li>b  - <b>byte</b> </li>\n<li>c, ch  - <b>char</b> </li>\n<li>l - <b>long</b> </li>\n<li>s, str - <b>String</b> </li>\n</ul>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore parameter names which are identical to the parameter name from a direct super method.\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldNamingConvention",
          "displayName": "Field naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n  Use list below to specify which fields should be checked.\n  For each field type use the fields to specify minimum length, maximum length and regular expression expected for class names.\n  Specify <b>0</b> in length fields to skip corresponding checks. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingMainMethod",
          "displayName": "Confusing 'main()' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods named \"main\" which do not have signature\npublic static void main(String[]). Such methods may be confusing, as methods named \"main\"\nare expected to be application entry points.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodNameSameAsClassName",
          "displayName": "Method name same as class name",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports methods being named identically to their class.\nA method with such a name may be easily mistaken for a constructor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression expected for local variables names.\nSpecify <b>0</b> to not check the length of names. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NewMethodNamingConvention",
          "displayName": "Method naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern. Instance methods that override library\nmethods and constructors are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n  Use list below to specify which methods should be checked. When unchecked, common instance/static method name pattern <b>won't be applied</b>.\n  For each type use the fields to specify minimum length, maximum length and regular expression expected for method names.\n  Specify <b>0</b> in length fields to skip corresponding checks. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "DollarSignInName",
          "displayName": "Use of '$' in identifier",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports identifers containing dollar signs ('$'). While\nsuch identifiers are legal Java, their use outside of generated java code is strongly discouraged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageNamingConvention",
          "displayName": "Package naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression matching valid package names\n(Regular expressions are in standard <b>java.util.regex</b> format).\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledMethodName",
          "displayName": "Method names differing only by case",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on cases where multiple methods of a class have names which differ only by\ncase. Such method names may be very confusing.\n<!-- tooltip end -->\n<p>Use the checkbox below to ignore methods overriding or implementing a method from a superclass.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterNamingConvention",
          "displayName": "Lambda parameter naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda parameters whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression expected for lambda parameter names.\nSpecify <b>0</b> to not check the length of names. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n<small>New in 15</small>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionNameDoesntEndWithException",
          "displayName": "Exception class name does not end with 'Exception'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports exception classes whose names don't end with 'Exception'.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaModuleNaming",
          "displayName": "Java module naming conventions",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThe inspection detects situations when a module name contradicts Java Platform Module System recommendations.\n<br>Example:\n<code>module <b>foo1.bar2</b> { }</code>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaUnfriendlyMethodOverload",
          "displayName": "Lambda-unfriendly method overload",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports overloaded methods that take functional interfaces with conflicting abstract method signatures.\nSuch overloads introduce ambiguity and require callers to cast lambdas to a specific type or specify lambda parameter types explicitly.\nIt is preferable to give the overloaded methods different names to eliminate ambiguity.\n<!-- tooltip end -->\n<p>Example:</p>\n<pre>\ninterface MyExecutor {\n  void execute(Supplier<?> supplier);\n  void execute(Callable<?> callable);\n}\n</pre>\n<p>\nHere, <code>Supplier</code> and <code>Callable</code> are functional interfaces\nwhose single abstract methods don’t take any parameters and return a non-void value.\nAs a result, the type of the lambda can’t be inferred at the call site unless an explicit cast is used.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NonBooleanMethodNameMayNotStartWithQuestion",
          "displayName": "Non-boolean method name must not start with question word",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-boolean methods whose names start with a question\nword. Non-boolean methods that override library methods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the list below to specify question words which should only be used for boolean methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NewClassNamingConvention",
          "displayName": "Class naming convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n  Use list below to specify which classes should be checked. When unchecked, common class name patterns <b>won't be applied</b>. \n  For each class type use the fields to specify minimum length, maximum length and regular expression expected for class names.\nSpecify <b>0</b> in length fields to skip corresponding checks. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterNameDiffersFromOverriddenParameter",
          "displayName": "Parameter name differs from parameter in overridden method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports parameters that have different names from the corresponding\nparameters in the methods they override. While legal in Java, such inconsistent names may be confusing,\nand lessen the documentation benefits of good naming practices.\n<!-- tooltip end -->\n<p>\nUse the checkboxes below to indicate whether overridden parameter names which are only\na single character long or come from a library method should be ignored. Both can be useful if\nyou do not wish to be bound by dubious naming conventions used in libraries.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "QuestionableName",
          "displayName": "Questionable name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any variables, methods, or classes with questionable names.\nThis inspection is best used to report common metasyntactic variables which may be\nused as names by lazy or confused developers.\n<!-- tooltip end -->\n<p>\nUse the list below to specify names which should be reported\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodNameSameAsParentName",
          "displayName": "Method name same as parent class name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods being named identically to the superclass of the method's class.\nSuch a method name may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNameSameAsAncestorName",
          "displayName": "Class name same as ancestor name",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports class being named identically to one of their\nsuper classes (but in different packages). Such class name may be very confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverloadedMethodsWithSameNumberOfParameters",
          "displayName": "Overloaded methods with same number of parameters",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on cases where multiple methods in the same class are declared\nwith an identical name and the same number of parameters.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore overloaded methods whose parameter types are definitely incompatible.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNamePrefixedWithPackageName",
          "displayName": "Class name prefixed with package name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are prefixed with their package names, irrespective of\ncapitalization. While occasionally reasonable, this is often due to a poor naming scheme, and may be redundant and\nannoying.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanMethodNameMustStartWithQuestion",
          "displayName": "Boolean method name must start with question word",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean methods whose names do not start with a question\nword. Boolean methods that override library methods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the list below to specify acceptable question words to start boolean method names with.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UpperCaseFieldNameNotConstant",
          "displayName": "Non-constant field with upper-case name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>static</b> non-<b>final</b>\nfields whose names are all upper-case. Such fields may cause confusion by breaking a common naming convention, and\nare often the result of developer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonExceptionNameEndsWithException",
          "displayName": "Non-exception class name ends with 'Exception'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports non-exception classes whose names end with 'Exception'.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Integration",
      "inspections": [
        {
          "shortName": "SpringIntegrationDeprecations21",
          "displayName": "Spring Integration 2.1 deprecations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Spring Integration 2.1 Deprecations (XML).\n<p/>\nPlease see <a href=\"https://github.com/SpringSource/spring-integration/wiki/Spring-Integration-2.0-to-2.1-Migration-Guide\">Migration Guide</a>."
        },
        {
          "shortName": "UnresolvedMessageChannel",
          "displayName": "Unresolved Message Channel",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Highlights unresolved channel attributes in @Gateway, @ServiceActivator, etc."
        },
        {
          "shortName": "SpringIntegrationModel",
          "displayName": "Spring Integration model",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring Integration Model Inspection.\n"
        },
        {
          "shortName": "SpringIntegrationMethodEndpointInconsistency",
          "displayName": "Spring Integration endpoint methods errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Spring Integration endpoint methods errors."
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "AbstractBeanReferencesInspection",
          "displayName": "Abstract beans references",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validate that references are not abstract beans"
        },
        {
          "shortName": "SpringBeanDepedencyCheckInspection",
          "displayName": "Spring bean dependency check",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Dependency checking for collaborators, primitive types and collections"
        },
        {
          "shortName": "SpringBeanAttributesInspection",
          "displayName": "Spring bean attributes",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Validates Spring <strong>&lt;bean&gt;</strong> attributes."
        },
        {
          "shortName": "DuplicatedBeanNamesInspection",
          "displayName": "Duplicate bean name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks duplicated bean names"
        },
        {
          "shortName": "ContextComponentScanInconsistencyInspection",
          "displayName": "Context component scan",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Component-scan inconsistencies"
        },
        {
          "shortName": "SpringXmlAutowireExplicitlyInspection",
          "displayName": "Autowired dependencies",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Make autowired dependencies explicit"
        },
        {
          "shortName": "SpringInactiveProfileHighlightingInspection",
          "displayName": "Inactive profile highlighting",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Highlights inactive profiles in Spring XML contexts."
        },
        {
          "shortName": "SpringBeanConstructorArgInspection",
          "displayName": "Constructor tag injection",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validate Constructor Arg Injection"
        },
        {
          "shortName": "SpringFactoryMethodInspection",
          "displayName": "Spring bean factory method",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates <strong>&lt;bean&gt;</strong> \"factory-method\"."
        },
        {
          "shortName": "SpringPlaceholdersInspection",
          "displayName": "Spring placeholders",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Placeholders resolve errors"
        },
        {
          "shortName": "SpringScopesInspection",
          "displayName": "Spring scopes",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates <strong>&lt;bean&gt;</strong> \"scope\" attribute"
        },
        {
          "shortName": "InjectionValueTypeInspection",
          "displayName": "Injection value type",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks value types for Spring injections (properties & constructor arguments)"
        },
        {
          "shortName": "UtilSchemaInspection",
          "displayName": "Util schema",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates Spring \"util\" scheme tags."
        },
        {
          "shortName": "SpringBeanInstantiationInspection",
          "displayName": "Spring bean instantiation",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring Bean Instantiation Inspection"
        },
        {
          "shortName": "SpringBeanLookupMethodInspection",
          "displayName": "Lookup method",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates nested <strong>&lt;lookup-method&gt;</strong> in <strong>&lt;bean&gt;</strong>"
        },
        {
          "shortName": "SpringInjectionValueConsistencyInspection",
          "displayName": "Injection value consistency",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring Injection Value Consistency Inspection"
        },
        {
          "shortName": "SpringIncorrectResourceTypeInspection",
          "displayName": "Incorrect resource type",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validates resource type (e.g. file type)"
        },
        {
          "shortName": "SpringRequiredPropertyInspection",
          "displayName": "Required properties",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks bean properties marked with @Required annotation.<br>\nSee also <strong>Required Annotation Inspection</strong>"
        },
        {
          "shortName": "SpringInjectionValueStyleInspection",
          "displayName": "Spring injection value style",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks for injection values set via <strong>&lt;value&gt;</strong> or\n<strong>&lt;ref&gt;</strong> subtags and offers to replace them with corresponding attributes."
        },
        {
          "shortName": "SpringXmlModelInspection",
          "displayName": "Spring model",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "Spring XML model validation"
        },
        {
          "shortName": "SpringBeanNameConventionInspection",
          "displayName": "Spring bean names convention",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Checks bean id to comply with recommended naming conventions."
        },
        {
          "shortName": "RequiredBeanTypeInspection",
          "displayName": "Required bean type",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Checks bean reference for required bean type."
        },
        {
          "shortName": "UnparsedCustomBeanInspection",
          "displayName": "Unparsed custom Spring beans",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Reports custom Spring beans of unknown type (corresponding custom namespace handler not run yet)."
        },
        {
          "shortName": "SpringPublicFactoryMethodInspection",
          "displayName": "Spring bean public factory method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "Validates method referenced in <strong>&lt;bean&gt;</strong> \"factory-method\" is <code>public</code>."
        },
        {
          "shortName": "SpringXmlAutowiringInspection",
          "displayName": "Spring bean autowiring",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "Checks autowiring problems in a Spring bean defined in XML context"
        }
      ]
    },
    {
      "name": "Java 14",
      "inspections": [
        {
          "shortName": "PatternVariableCanBeUsed",
          "displayName": "Pattern variable can be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports local variable declarations that can be replaced with pattern variables. E.g.:\n<pre><code>\n  if (obj instanceof String) {\n    String str = (String) obj;\n    System.out.println(str);\n  }\n</code></pre>\nCan be replaced with:\n<pre><code>\n  if (obj instanceof String str) {\n    System.out.println(str);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 (Preview) or higher</p>\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EnhancedSwitchMigration",
          "displayName": "Statement can be replaced with enhanced 'switch'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>switch</code> statements which can be replaced with an enhanced <code>switch</code> statement or expression.\n\n<!-- tooltip end -->\n<p>This inspection only applies to language level 14 or higher</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EnhancedSwitchBackwardMigration",
          "displayName": "New style 'switch' can be replaced with old style one",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports enhanced <b>switch</b> statements and expressions which can be replaced with a traditional <b>switch</b> statement.\n\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring WebSocket",
      "inspections": [
        {
          "shortName": "SpringWebSocketConfigurationInspection",
          "displayName": "Spring WebSocket model",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Spring WebSocket configuration errors"
        }
      ]
    },
    {
      "name": "Abstraction issues",
      "inspections": [
        {
          "shortName": "DeclareCollectionAsInterface",
          "displayName": "Collection declared by class, not interface",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on declarations of Collection variables made by using the collection class as the type,\nrather than an appropriate interface.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceMethodClashesWithObject",
          "displayName": "Interface method clashes with method in 'java.lang.Object'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports interface methods that clash with the <b>protected</b> methods <code>clone()</code> and <code>finalize()</code> in <code>java.lang.Object</code>.\nIn an interface it is possible to declare those methods with a return type that is incompatible with the <code>java.lang.Object</code> methods.\nThis makes it impossible to create a class implementing such an interface.\nWhen the interface is functional it remains possible to create a lambda from it, but this can still be confusing.\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "ParameterOfConcreteClass",
          "displayName": "Method parameter of concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any method parameters whose type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore method parameters whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofInterfaces",
          "displayName": "'instanceof' a concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on uses of <b>instanceof</b> or <b>getClass() == SomeClass.class</b> where the type checked for is a concrete class,\nrather than an interface. Such uses often indicate excessive coupling to concrete implementations, rather\nthan abstractions. <b>instanceof</b> expressions whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore <b>instanceof</b> on abstract classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofThis",
          "displayName": "'instanceof' check for 'this'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on uses of <b>instanceof</b> or <b>getClass() == SomeClass.class</b> where the\nexpression checked is <b>this</b>. Such expressions\nare indicative of a failure of object-oriented design, and should be replaced by\npolymorphic constructions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CastToConcreteClass",
          "displayName": "Cast to a concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports casting a value to a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nCasts to system or library classes and casts inside <b>equals()</b> and <b>clone()</b> methods will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore casts to abstract classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticMethodOnlyUsedInOneClass",
          "displayName": "Static member only used from one other class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> methods and fields which\nare only used from a different class than the class containing the\nmethod. Such members could be moved into the using class.\nFactory methods and members accessed from an anonymous class inside the member's class are ignored by this inspection.\nConvenience overloads, which call a method with the same name in the same class, but have fewer parameters, are also ignored.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection not report when the static member is only used from a test class.\n<p>\nUse the second checkbox below to ignore member usages from inside anonymous, local and non-static inner classes.\n<p>\nUse the third checkbox below to not warn on members which cannot be moved without problems.\nFor example because a method with an identical signature is already present in the target class.\nOr because a field or method used inside the method will not be accessible when the method is moved.\n<p>\nUse the fourth checkbox to ignore members located in utility classes.\n</body>\n</html>"
        },
        {
          "shortName": "BooleanParameter",
          "displayName": "'public' method with 'boolean' parameter",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nIt's almost always a mistake to add a <b>boolean</b> parameter to a public method (part of an API) if that method is not a setter.\nWhen reading code using such a method, it can be difficult to decipher what the <b>boolean</b> stands for without looking at\nthe source or documentation.\nThis problem is also known as <a href=\"https://ariya.io/2011/08/hall-of-api-shame-boolean-trap\">the boolean trap</a>.\nThe <b>boolean</b> parameter can often be profitably replaced with an <b>enum</b>\n<!-- tooltip end -->\n<p>\nUse the option below to only warn when a method contains more than one boolean parameter.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassReferencesSubclass",
          "displayName": "Class references one of its subclasses",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which contain references to one of their subclasses.\nSuch references may be confusing, and violate several rules of object-oriented design.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FeatureEnvy",
          "displayName": "Feature envy",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the \"Feature Envy\" code smell. Feature\nenvy is defined as occurring when a method calls methods on another class three\nor more times. Calls to library classes, parent classes, contained or containing\nclasses are not counted for purposes of this inspection. Feature\nenvy is often an indication that functionality is located in the wrong class.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableOfConcreteClass",
          "displayName": "Static field of concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>static</b> fields whose type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore static fields whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofChain",
          "displayName": "Chain of 'instanceof' checks",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any chains of <b>if</b>-<b>else</b> statements all of whose conditions are <b>instanceof</b> expressions\nor class equality expressions (e.g. comparison with <b>String.class</b>).\nSuch constructions usually indicate a failure of object-oriented design, which\ndictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains\nof type tests.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore instanceof expressions on library classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceVariableOfConcreteClass",
          "displayName": "Type of instance field is concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instance fields whose type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore instance fields whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OptionalUsedAsFieldOrParameterType",
          "displayName": "'Optional' used as field or parameter type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any uses of <b>java.util.Optional&lt;T&gt;</b>, <b>java.util.OptionalDouble</b>, <b>java.util.OptionalInt</b>,\n<b>java.util.OptionalLong</b> or <b>com.google.common.base.Optional</b> as the type for a field or a parameter.\nOptional was designed to provide a limited mechanism for library method return types where there needed\nto be a clear way to represent \"no result\".\nUsing a field with type <b>java.util.Optional</b> is also problematic if the class needs to be <b>Serializable</b>,\nwhich <b>java.util.Optional</b> is not.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "MethodOnlyUsedFromInnerClass",
          "displayName": "Private method only used from inner class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>private</b> methods, which\nare only called from an inner class of the class containing the method. Such\nmethods could be safely moved into that inner class.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore <b>private</b>\nmethods which are called from an anonymous class.\n<p>\nUse the second checkbox to ignore <b>private static</b>\nmethods which are accessed from a non-static inner class.\n<p>\nUse the third checkbox to only report <b>static</b> methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodReturnOfConcreteClass",
          "displayName": "Method return of concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods whose return type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore methods whose return type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicMethodNotExposedInInterface",
          "displayName": "'public' method not exposed in interface",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> methods in classes\nwhich are not exposed as in interface. Exposing all <b>public</b> methods via interface is important for\nmaintaining loose coupling, and may be necessary for certain component-based programming styles.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Methods annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to ignore methods of which the containing class does not\nimplement a non-library interface.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TypeMayBeWeakened",
          "displayName": "Type may be weakened",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variables which may be declared with a weaker type. For instance,\na variable may be of type <tt>ArrayList</tt>, and only the method\n<tt>isEmpty()</tt> is called on it. In this case the type\n<tt>List</tt> would do just as well.\n<!-- tooltip end -->\n<p>\nEnable the <b>Use righthand type</b> checkbox below\nto prevent weakening the left side of assignments when the right side is not\na type cast or new expression. When storing the result of a method call in a variable, it is\nuseful to retain the type of the method call result instead of unnecessarily weakening it.\n<p>\nEnable the <b>Use parameterized type</b> checkbox below\nto use the parameterized type of the collection as weakest type when\nthe object evaluated is used as an argument to a collection method with a parameter type of\n<tt>java.lang.Object</tt>.\nUse this option to prevent weakening to <tt>Object</tt> when passing an object to the collection methods\n<tt>get()</tt>, <tt>remove()</tt>,\n<tt>contains()</tt>, <tt>indexOf()</tt>,\n<tt>lastIndexOf()</tt>, <tt>containsKey()</tt> and <tt>containsValue()</tt>.\n<p>\nEnable the <b>Do not weaken to Object</b> checkbox below\nto specify whether a type should be weakened to <tt>java.lang.Object</tt>.\nWeakening to <tt>java.lang.Object</tt> is often not very useful.\n<p>\nEnable the <b>Only weaken to an interface</b> checkbox below\nto only report when the type can be weakened to an interface type.\n<p>\nEnable the <b>Do not weaken return type</b> checkbox below\nto prevent reporting when return type may be weakened.\nOnly variables will be analyzed.\n<p>\n<b>Stop classes</b> are intended to prevent weakening to classes\nlower than stop classes, even if it would be possible.\nIn some cases this may improve readability.\n</body>\n</html>\n"
        },
        {
          "shortName": "OverlyStrongTypeCast",
          "displayName": "Overly strong type cast",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports type casts which are overly strong. For instance,\ncasting an object to <b>ArrayList</b> when casting it to\n<b>List</b> would do just as well. <b>Note:</b> much like the <i>Redundant type cast</i>\ninspection, applying the fix for this inspection may change the semantics of your program, if you are\nintentionally using an overly strong cast to cause a <b>ClassCastException</b> to be generated. Use caution.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MagicNumber",
          "displayName": "Magic number",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"magic numbers\", which are numeric literals used without being named by a constant declaration.\nMagic numbers can result in code whose intention is unclear, and may result in errors if a magic\nnumber is changed in one code location but not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,\n0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to disable this inspection within <b>hashCode()</b> methods.\n<p>\nUse the second checkbox below to ignore magic numbers in annotations.\n<p>\nUse the third checkbox below to ignore magic numbers used as initial capacity when constructing <b>Collection</b>, <b>Map</b>,\n<b>StringBuilder</b> or <b>StringBuffer</b> objects.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableOfConcreteClass",
          "displayName": "Local variable of concrete class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any local variables whose type is declared to be a concrete class.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<b>catch</b> block parameters of concrete exception type will also not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore local variables whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java language level migration aids",
      "inspections": [
        {
          "shortName": "IfCanBeSwitch",
          "displayName": "'if' replaceable with 'switch'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>if</b> statements that can be replaced\nby a <b>switch</b> statement. This inspection will automatically suggest string\nswitches when the project language level is Java 7 or higher.\n<!-- tooltip end -->\n<p>\nUse the text field below to indicate the minimum number of <b>if</b> branches with condition\nan <b>if</b> statement should have to be reported.\nA terminal <b>else</b> branch (without <b>if</b>) is not counted\n<p>\nUse the first checkbox below to have this inspection suggest <b>switch</b> statements on\nprimitive and boxed numbers and characters.\n<p>\nUse the second checkbox below to have this inspection suggest switch statements on\nenum constants.\n<p>\nUse the third checkbox below to only suggest switch statements which can't introduce a <b>NullPointerException</b>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "Since15",
          "displayName": "Usages of API which isn't available at the configured language level",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds all usages of methods that have <b><font color=\"#000080\">@since</font></b> tag in\ntheir documentation.<br><br>\nThis may be useful when development is performed under newer SDK version as the target platform for production.<br><br>\n</body>\n</html>\n"
        },
        {
          "shortName": "EnumerationCanBeIteration",
          "displayName": "Enumeration can be iteration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Enumeration</b> methods\nused, which can be replaced equivalent <b>Iterator</b>\nconstructs. <b>Iterator</b>s are part of the Java\nCollection Framework, which has been available since Java 1.2.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseCompareMethod",
          "displayName": "'compare()' method can be used to compare numbers",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSuggests to use the static <code>Integer.compare()</code> method and similar methods where more verbose or less efficient constructs are\nused. For example, <code>x &gt; y ? 1 : x &lt; y ? -1 : 0</code> or <code>Integer.valueOf(x).compareTo(y)</code> could be\nreplaced with <code>Integer.compare(x, y)</code>. If <code>x</code> and <code>y</code> are already boxed integers, then\n<code>x.compareTo(y)</code> is suggested.\n\n<p><code>Double.compare</code> and <code>Float.compare</code> methods appeared in Java 1.4, methods for other primitive types\n   are available since Java 1.7</p>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "GroovyUnusedDeclaration",
          "displayName": "Unused declaration",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused classes, methods and fields.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Code style",
      "inspections": [
        {
          "shortName": "PhpRedundantClosingTagInspection",
          "displayName": "Redundant closing tag",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports PHP closing tag <code>?&gt;</code> usages, which are redundant in files containing only PHP code.\n</body>\n</html>"
        },
        {
          "shortName": "PhpStrFunctionsInspection",
          "displayName": "'str*' calls can be replaced with PHP 8 'str_*' calls",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>strpos</code> and <code>substr</code> functions calls that can be replaced with the <code>str_*</code> functions calls (introduced in PHP 8.0).\n<p>\n  See <a href=\"https://wiki.php.net/rfc/str_contains\">str_contains (php.net)</a> and <a href=\"https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions\">str_starts_with and str_ends_with functions (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpFullyQualifiedNameUsageInspection",
          "displayName": "Fully qualified name usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the fully qualified class names that can be shortened by adding the <code>use</code> statement.\n</body>\n</html>"
        },
        {
          "shortName": "PhpLoopCanBeConvertedToArrayMapInspection",
          "displayName": "Loop can be converted to 'array_map' call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>foreach</code> loops that can be replaced with <code>array_map</code> calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNamedArgumentsWithChangedOrderInspection",
          "displayName": "Named arguments order does not match parameters order",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports named argument with order that does not match parameter order\n</body>\n</html>"
        },
        {
          "shortName": "PhpMultipleClassesDeclarationsInOneFile",
          "displayName": "Multiple classes declarations in one file",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports multiple class declarations in a single file, which violates the PSR-0/PSR-4 standards.\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-4/\">PSR-0/PSR-4 standards (php-fig.org)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpTraditionalSyntaxArrayLiteralInspection",
          "displayName": "Traditional syntax array literal detected",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports traditional array syntax (<code>array()</code>) usages in array literals and suggests replacing them with short array syntax (<code>[]</code>).\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpLoopCanBeConvertedToArrayFilterInspection",
          "displayName": "Loop can be converted to 'array_filter' call",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>foreach</code> loops that can be replaced with the <code>array_filter</code> calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpIllegalPsrClassPathInspection",
          "displayName": "Class path doesn't match project structure",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the classes with the filepath not following the PSR-0/PSR-4 project structure.\n<p>\n  You can configure the project vendor roots under <b>Settings/Preferences | Directories</b>.\n</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-4/\">PSR-0/PSR-4 standards (php-fig.org)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpClosureCanBeConvertedToShortArrowFunctionInspection",
          "displayName": "Closure can be converted to arrow function",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the anonymous functions that can be transformed to short arrow functions. Support for short arrow functions is available since PHP 7.4.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/arrow_functions_v2\">PHP RFC: Arrow Functions 2.0 (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryDoubleQuotesInspection",
          "displayName": "Unnecessary double quotes",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports double-quoted string literals that do not contain string interpolation, escape sequences, or single quotes.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryFullyQualifiedNameInspection",
          "displayName": "Unnecessary fully qualified name",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of fully qualified class names, which can be shortened without adding the <code>use</code> statement.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayFilterCanBeConvertedToLoopInspection",
          "displayName": "'array_filter' can be converted to loop",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>array_filter</code> calls that can be replaced with the <code>foreach</code> loop.\n</body>\n</html>"
        },
        {
          "shortName": "PhpStatementWithoutBracesInspection",
          "displayName": "Control statement body without braces",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the control statements that are not enclosed in braces.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpLoopCanBeConvertedToArrayFillInspection",
          "displayName": "Loop can be converted to 'array_fill'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>for</code> loops that can be replaced with the <code>array_fill</code> calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpShortOpenTagInspection",
          "displayName": "Short open tag usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports short PHP opening tag <code>&lt;?</code> usages.\n</body>\n</html>"
        },
        {
          "shortName": "PhpSwitchCanBeReplacedWithMatchExpressionInspection",
          "displayName": "'switch' can be replaced with 'match' expression",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports 'switch' statements that could be replaced with 'match' expression\n</body>\n</html>"
        },
        {
          "shortName": "PhpMatchExpressionCanBeReplacedWithTernaryInspection",
          "displayName": "'match' expression can be replace with ternary expression",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports match expressions with default arm and only one non-default arm\n</body>\n</html>"
        },
        {
          "shortName": "PhpConstructorStyleInspection",
          "displayName": "Old style constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports old-style constructor declarations (<code>ClassName()</code>) and suggests replacing them with new-style constructors (<code>__construct()</code>).\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpExpressionWithoutClarifyingParenthesesInspection",
          "displayName": "Expression without clarifying parentheses",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports potentially ambiguous expressions and proposes enclosing them in clarifying parentheses.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryParenthesesInspection",
          "displayName": "Unnecessary parentheses",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the expressions containing redundant parenthesis, which can be safely removed.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayMapCanBeConvertedToLoopInspection",
          "displayName": "'array_map' call can be converted to loop",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>array_map</code> calls that can be replaced with the <code>foreach</code> loop.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMethodMayBeStaticInspection",
          "displayName": "Method may be 'static'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the methods that don't use any instance references and thus may be converted to static methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpSingleStatementWithBracesInspection",
          "displayName": "Single-statement body with braces",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the control statements that have bodies with braced statement-groups containing a single child statement.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMixedReturnTypeCanBeReducedInspection",
          "displayName": "'mixed' return type can be narrowed",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports 'mixed' return types that can be narrowed down to more concrete types.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTraitUseRuleInsideDifferentClassUseListInspection",
          "displayName": "Trait use rule resolved to method with different containing class ",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the trait method <code>use</code> rules that are resolved to methods from a different containing class rather than the one specified in the <code>use</code> declaration.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayFillCanBeConvertedToLoopInspection",
          "displayName": "'array_fill' can be converted to loop",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>array_fill</code> calls that can be replaced with the <code>foreach</code> loop.\n</body>\n</html>"
        },
        {
          "shortName": "PhpVariableVariableInspection",
          "displayName": "Usage of a variable variable",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of variable variables (dynamic variable names).\n</body>\n</html>"
        },
        {
          "shortName": "PhpGetClassCanBeReplacedWithClassNameLiteralInspection",
          "displayName": "'get_class' can be replaced with '::class'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>get_class</code> calls and suggests replacing them with <code>::class</code> when PHP Language level is set to 8.0 or later.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/class_name_literal_on_object\">Allow ::class on objects (php.net)</a> for details.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "PointlessBitwiseExpression",
          "displayName": "Pointless bitwise expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports pointless bitwise\nexpressions. Such expressions include <b>and</b>ing with zero, <b>or</b>ing by zero,\nand shifting by zero. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ShiftOutOfRange",
          "displayName": "Shift operation by inappropriate constant",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports shift operations\nwhere the value shifted by is constant and outside of the reasonable range. Integer\nshift operations outside of the range <b>0..31</b> and long shift operations outside of the\nrange <b>0..63</b> are reported. Shifting by negative or overly large values is almost certainly\na coding error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IncompatibleMask",
          "displayName": "Incompatible bitwise mask operation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports bitwise mask expressions which are guaranteed to\nevaluate to <b>true</b> or <b>false</b>.\nExpressions checked are of the form <b><i>(var & constant1) == constant2</i></b> or\n<b><i>(var | constant1) == constant2</i></b>, where <b><i>constant1</i></b>\nand <b><i>constant2</i></b> are incompatible bitmask constants.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code",
      "inspections": [
        {
          "shortName": "UseVirtualFileEquals",
          "displayName": "Use VirtualFile.equals",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>equals</code> instead of <code>==</code> when comparing <code>VirtualFile</code> objects\n</body>\n</html>"
        },
        {
          "shortName": "UnresolvedPluginConfigReference",
          "displayName": "Unresolved plugin configuration reference",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nHighlights unresolved references to plugin configuration elements.\n</body>\n</html>"
        },
        {
          "shortName": "UnsafeReturnStatementVisitor",
          "displayName": "Unsafe return statements visitor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports recursive Java element visitors which process <code>PsiReturnStatement</code>s\neven if they belong to another <code>PsiClass</code> or <code>PsiLambdaExpression</code>. In most cases it's a bug.\n</body>\n</html>"
        },
        {
          "shortName": "UseDPIAwareInsets",
          "displayName": "Use DPI-aware insets",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>JBUI.insets</code> for DPI-aware insets.\n</body>\n</html>"
        },
        {
          "shortName": "InspectionUsingGrayColors",
          "displayName": "Using new Color(a,a,a)",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nUse cache (<code>com.intellij.ui.Gray</code>) for gray colors.\n</body>\n</html>\n"
        },
        {
          "shortName": "UseCouple",
          "displayName": "Use Couple instead of Pair",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>Couple&lt;T&gt;</code> instead of <code>Pair&lt;T, T&gt;</code>.\n</body>\n</html>"
        },
        {
          "shortName": "UsePrimitiveTypes",
          "displayName": "Use .equals with primitive types",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nPrimitive types should be compared with <code>.equals</code> due to Java 8 type annotations also applicable to primitive types.\n</body>\n</html>"
        },
        {
          "shortName": "PsiElementConcatenation",
          "displayName": "Using PsiElement string representation to generate new expression is incorrect",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that <code>PsiElement</code> is not directly concatenated in the string which will be used for\n<code>createExpressionFromText</code>, etc. <code>PsiElement.getText()</code> usually should be used instead.\n</body>\n</html>"
        },
        {
          "shortName": "InspectionUniqueToolbarId",
          "displayName": "Specify toolbar id",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nPlease specify unique toolbar id.\n</body>\n</html>"
        },
        {
          "shortName": "UseDPIAwareBorders",
          "displayName": "Use DPI-aware borders",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>JBUI.Borders.empty</code> for DPI-aware empty borders.\n</body>\n</html>"
        },
        {
          "shortName": "LeakableMapKey",
          "displayName": "Map key may leak",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects passing <code>Language</code> or <code>FileType</code> as a map key in plugin code.\n<p>\n  Such a usage might lead to inability to unload the plugin properly. Please consider using <code>String</code> instead.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnsafeVfsRecursion",
          "displayName": "Unsafe VFS recursion",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects calls of <code>VirtualFile.getChildren()</code> inside recursive methods.\nSuch code may cause dead loops when iterating over cyclic symlinks -\nso please use <code>VfsUtilCore.visitChildrenRecursively()</code> instead.\n</body>\n</html>\n"
        },
        {
          "shortName": "IncorrectParentDisposable",
          "displayName": "Incorrect parentDisposable parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects passing Application or Project as a parent disposable in plugin code. Such usage will lead to plugins not being\nunloaded correctly. Please see <a href=\"https://www.jetbrains.org/intellij/sdk/docs/basics/disposers.html#choosing-a-disposable-parent\">Choosing a Disposable Parent</a> in SDK Docs.\n</body>\n</html>\n"
        },
        {
          "shortName": "QuickFixGetFamilyNameViolation",
          "displayName": "QuickFix's getFamilyName() implementation must not depend on a specific context",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nInspection reports cases when <code>QuickFix#getFamilyName()</code>\nimplementation uses non-static fields, methods, containing method local variables variables etc.\n</body>\n</html>"
        },
        {
          "shortName": "HighlightVisitorInternal",
          "displayName": "Good code is red",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nRun highlighting to find \"good code is red\" in batch mode.\n</body>\n</html>"
        },
        {
          "shortName": "StatefulEp",
          "displayName": "Stateful extension",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nPotential memory leak detected. Please don't hold heavy objects in extensions if you're not 100% sure.\nIdeally, extensions should be stateless.\n</body>\n</html>"
        },
        {
          "shortName": "FileEqualsUsage",
          "displayName": "File.equals() usage",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects usages of <code>File.equals/hashCode/compareTo</code> methods - which do not honor case-insensitivity on macOS.\nPlease use <code>FileUtil.filesEquals/fileHashCode/compareFiles</code> methods instead.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnregisteredNamedColor",
          "displayName": "Unregistered named color",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nDetects usages of <code>JBColor#namedColor</code> with key not registered in <code>*.themeMetadata.json</code>.\n<p><small>New in 2018.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "StatisticsCollectorNotRegistered",
          "displayName": "Statistics collector not registered",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects statistics collectors that are not (yet) registered in a plugin.xml\ndescriptor and offers a QuickFix to register them.\n</body>\n</html>"
        },
        {
          "shortName": "MissingRecentApi",
          "displayName": "Usage of IntelliJ API not available in older IDEs",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of IntelliJ API that were introduced in a version newer than \"since-build\" specified in the <code>plugin.xml</code>.\nIt may lead to incompatibilities of the plugin with older IDE builds.\n\n<p>\n  To avoid possible issues when running the plugin in older IDEs, it may be necessary to increase \"since-build\" constraint of the plugin,\n  alternatively avoid using the APIs.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UElementAsPsi",
          "displayName": "UElement as PsiElement usage",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usage of <code>UElement</code> as <code>PsiElement</code>. The <code>PsiElement</code> obtained this way is ambiguous.\n<p>\nIf you need \"physical\" <code>PsiElement</code> please use <code>UElementKt.getSourcePsiElement()</code>,\nif you need <code>PsiElement</code> that \"emulates\" behaviour of Java-elements (<code>PsiClass</code>, <code>PsiMethod</code>, etc.)\nthen please use <code>UElementKt.getAsJavaPsiElement()</code>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "DontUsePairConstructor",
          "displayName": "Don't use constructor of Pair class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nUse of <code>Pair</code> constructor produces unnecessary generic declarations, use <code>Pair.create(a, b)</code> instead.\n</body>\n</html>"
        },
        {
          "shortName": "PresentationAnnotation",
          "displayName": "Invalid icon path in @Presentation",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nValidates the icon path in <code>@Presentation</code> annotation.\n</body>\n</html>"
        },
        {
          "shortName": "SerializableCtor",
          "displayName": "Non-default constructor in serializable class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Detects non-default constructor in serializable classes (which is not allowed by IonObjectSerializer)\n</body>\n</html>"
        },
        {
          "shortName": "NonDefaultConstructor",
          "displayName": "Non-default constructors for service and extension class",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nValidates that extension class has only default constructor.\nOther dependencies should be acquired only when needed in corresponding methods.\n</body>\n</html>"
        },
        {
          "shortName": "ComponentNotRegistered",
          "displayName": "Component/Action not registered",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects plugin components and actions that are not (yet) registered in a plugin.xml\ndescriptor and offers a QuickFix to register the component. This eases developing new components when\nmaking use of the \"Create Class\" intention and helps to keep track of potentially obsolete\ncomponents.\n<p>\n    There's an option to turn off the check for Actions as they may be intentionally created and\n    registered dynamically. Note that the inspection can also be suppressed on a per-class level,\n    so it normally shouldn't be necessary to switch off the inspection completely. Especially\n    because the inspection ignores abstract classes and by default non-public classes as well.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UseJBColor",
          "displayName": "Use Darcula aware JBColor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nUse dark theme aware <code>JBColor</code> instead of <code>java.awt.Color</code>.\nUse the <code>JBColor</code> constructor to specify regular and dark theme colors, to avoid using bad looking colors under dark themes.\n</body>\n</html>"
        },
        {
          "shortName": "UndesirableClassUsage",
          "displayName": "Undesirable class usage",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects usages of internally deprecated classes.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "JVM languages",
      "inspections": [
        {
          "shortName": "UnstableApiUsage",
          "displayName": "Unstable API Usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of API marked with \"unstable\" annotations from the list below.\n</body>\n</html>"
        },
        {
          "shortName": "BlockingMethodInNonBlockingContext",
          "displayName": "Inappropriate thread-blocking method call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports thread-blocking method calls found in a code fragment where a thread should not be blocked\n<!-- tooltip end -->\n(e.g. Reactive frameworks, Kotlin coroutines)\n</body>\n</html>"
        },
        {
          "shortName": "OverrideOnly",
          "displayName": "Method can only be overridden",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports invocations of API methods marked with <code>@ApiStatus.OverrideOnly</code> annotation.\n</p>\n<code>@ApiStatus.OverrideOnly</code> indicates that the annotated method is part of SPI (Service Provider Interface),\nwhich is intended to be <strong>only implemented or overridden</strong> but not called by clients of the declaring library.\nIf a class or interface is marked with this annotation it means that all its methods can be only overridden.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnstableTypeUsedInSignature",
          "displayName": "Unstable type is used in signature",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports declarations of classes, methods and fields that reference an unstable API type in the signature\n  but are not marked with the same unstable annotation. Set of checked annotations' names is specified below.\n</p>\nThis inspection may be useful to check that no <i>unstable (internal, experimental)</i> types are exposed in signatures of public API.\nFor example, if an <i>experimental</i> class is used as the return type of a method, the method is also considered <i>experimental</i>\nbecause incompatible changes of the type (deletion or move to another package) lead to incompatible method signature changes.\n</body>\n</html>"
        },
        {
          "shortName": "MissingDeprecatedAnnotationOnScheduledForRemovalApi",
          "displayName": "Missing '@Deprecated' annotation on scheduled for removal API",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports any declarations of classes, fields, or methods marked with <b>@org.jetbrains.annotations.ApiStatus.ScheduledForRemoval</b>\nannotation that are not accompanied by <b>@Deprecated</b> annotation.\n</body>\n</html>"
        },
        {
          "shortName": "NonExtendableApiUsage",
          "displayName": "Class, interface, or method should not be extended",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports classes, interfaces and methods that extend, implement or override API elements marked with <code>@ApiStatus.NonExtendable</code>\n  annotation.\n</p>\n<code>@ApiStatus.NonExtendable</code> annotation indicates that the annotated API class, interface or method <strong>must not be extended,\n  implemented or overridden</strong>. Instances of classes and interfaces marked with this annotation may be cast to an internal\nimplementing class in the library code,\nleading to <code>ClassCastException</code> if a different implementation is provided by client. New abstract methods may be added to such\nclasses and interfaces breaking compatibility with client's implementations.\n</body>\n</html>\n"
        },
        {
          "shortName": "MustAlreadyBeRemovedApi",
          "displayName": "API must already be removed",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports any declarations of classes, fields, or methods marked with <b>@org.jetbrains.annotations.ApiStatus.ScheduledForRemoval</b>\nannotation that must already be removed. Specified scheduled removal version is compared with the current version that you may set below.\nVersions are dot-separated strings with possibly \"alpha\", \"beta\", \"eap\" classifiers, like \"1.0\", \"2.3.1\", \"2018.1\", \"7.5-snapshot\",\n\"3.0-eap\". Versions comparison is intuitive: 1.0 &lt 2.0, 1.0-eap &lt 1.0, 2.3-snapshot &lt 2.3 and so on.\nFor detailed comparison logic refer to implementation of <a\n    href=\"https://github.com/JetBrains/intellij-community/blob/master/platform/util-rt/src/com/intellij/util/text/VersionComparatorUtil.java\">VersionComparatorUtil</a>.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Cloning issues",
      "inspections": [
        {
          "shortName": "NonPublicClone",
          "displayName": "'clone()' method not 'public'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods that are <b>protected</b> and not <b>public</b>.\nWhen overriding the <b>clone()</b> method from <b>java.lang.Object</b> it is convention to make the method <b>public</b>,\nso that it is accessible from non-subclasses outside the package.\nSee also the documentation of <b>java.lang.Cloneable</b>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CloneCallsConstructors",
          "displayName": "'clone()' instantiates objects with constructor",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to object constructors inside <b>clone()</b> methods.\nInstantiation of objects inside of <b>clone()</b> should be done by calling <b>clone()</b>,\ninstead of creating the object directly, to support later subclassing.\nThis inspection will not report\n<b>clone()</b> methods declared <b>final</b>,\nor <b>clone()</b> methods on <b>final</b> classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CloneReturnsClassType",
          "displayName": "'clone()' should have return type equal to the class it contains",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods that have a return type different than the class they are contained in.\nOften a <b>clone()</b> method will have a return type of <b>java.lang.Object</b>, which makes it harder to use by its clients.\n<i>Effective Java, Second Edition</i> recommends for the return type of the <b>clone()</b> method to be\nthe class type of the object it returns.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CloneInNonCloneableClass",
          "displayName": "'clone()' method in non-Cloneable class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which override the\n<b>clone()</b> method, but which do not implement the <b>Cloneable</b> interface.\nThis usually represents a programming error.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate if this inspection should only warn on <b>public</b> methods.\nClasses designed for inheritance may choose to override <b>clone</b>() and declare it <b>protected</b>\nwithout implementing <b>Cloneable</b> to give subclasses the choice to implement it.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CloneableImplementsClone",
          "displayName": "Cloneable class without 'clone()' method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which implement the <b>Cloneable</b> interface, but which do not override the\n<b>clone()</b> method. Such classes use the default implementation of <b>clone()</b>, which is often not the desired\nbehavior.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfClone",
          "displayName": "Use of 'clone()' or 'Cloneable'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to and implementations of the <b>clone()</b> method and uses of <b>java.lang.Cloneable</b>.\nSome coding standards prohibit <b>clone()</b> usage, and recommend using a copy constructor or <b>static</b> factory method.\nCalls to <b>clone()</b> on arrays are ignored, because that is a common, correct, efficient and compact way to copy an array.\n\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CloneDeclaresCloneNotSupported",
          "displayName": "'clone()' does not declare 'CloneNotSupportedException'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods which are not declared as throwing\n<b>CloneNotSupportedException</b>. If <b>clone()</b> is not declared\nto possibly throw <b>CloneNotSupportedException</b>, then subclasses which need to\nprohibit cloning will not be able to do so in the standard way. This inspection will not report\n<b>clone()</b> methods declared <b>final</b>,\nor <b>clone()</b> methods on <b>final</b> classes.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate if this inspection should only warn on <b>protected</b> methods.\nIn <i>Effective Java, Second Edition</i> (but not in the first edition) it is recommended to omit the <b>CloneNotSupportedException</b>\ndeclaration on <b>public</b> methods, because methods that don't throw checked exceptions are easier to use.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "PhpSwitchCaseWithoutDefaultBranchInspection",
          "displayName": "Switch statement without default branch",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports switch statements without default branch</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpToStringImplementationInspection",
          "displayName": "Method __toString implementation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the attempts to convert the objects having no <code>__toString</code> method implementation to <code>string</code>.\n  <p>\n    In PHP 5.2.0 and later, such attempts will cause <code>E_RECOVERABLE_ERROR</code>. See <a href=\"https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring\">__toString (php.net)</a> for details.\n  </p>\n  <p>\n    If the <b>Check __toString exists for each expression type</b> option is enabled, the inspection will check all possible types of the expression and\n    report if at least one ot them doesn't contain the <code>__toString</code> method implementation.\n  </p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpNonStrictObjectEqualityInspection",
          "displayName": "Non-strict object equality",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of the comparison operator (<code>==</code>) for comparing object variables.\n<p>\n  Object variables are compared as follows:\n</p>\n<ul>\n  <li>\n    When using the comparison operator (<code>==</code>), two object instances are considered equal if they have the same attributes and values (values are compared with\n    <code>==</code>), and are instances of the same class.\n  </li>\n  <li>\n    When using the identity operator (<code>===</code>), object variables are considered identical if and only if they refer to the same instance of the same class.\n  </li>\n</ul>\n<p>\n  See <a href=\"http://www.php.net/manual/en/language.oop5.object-comparison.php\">Comparing Objects (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNonCompoundUseInspection",
          "displayName": "Unnecessary statement use",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>use</code> statements that contain non-fully qualified import names and thus have no effect.\n<!-- tooltip end -->\n<p>\n  Import names must be fully qualified. Note that for namespaced names (that is, FQNs containing the namespace separator, such as\n  <code>Foo\\Bar</code>), using the leading backslash is not necessary and not recommended. For global names that do not contain the namespace separator, such as <code>FooBar</code>, using the leading backslash is required.\n</p>\n<p>\n  See <a href=\"http://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing\">Using namespaces: Aliasing/Importing (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpForeachNestedOuterKeyValueVariablesConflictInspection",
          "displayName": "Nested vs outer 'foreach' variables conflict",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the variables that are used as a key or value both by the inner and outer <code>foreach</code> loops. In most cases, this is an error or may result in an error in the future.\n</body>\n</html>"
        },
        {
          "shortName": "PhpWrongStringConcatenationInspection",
          "displayName": "Wrong string concatenation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the attempts to concatenate strings by using the <code>+</code> operator instead of the dot (<code>.</code>) concatenation operator. Such attempts are most likely a programming mistake.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpMissingParentConstructorInspection",
          "displayName": "Missing parent call for constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n Reports the constructors that do not call their parent constructor.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDuplicateCaseInspection",
          "displayName": "Duplicate case in switch statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports duplicate <code>case</code> expressions in <code>switch</code> statements.\n  <p>If a <code>switch</code> statement contains multiple <code>case</code> expressions, only the first one is executed.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpressionResultUnusedInspection",
          "displayName": "Expression result unused",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports expressions that are calculated, but the calculation result is not used anywhere.\n  <p>Such errors can be caused, for example, by misspelling the <code>=</code> operator as <code>==</code>.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpMissingBreakStatementInspection",
          "displayName": "Missing 'break' statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>case</code> clauses in <code>switch</code> statements that do not end with a <code>break</code> or a <code>return</code> statement.\n  <p>\n    If a <code>case</code> clause does not end with <code>break</code> or <code>return</code>, its execution can unintentionally fall through the next case, which is most often an error.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpFormatFunctionParametersMismatchInspection",
          "displayName": "Format function parameters mismatch",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the parameters and specification conversion entries that are passed as the format function's arguments but are not mapped to any entries.\n</body>\n</html>"
        },
        {
          "shortName": "PhpSillyAssignmentInspection",
          "displayName": "Silly assignment",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the assignment statements, in which both sides are equal. Such assignments have no effect and can be removed.\n</body>\n</html>"
        },
        {
          "shortName": "PhpForeachArrayIsUsedAsValueInspection",
          "displayName": "Foreach array is used as value",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the variables that are used as both an array expression and an array's key or value in <code>foreach</code> loops. Commonly, this indicates a typing error.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDuplicateMatchArmBodyInspection",
          "displayName": "Duplicate arm in 'match' expression",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate bodies in <code>match</code> arms.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDuplicateMatchConditionInspection",
          "displayName": "Duplicate condition",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports duplicate conditions in <code>match</code> expressions.\n<p>\n    See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpVoidFunctionResultUsedInspection",
          "displayName": "Void function result used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the attempts to use the value of a <code>void</code> function.\n<p>\n  Since <code>void</code> functions do not have a return value, such attempts are most likely a programming mistake.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnpackedArrayArgumentTypeMismatchInspection",
          "displayName": "Invalid type of unpacked argument",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports unpacked array elements with type neither array nor Traversable.\n</body>\n</html>"
        },
        {
          "shortName": "PhpAssignmentInConditionInspection",
          "displayName": "Assignment in condition",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports the assignments that are used in conditional expressions.\n<p>Using such assignments may cause hard to detect errors. It is therefore considered a bad programming practice.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpStatementHasEmptyBodyInspection",
          "displayName": "Statement has empty body",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the statements that have empty bodies.\n<p>While occasionally useful, such statements are often the result of typos and may cause confusion.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpConstantReassignmentInspection",
          "displayName": "Constant reassignment",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n   Reports reassignments of constants.\n   <p>Since constants cannot be changed, such assignments will have no effect.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpGotoIntoLoopInspection",
          "displayName": "Goto into loop statement",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>goto</code> labels that are located inside loop or <code>switch</code> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpMissingParentCallMagicInspection",
          "displayName": "Missing parent call for magic methods",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the magic methods that do not call their parent magic method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpToStringReturnInspection",
          "displayName": "Method __toString return type",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>__toString</code> methods that do not return <code>string</code>, which leads to a fatal <code>E_RECOVERABLE_ERROR</code> level error.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDuplicateArrayKeysInspection",
          "displayName": "Duplicate array keys",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports duplicate keys in array declarations.\n  <p>If multiple elements in the array declaration use the same key, only the last one will be used, and all others will be overwritten.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDuplicateSwitchCaseBodyInspection",
          "displayName": "Duplicate branch in switch statement",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports switch statements containing the same code in different branches.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpOptionalBeforeRequiredParametersInspection",
          "displayName": "Optional before required parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the optional parameters that appear before the required parameters in function/method declaration.\n<p>\n  See <a href=\"http://www.php.net/manual/en/functions.arguments.php#functions.arguments.default\">Default argument values (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingParentCallCommonInspection",
          "displayName": "Missing parent call for method",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the methods that do not call their parent method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnusedMatchConditionInspection",
          "displayName": "Unused 'match' condition",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the conditions in <code>match</code> expressions that will never be matched.\n<p>\n  Similarly to PHP Engine behavior, the inspection uses strict comparison (<code>===</code>) to check the types in <code>match</code> conditions against the <code>match</code> argument type, regardless of the <code>strict_types</code> directive. Since no type coercion occurs, some conditions may be non-matched due to non-matching types.\n</p>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDivisionByZeroInspection",
          "displayName": "Division by zero",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n      Reports division by zero or modulo by zero.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpPassByRefInspection",
          "displayName": "Pass parameter by reference",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the arguments in a function/method call that cannot be passed by reference.\n  <p>\n    Only variables and references returned from functions can be passed by reference. See <a href=\"https://www.php.net/manual/en/language.references.pass.php#language.references.pass\">Passing by Reference (php.net)</a> for details.\n  </p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpConcatenationWithArithmeticInspection",
          "displayName": "Concatenation with arithmetic usage",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports concatenation expression that are used together with <code>+</code>,<code>-</code>,<code> >> </code>,<code> << </code> operators.\n\nSuch expression will be parsed differently after PHP 8.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "UI form",
      "inspections": [
        {
          "shortName": "FormSpellChecking",
          "displayName": "Typo in a UI form",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Locates typos and misspelling in your UI forms, (e.g. in a JLabel text or JPanel title etc) and fix them in one click.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateMnemonic",
          "displayName": "Duplicate mnemonics",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports components which have the same mnemonic\ncharacter. The quickfix allows to assign unique mnemonic characters to each of the components.\n</body>\n</html>\n"
        },
        {
          "shortName": "NoLabelFor",
          "displayName": "No label for component",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports components which do not have any static\ntext and do not have any label which is marked with <b><font color=\"#000080\">setLabelFor</font></b>\nfor this component. Components which do not have static text include edit fields and combo boxes.\nSuch components cannot be activated with a keyboard shortcut. The quickfix for this inspection\nallows to automatically associate an adjacent label with the problematic component.\n</body>\n</html>\n"
        },
        {
          "shortName": "BoundFieldAssignment",
          "displayName": "Assignment to UI-bound field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to fields which are bound to components\nin UI Designer forms. Such assignments will cause the component setup code generated by UI Designer\nfor such fields to be ignored.\n</body>\n</html>\n"
        },
        {
          "shortName": "NoButtonGroup",
          "displayName": "Radio button not in a group",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports\n<b><font color=\"#000080\">JRadioButton</font></b> components which are not placed in a\n<b><font color=\"#000080\">ButtonGroup</font></b> . A quick fix is available to group radio\nbuttons placed in adjacent grid cells.\n</body>\n</html>\n"
        },
        {
          "shortName": "MissingMnemonic",
          "displayName": "Missing mnemonics",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports focusable components with the\n<b><font color=\"#000080\">text</font></b> property or labels with assigned\n<b><font color=\"#000080\">labelFor</font></b> property which do not have a mnemonic\ncharacter. The quickfix allows to assign a unique mnemonic to such a component.\n</body>\n</html>\n"
        },
        {
          "shortName": "InvalidPropertyKeyForm",
          "displayName": "Invalid property key in a UI form",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for unresolved references to *.properties files.\n</body>\n</html>"
        },
        {
          "shortName": "I18nForm",
          "displayName": "Hardcoded string literal in a UI form",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instances of hardcoded strings in your UI forms.\nHardcoded string literals are probably errors in\nan internationalized environment.\nThis inspection won't report empty strings and strings consisting of only whitespace.\n\nThere is a quickfix provided that transforms a string literal\ninto a reference to a property in resource bundle.\n</body>\n</html>"
        },
        {
          "shortName": "OneButtonGroup",
          "displayName": "Button group with one button",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports\n<b><font color=\"#000080\">ButtonGroup</font></b> instances which contain only one\n<b><font color=\"#000080\">JRadioButton</font></b> .\n</body>\n</html>\n"
        },
        {
          "shortName": "NoScrollPane",
          "displayName": "Scrollable component not in JScrollPane",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports\n<b><font color=\"#000080\">Scrollable</font></b> components,\nexcept for <b><font color=\"#000080\">JTextField</font></b> , which are not placed in a\n<b><font color=\"#000080\">JScrollPane</font></b> . The quickfix surrounds the problematic\ncomponent with a scroll pane.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Resource management",
      "inspections": [
        {
          "shortName": "IOResource",
          "displayName": "I/O resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any I/O resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. I/O resources checked\nby this inspection include <b>java.io.InputStream</b>,\n<b>java.io.OutputStream</b>,\n<b>java.io.Reader</b>,\n<b>java.io.Writer</b> and\n<b>java.io.RandomAccessFile</b>. I/O resources which are wrapped by other I/O resources\nare not reported, as the wrapped resource will be closed by the wrapping resource.\n<!-- tooltip end -->\n<p>\nUse the table below to specify which I/O resources should be ignored by this inspection.\nSpecify I/O resource classes here which do not need to be closed.\n<p>\nUse the first checkbox below to specify if an I/O resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource <i>in front of</i> a <b>try</b>\nblock.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if an I/O resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and an I/O resource argument will not be ignored.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SocketResource",
          "displayName": "Socket opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "\n<html>\n<body>\nReports any Socket resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. Socket resources reported\nby this inspection include <b>java.net.Socket</b>,\n<b>java.net.DatagramSocket</b>,\nand <b>java.net.ServerSocket</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a Socket is allowed to be opened <i>inside</i> a <b>try</b>'\nblock. This style is less desirable because it is more verbose than opening a Socket\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a Socket is passed as a method call argument.\nIf enabled the inspection assumes the Socket is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a Socket argument will not be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JDBCResource",
          "displayName": "JDBC resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any JDBC resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. JDBC resources reported\nby this inspection include <b>java.sql.Connection</b>,\n<b>java.sql.Statement</b>,\n<b>java.sql.PreparedStatement</b>,\n<b>java.sql.CallableStatement</b>,\nand <b>java.sql.ResultSet</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a JDBC resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a JDBC resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and an JDBC resource argument will not be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "DriverManagerGetConnection",
          "displayName": "Use of DriverManager to get JDBC connection",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.sql.DriverManager</b>\nto acquire a JDBC connection. The <b>java.sql.DriverManager</b>\nhas been superseded by <b>javax.sql.Datasource</b>, which\nallows for connection pooling and other optimizations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "HibernateResource",
          "displayName": "Hibernate resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "\n<html>\n<body>\nReports any Hibernate resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. Hibernate resources reported\nby this inspection include <b>org.hibernate.Session</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a Hibernate resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a Hibernate resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a Hibernate resource argument will not be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ChannelResource",
          "displayName": "Channel opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Channel which is not safely closed in a <b>finally</b> block.\nSuch resources may be inadvertently leaked\nif an exception is thrown before the resource is closed. Channel resources reported\nby this inspection include any instances created by calling\ngetChannel() on a file or socket resource.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a Channel is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a Channel\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a Channel instance is passed as a method call argument.\nIf enabled the inspection assumes the Channel is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a Channel argument will not ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AutoCloseableResource",
          "displayName": "AutoCloseable used without 'try'-with-resources",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>AutoCloseable</b> instances which are not used in a try-with-resources statement, also known as\n<i>Automatic Resource Management</i>.\nThis means that the open resource before/in <b>try</b>, close in <b>finally</b> style which was used before\ntry-with-resources was available is also reported.\nThis inspection is meant to replace all <i>opened but not safely closed</i> inspections when developing in Java 7 and higher.\n<p>\nUse the first table below to specify which AutoCloseable subclasses should be ignored by this inspection.\nSpecify AutoCloseable subclasses here which do not need to be closed.\n<p>\n  <b>Note</b>: This inspection will still warn on streams returned from the java.nio.file.Files methods lines(), walk(), list() and find(),\n  even when java.util.stream.Stream is specified to be ignored in this table.\n  These streams contain an associated I/O resource that needs to be closed.\n</p>\n<p>\nUse the second table below to specify which methods returning AutoCloseable will be ignored when called.\n<p>\nUse the first checkbox below to ignore an AutoCloseable if it the result of a method call.\nWhen enabled, the results of factory methods will also be ignored.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if an AutoCloseable instance is passed\nas a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and an AutoCloseable argument will not be ignored.\n<p>\nUse the third checkbox below to ignore method references to constructors of resource classes.\n<p>\nUse the fourth checkbox below to ignore methods that return resource and has a name that starts from 'get'.\n  This may be useful because most of the getters do not transmit the ownership of resource and use sites are not responsible for closing resource.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JNDIResource",
          "displayName": "JNDI resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "\n<html>\n<body>\nReports any JNDI resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. JNDI resources reported\nby this inspection include <b>javax.naming.InitialContext</b>,\nand <b>javax.naming.NamingEnumeration</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a JNDI Resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a JNDI resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a JNDI resource argument will not be ignored.\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Language injection",
      "inspections": [
        {
          "shortName": "LanguageMismatch",
          "displayName": "Language mismatch",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether the language of a reference matches the expected language of the usage context.\n      </p>\n\n      <p>Example:</p> \n         <pre>\n        @Language(\"JavaScript\")\n        String JS_CODE = \"var x;\";\n\n        @Language(\"XPath\")\n        String XPATH_CODE = JS_CODE;\n        </pre>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnknownLanguage",
          "displayName": "Unknown Language ID",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether the ID of the language used in an <code>@Language</code> annotation refers to an\n        existing language implementation.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "InjectionNotApplicable",
          "displayName": "Injection Annotation not applicable",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether a language-injection annotation (<code>@Language</code> or derived ones)\n        is valid to be applied to the annotated element. Only elements of type <code>String</code>\n        and <code>String[]</code> may be annotated.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Maven",
      "inspections": [
        {
          "shortName": "MavenCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Maven",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>kotlinx.coroutines</b> libraries dependencies in Maven that should be updated in order\nto be compatible with Kotlin 1.3+.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Application servers",
      "inspections": [
        {
          "shortName": "Weblogic",
          "displayName": "WebLogic",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors and other resources used to deploy your\napplication to a WebLogic server:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Boot",
      "inspections": [
        {
          "shortName": "SpringBootApplicationSetup",
          "displayName": "Spring Boot application setup",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nChecks Spring Boot Application Setup.\n<ul>\n  <li><code>@SpringBootApplication</code> used in default package</li>\n  <li><code>Redundant @ComponentScan declaration</code></li>\n  <li><code>Redundant @EnableAutoConfiguration declaration</code></li>\n</ul>\n<small>New in 2018.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "ConfigurationProperties",
          "displayName": "Spring Boot @ConfigurationProperties",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nVerifies <code>@ConfigurationProperties</code> setup.\n<small>New in 2018.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "SpringBootAdditionalConfig",
          "displayName": "Spring Boot additional-spring-configuration-metadata.json",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nChecks Spring Boot <code>additional-spring-configuration-metadata.json</code> configuration file.\nHighlights unresolved references and invalid values.\n</body>\n</html>"
        },
        {
          "shortName": "SpringBootReactorHooksOnDebug",
          "displayName": "Suspicious Hooks.onOperatorDebug() usage",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Highlights usage of <code>Hooks.onOperatorDebug()</code> when <code>ReactorDebugAgent.init()</code> is called.\n  Starting from Spring 2.2.0, if <code>ReactorDebugAgent</code> is in the classpath, and <code>spring.reactor.debug-agent.enabled</code>\n  is <code>true</code> (by default, it is <code>true</code>) <code>ReactorDebugAgent.init()</code> is called automatically at\n  startup.\n  Using both <code>Hooks.onOperatorDebug()</code> and <code>ReactorDebugAgent.init()</code> cause doubled debugging stack frames,\n  generated by Reactor. Also, <code>Hooks.onOperatorDebug()</code> can cause performance overhead.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SpringBootApplicationProperties",
          "displayName": "Spring Boot application.properties",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nChecks Spring Boot application <code>.properties</code> configuration files.\nHighlights unresolved and deprecated configuration keys and invalid values.\n<!-- tooltip end -->\n<p>\n  Values inside replacement token (<code>@property.key@</code>) will not be highlighted.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "DeferredResultUnused",
          "displayName": "Deferred result is never used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls with <b>Deferred</b> result that is never used,\nso nobody will wait for execution of all related actions.\n</body>\n</html>"
        },
        {
          "shortName": "UnsafeCastFromDynamic",
          "displayName": "Implicit (unsafe) cast from dynamic type",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports expressions with a dynamic type in the specified inspection scope that are implicitly cast to another type.\n</body>\n</html>\n"
        },
        {
          "shortName": "KDocUnresolvedReference",
          "displayName": "Unresolved reference in KDoc",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html><body>\nThis inspection reports unresolved references in KDoc comments.\n</body></html>"
        },
        {
          "shortName": "ConvertNaNEquality",
          "displayName": "Convert equality check with 'NaN' to 'isNaN' call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports an equality check with <b>Double.NaN</b> which can be replaced with <b>a.isNaN()</b>.\n\nFor every floating point value <b>a</b>, <b>a == NaN</b> will always result in <b>false</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ControlFlowWithEmptyBody",
          "displayName": "Control flow with empty body",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports that <b>if</b>, <b>when</b>, <b>for</b>, <b>while</b> and also expressions has empty body.\n</body>\n</html>"
        },
        {
          "shortName": "SuspendFunctionOnCoroutineScope",
          "displayName": "Ambiguous coroutineContext due to CoroutineScope receiver of suspend function",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls & accesses of <b>CoroutineScope</b> extensions or members\ninside suspend functions with <b>CoroutineScope</b> receiver.\n\nBoth suspend functions and <b>CoroutineScope</b> members & extensions have access to <b>coroutineContext</b>.\nWhen some function is simultaneously suspend <b>and</b> has <b>CoroutineScope</b> receiver,\nit has ambiguous access to <b>CoroutineContext</b>:\nfirst via <b>kotlin.coroutines.coroutineContext</b> and second via <b>CoroutineScope.coroutineContext</b>,\nand two these contexts are different in general case.\nSo when we call some <b>CoroutineScope</b> extension or access <b>coroutineContext</b> from such a function,\nit's unclear which from these two context do we have in mind.\n\nNormal ways to fix this are to wrap suspicious call inside <b>coroutineScope { ... }</b> or\nto get rid of <b>CoroutineScope</b> function receiver.\n</body>\n</html>"
        },
        {
          "shortName": "SetterBackingFieldAssignment",
          "displayName": "Existing backing field is not assigned by the setter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a setter of a property with a backing field that doesn't update the backing field.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceArrayEqualityOpWithArraysEquals",
          "displayName": "Replace '==' with 'Arrays.equals'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects usages of <b>==</b> or <b>!=</b> operator for arrays that should be replaced with <b>contentEquals</b>.\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousVarProperty",
          "displayName": "Suspicious 'var' property: its setter does not influence its getter result",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>var</b> properties with default setter and getter that doesn't reference backing field.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinCovariantEquals",
          "displayName": "Covariant 'equals()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>equals()</b> methods taking an argument type other than <b>Any?</b>.\nOnly reports if the containing class does not have another <b>equals()</b> method which does take <b>Any?</b> as its argument type.\nNormally, this is a mistake.\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousEqualsCombination",
          "displayName": "Suspicious combination of == and ===",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports when <b>==</b> and <b>===</b> comparisons are both used on the same variable within a single expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "WrapUnaryOperator",
          "displayName": "Ambiguous unary operator use with number constant",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a unary operator followed by a dot qualifier (such as <b>-1.inc()</b>) that is potentially wrong, because it has a lower precedence.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConflictingExtensionProperty",
          "displayName": "Extension property conflicting with synthetic one",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports extension properties that conflict with synthetic ones automatically produced from Java <b>get/set</b> methods. These properties should be either removed or renamed to avoid breaking code by future changes in the compiler.\n</body>\n</html>\n"
        },
        {
          "shortName": "UselessCallOnCollection",
          "displayName": "Useless call on collection type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports filter-like calls on already filtered collections, e.g. <b>listOf(\"abc\").filterNotNull()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "CanSealedSubClassBeObject",
          "displayName": "Sealed sub-class without state and overridden equals",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports direct inheritors of <b>sealed class</b> that have no state and no overridden <b>equals</b>.\nIt's highly recommended to override <b>equals</b> to provide comparison stability or convert <b>class</b> to <b>object</b> with the same effect.\n</body>\n</html>"
        },
        {
          "shortName": "RecursiveEqualsCall",
          "displayName": "Recursive equals call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports recursive <b>equals</b> calls. For example:\n<br /><br />\n\n<pre>\nclass X {\n    override fun equals(other: Any?): Boolean {\n        if (this == other) return true // recursive equals call\n        return false\n    }\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "LateinitVarOverridesLateinitVar",
          "displayName": "lateinit var property overrides lateinit var property",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports when one lateinit var property overrides another lateinit var property.\nAn instance of a subclass will have two fields for the single property and the one from a superclass remains effectively unused.\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousCollectionReassignment",
          "displayName": "Augmented assignment creates a new collection under the hood",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports augmented assignment on read-only <b>Collection</b> that creates a new <b>Collection</b> under the hood.\nExample:\n<br /><br />\n\n<pre>\n<b>var</b> list = listOf(1, 2, 3)\nlist <b>+=</b> 4 // A new list is created, better use mutableListOf instead\n</pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitNullableNothingType",
          "displayName": "Implicit `Nothing?` type",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports variables / functions with implicit <b>Nothing?</b> type.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedLambdaExpressionBody",
          "displayName": "Unused return value of a function with lambda expression body",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls with an unused return value when the called function returns a lambda from an expression body.\nThis can happen when someone accidentally puts <b>=</b> between function header and body block.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyRange",
          "displayName": "Range with start greater than endInclusive is empty",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports ranges that are empty because the <b>start</b> value is greater than the <b>endInclusive</b> value.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinEqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>equals()</b> between objects of inconvertible primitive / enum / string types.\n</body>\n</html>"
        },
        {
          "shortName": "SelfReferenceConstructorParameter",
          "displayName": "Constructor has non-null self reference parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports constructor that has a non-null self reference parameter. A class with such a constructor can never be instantiated.\n</body>\n</html>"
        },
        {
          "shortName": "SelfAssignment",
          "displayName": "Assignment of variable to itself",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects assignments of a variable to itself.\n</body>\n</html>\n"
        },
        {
          "shortName": "UselessCallOnNotNull",
          "displayName": "Useless call on not-null type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls on not-null receiver that make sense only for nullable receiver, e.g.\n\n<pre><b>\nlistOf(1).orEmpty()\n</b></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "DataClassPrivateConstructor",
          "displayName": "Private data class constructor is exposed via the 'copy' method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports private constructors of data classes because they are always exposed via the generated <b>copy</b> method.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinThrowableNotThrown",
          "displayName": "Throwable not thrown",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports creating of <b>Throwable</b> and subclasses, where the created <b>Throwable</b> is never actually thrown.\nAlso reports function calls which return <b>Throwable</b> instances, where the result of the function call is not thrown.\n</body>\n</html>"
        },
        {
          "shortName": "ForEachParameterNotUsed",
          "displayName": "Iterated elements are not used in forEach",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection guards against useless forEach loops by identifying when the iterable's values are not used.\n</body>\n</html>"
        },
        {
          "shortName": "ArrayInDataClass",
          "displayName": "Array property in data class",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports array properties in a data class without overridden <b>equals()</b> or <b>hashCode()</b> inside.\nDue to default <b>equals()</b> behaviour for arrays in JVM, it is strongly recommended to override <b>equals()</b> and <b>hashCode()</b> in such cases.\n</body>\n</html>\n"
        },
        {
          "shortName": "MoveSuspiciousCallableReferenceIntoParentheses",
          "displayName": "Suspicious callable reference used as lambda result",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a lambda expression with one callable reference because it is a common error to replace a lambda with a callable reference without changing curly braces to parentheses.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedDataClassCopyResult",
          "displayName": "Unused result of data class copy",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unused result of data class copy function call.\n</body>\n</html>\n"
        },
        {
          "shortName": "LeakingThis",
          "displayName": "Leaking 'this' in constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports dangerous operations inside constructors including:\n\n<ul>\n  <li>Accessing a non-final property in constructor</li>\n  <li>Calling a non-final function in constructor</li>\n  <li>Using <b>this</b> as a function argument in a constructor of a non-final class</li>\n</ul>\n\nThese operations are dangerous because your class can be inherited,\nand a derived class is not yet initialized at this moment. Typical example:\n<br /><br />\n\n<pre>\n<b>abstract class</b> Base {\n    <b>val</b> code = calculate()\n    <b>abstract fun</b> calculate(): Int\n}\n\n<b>class</b> Derived(<b>private val</b> x: Int) : Base() {\n    <b>override fun</b> calculate() = x\n}\n\n<b>fun</b> testIt() {\n    println(Derived(42).code) <i>// Expected: 42, actual: 0</i>\n}\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "IncompleteDestructuring",
          "displayName": "Incomplete destructuring declaration",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports incomplete destructuring declaration.\n</body>\n</html>\n"
        },
        {
          "shortName": "EqualsOrHashCode",
          "displayName": "'equals()' and 'hashCode()' not paired",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports classes that override <b>equals()</b> but do not override <b>hashCode()</b>, or vice versa, which could potentially lead to problems when a class is added to a <b>Collection</b>.\nIt also reports object declarations which override either <b>equals()</b> or <b>hashCode()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "MainFunctionReturnUnit",
          "displayName": "Entry point function should return Unit",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a entry point function with incorrect return type (should be <b>Unit</b>).\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedUnaryOperator",
          "displayName": "Unused unary operator",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unary operators that are not used.\n</body>\n</html>"
        },
        {
          "shortName": "DestructuringWrongName",
          "displayName": "Variable in destructuring declaration uses name of a wrong data class property",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports entries of destructuring declarations that match the name of a different property of the destructured data class.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedEquals",
          "displayName": "Unused equals expression",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unused <b>equals</b> expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "RecursivePropertyAccessor",
          "displayName": "Recursive property accessor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports recursive property accessor calls which can end up with a <b>StackOverflowError</b>. For example:\n<br /><br />\n\n<pre>\n<b>class</b> A {\n    <b>var</b> x = 0\n        <b>get</b>() {\n            <b>return</b> x //recursive getter call\n        }\n\n    <b>var</b> y = 0\n        <b>set</b>(value) {\n            <b>if</b> (value > 0) {\n                y = value //recursive setter call\n            }\n        }\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "DelegationToVarProperty",
          "displayName": "Delegating to 'var' property",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports delegation to <b>var</b> property.\nIn fact, only starting value of <b>var</b> property is used for delegation so it's not recommended to do so.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "WSDL",
      "inspections": [
        {
          "shortName": "WsdlHighlightingInspection",
          "displayName": "WSDL",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nCommon WSDL checks.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Unused",
      "inspections": [
        {
          "shortName": "PhpUnusedFieldDefaultValueInspection",
          "displayName": "Redundant property initializer",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n  <body>\n    Reports the fields with default initializers that are always overwritten in the class constructor.\n  </body>\n</html>"
        },
        {
          "shortName": "PhpUnusedPrivateMethodInspection",
          "displayName": "Unused private method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the private methods that are never used.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnusedParameterInspection",
          "displayName": "Unused parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the parameters that are considered unused in the following cases:\n  <ul>\n    <li>The parameter is passed by value, and the value is not used anywhere or is overwritten immediately.</li>\n    <li>The parameter is passed by reference, and the reference is not used anywhere or is overwritten immediately.</li>\n  </ul>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnused",
          "displayName": "Unused declaration",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the classes, methods, functions, constants, or properties that\nare not used or not reachable from entry points. It also reports all method implementations/overriders.\n<p>Some unused members might not be reported in the code editor on the fly. Due to performance reasons, a non-private member is checked only\n  when its name rarely occurs in the project.\n</p>\n<p>To see all results, run the inspection in batch mode by using <b>Code | Inspect Code...</b> or <b>Code | Run Inspection by\n  Name...</b>.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnusedLocalVariableInspection",
          "displayName": "Unused local variable",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the variables that are considered unused in the following cases:\n<ul>\n  <li>The value of the variable is not used anywhere or is overwritten immediately.</li>\n  <li>The reference stored in the variable is not used anywhere or is overwritten immediately.\n  </li>\n</ul>\n<p>By default, the inspection is disabled for global space.\n  To enable it, select the <b>Enable inspection in global space</b> checkbox below.\n</p>\n<p>See <a href=\"http://php.net/manual/en/language.namespaces.global.php\">global space (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnusedAliasInspection",
          "displayName": "Unused import",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the imports that are never used.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnusedPrivateFieldInspection",
          "displayName": "Unused private property",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the private properties that are never used.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 15",
      "inspections": [
        {
          "shortName": "TextBlockMigration",
          "displayName": "Text block can be used",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nSuggests to replace string literals with text blocks.\n<p>\nRequirements:\n<ul>\n  <li><code>\\n</code> occurs two or more times.</li>\n  <li>Text blocks are not concatenated.</li>\n</ul>\n<p>\nUse the <b>Apply to single string literals</b> option to suggest the fix for single literals containing line breaks.\n<p>\n<!-- tooltip end -->\nExample:\n<pre><code>\n  String html = \"&lt;html&gt;\\n\" +\n                \"    &lt;body&gt;\\n\" +\n                \"        &lt;p>Hello, world&lt;/p&gt;\\n\" +\n                \"    &lt;/body&gt;\\n\" +\n                \"&lt;/html&gt;\\n\";\n</code></pre>\n<p>can be replaced with</p>\n<pre><code>\n  String html = \"\"\"\n                &lt;html&gt;\n                    &lt;body&gt;\n                        &lt;p>Hello, world&lt;/p&gt;\n                    &lt;/body&gt;\n                &lt;/html&gt;\n                \"\"\";\n</code></pre>\n<p>This inspection only reports if the configured language level is 15 or higher.</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "TextBlockBackwardMigration",
          "displayName": "Text block can be replaced with regular string literal",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nSuggests to replace text block with a regular string literal.\n<!-- tooltip end -->\n<p>Example:\n<pre><code>\n  Object obj = engine.eval(\"\"\"\n                           function hello() {\n                             print('\"Hello, world\"');\n                           }\n\n                           hello();\n                           \"\"\");\n</code></pre>\n<p>can be replaced with</p>\n<pre><code>\n  Object obj = engine.eval(\"function hello() {\\n\" +\n                           \"  print('\\\"Hello, world\\\"');\\n\" +\n                           \"}\\n\" +\n                           \"\\n\" +\n                           \"hello();\\n\");\n</code></pre>\n<p>This inspection only reports if the configured language level is 15 or higher.</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Visibility",
      "inspections": [
        {
          "shortName": "Java9ModuleExportsPackageToItself",
          "displayName": "Module exports/opens package to itself",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThe inspection detects a situation where a package is exported or opened to the same Java 9 module where it's defined.\n<br>Example:\n<code>module <b>B</b> { exports org.example to A, <b>B</b>, C; }</code>\n</body>\n</html>"
        },
        {
          "shortName": "Java9UndeclaredServiceUsage",
          "displayName": "Usage of service not declared in 'module-info'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThe inspection detects situations when a service is loaded with <code>java.util.ServiceLoader</code>\nbut it isn't declared with <code>uses</code> clause in the <code>module-info.java</code> file.\n<p>\n  <small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverloadsParentMethod",
          "displayName": "Method overloads method of superclass",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports instance methods having the same name and the same number of parameters with the same or compatible types as\na method in a superclass. In this case, the child method overloads the parent method, instead of overriding it.\nWhile that may be intended, if unintended it may result in latent bugs.\n<!-- tooltip end -->\n<p>\nUse the checkbox below also report even if the parameter types are not compatible.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverridesInaccessibleMethodOfSuper",
          "displayName": "Method overrides inaccessible method of superclass",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with the same signature as an inaccessible method from super class, e.g. package-private method of super class in another package or private method.\nSuch methods may result in confusing semantics, particularly if the super method is ever made\npublicly visible. A package-private method can only properly be overridden if\nthe subclass resides in the same package. Private methods can't be overridden.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassVariableHidesOuterClassVariable",
          "displayName": "Inner class field hides outer class field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports inner class variables being named identically to member variables of a containing class.\nSuch a variable name may be confusing.\n<!-- tooltip end -->\n<p>\nUse the checkbox below the indicate whether this inspection should report all name clashes, or only\nclashes with fields which are visible from the inner class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterHidingMemberVariable",
          "displayName": "Parameter hides field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters named identically to visible fields of their class\nor surrounding classes if it is a parameter inside of an inner or anonymous class.\nSuch a parameter name may be confusing.\n<!-- tooltip end -->\n<p>\nUse the first checkbox to ignore parameters of simple setters.\n<p>\nUse the second checkbox to ignore for private fields in a superclass, which are not visible from the parameter.\n<p>\nUse the third checkbox to ignore parameters of constructors.\n<p>\nUse the fourth checkbox to ignore parameters of abstract methods.\n<p>\nUse the fifth checkbox to ignore parameters of <b>static</b> methods hiding an instance field and\nto ignore parameters of instance methods in static inner classes hiding an instance field in an outer class.\nWhile not strictly hiding, such parameters can still be confusing.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldHidesSuperclassField",
          "displayName": "Field name hides field in superclass",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields with the same name as a field in an ancestor class. Such field\nnames may be confusing, and can be bug-prone.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to indicate whether this inspection should report all name clashes, or only\nclashes with fields which are visible from the subclass.\n<p>\nUse the second checkbox below to ignore <b>static</b> fields which hide <b>static</b> fields in super classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterHidesVisibleType",
          "displayName": "Type parameter hides visible type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports type parameters being named\nidentically to visible types in the current scope. Such a parameter name may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassEscapesItsScope",
          "displayName": "Non-accessible class is exposed",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of classes in field types and in method signatures where the class is less visible than the field or the method.\n<p>\n  Examples are a <b>public</b> method which returns a <b>private</b> inner class, or a <b>protected</b> field\n  whose type is a package-visible class.<br>\n  While legal Java, such fields and methods aren't useful outside of the visibility scope of the classes used in the field or the method.\n<p>\n  In addition to that, in Java 9 a module may hide some of its classes by not exporting their packages.<br>\n  If the public API of a class in an exported package references a class from non-exported package,\n  such API isn't useful outside of the module.\n<!-- tooltip end -->\n<p>\n  The options of what is checked are:\n<ul>\n  <li>The module API - the public&protected fields&methods within exported packages (for Java 9+)</li>\n  <li>The public&protected fields&methods (the \"public API\") in all packages</li>\n  <li>The package-local fields&methods</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterHidingMemberVariable",
          "displayName": "Lambda parameter hides field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda parameters named identically to fields of the surrounding classes or their superclasses.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore fields that are not actually visible from the lambda expression.\nFor example <b>private</b> fields in a super class.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AmbiguousMethodCall",
          "displayName": "Call to inherited method looks like call to local method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports ambiguous super method calls from inside an inner or anonymous class, where a method\nwith identical signature is available in the surrounding class. In this situation a cursory\nexamination of the code may suggest a method in the surrounding class is\ncalled, when in actual fact a method from the super class is called. To clarify the\nintent of the code it is recommended to add a\n<b>super</b> qualifier to the method call.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassVariableHidesContainingMethodVariable",
          "displayName": "Anonymous class variable hides variable in containing method",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous class variables being named identically to variables of a containing method or lambda expression.\nSuch a variable name may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AmbiguousFieldAccess",
          "displayName": "Access of inherited field looks like access of element in surrounding code",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports ambiguous accesses of a super class field from an inner or anonymous class, where a local variable, parameter or field with identical name is available\nin the surrounding code. In this situation a cursory examination of the code may suggest that an element in the surrounding code is\naccessed, when in actual fact a field from the super class is accessed. To clarify the intent of the code it is recommended to add a\n<b>super</b> qualifier to the field access.\n<p>Example:\n<pre><code>\n<b>class</b> X {\n  <b>protected</b> String s;\n}\n<b>class</b> Y {\n  <b>void</b> foo(String s) {\n    <b>new</b> X() {{\n      System.out.println(s); // here the field is accessed not the parameter\n    }};\n  }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverridesStaticMethod",
          "displayName": "Method tries to override static method of superclass",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>static</b> methods with an identical signature as a <b>static</b> method of a superclass.\nBecause <b>static</b> methods cannot override methods in superclasses, this may result in confusing semantics.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableHidingMemberVariable",
          "displayName": "Local variable hides field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables named identically to fields of their class\nor surrounding classes if it is a local variable inside of an inner or anonymous class.\nSuch a variable name may be confusing.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore local variables hiding a super class field which is not visible (e.g. because it's <b>private</b>).\n<p>\nUse the second checkbox below to ignore local variables in a static context, named identically to a non-<b>static</b> field.\nFor example when the local variable is inside a <b>static</b> method\nor inside a method which is inside an inner class which is <b>static</b>.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports single char alternation (e.g. <b><code>a|b|c|d</code></b>) in a RegExp.\nIt is simpler to use a character class (<b><code>[abcd]</code></b>) instead.\nThis usually also provides slightly better matching performance.\n<!-- tooltip end -->\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports the escaped meta characters, e.g. <b><code>\\.</code></b>.\nSome RegExp coding styles specify that meta characters should be placed inside a character class,\nto make the regular expression easier to understand.\nFor example the regex <b><code>\\d+\\.\\d+</code></b> would be written as <code>\\d+[.]\\d+</code>.\nThis inspection does not warn about the meta character <b><code>[</code></b>, <b><code>]</code></b> and <b><code>^</code></b>,\nbecause those would need additional escaping inside a character class.\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpRedundantNestedCharacterClass",
          "displayName": "Redundant nested character class",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary nested character classes.\nFor example <code>[a-c[x-z]]</code>, which is equivalent too <code>[a-cx-z]</code>.\n<!-- tooltip end -->\n<p><small>New in 2020.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports octal escapes, which are easily confused with back references.\nUse hexadecimal escapes to avoid confusion.\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports anonymous capturing groups and numeric back references in a RegExp.\nThese are only reported when the RegExp dialect supports named group and named group references.\nNamed groups and named back references improve code readability and are recommended to use instead.\nWhen a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,\ni.e. <b>(?:xxx)</b> instead of <b>(xxx)</b>.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpDuplicateCharacterInClass",
          "displayName": "Duplicate character in character class",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate characters inside a RegExp character class. For example <code>[++]</code>.\nDuplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports <code>^</code> or <code>\\A</code> anchors not at the beginning of the pattern and\n<code>$</code>, <code>\\Z</code> or <code>\\z</code> anchors not at the end of the pattern.\nIn the wrong position these RegExp anchors prevent the pattern from matching anything.\nIn case of the <code>^</code> and <code>$</code> anchors, most likely the literal character was meant and the escape forgotten.\n<!-- tooltip end -->\n<p>\n<small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports duplicate branches in a RegExp alternation. For example <code>(a|b|a)</code>.\nDuplicate branches slow down matching and obscure the intent of the expression.\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports character escapes that are replaceable with the unescaped character without a change in meaning.\nNote that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\nFor example the regex <b><code>[\\.]</code></b> is identical to <b><code>[.]</code></b>\n<!-- tooltip end -->\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports empty branches in a RegExp alternation. For example:<br> <code>a<b>||</b>b</code>\n<p>An empty branch will only match the empty string, and in most cases that is not what is desired.\nThis inspection will not report a single empty branch at the start or the end of an alternation.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports multiple consecutive spaces in a RegExp.\nBecause spaces are not visible by default, it can be hard to see how many spaces are required.\nThe RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n<!-- tooltip end -->\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Cloud Stream",
      "inspections": [
        {
          "shortName": "SpringCloudStreamInconsistencyInspection",
          "displayName": "Spring Cloud Stream handler methods errors",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Spring Cloud Stream handler methods errors."
        },
        {
          "shortName": "SpringCloudStreamMessageChannelInspection",
          "displayName": "Unresolved message channel",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "Highlights unresolved channel attributes in @StreamListener, @SendTo, @Output, @Input."
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "PhpWrongCatchClausesOrderInspection",
          "displayName": "Wrong catch clauses order",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>catch</code> clauses listed in the incorrect order and the exception classes caught twice.\n<p>\n  The <code>catch</code> clauses must be ordered from more specific to more generic ones. Otherwise, some exceptions may not be caught by the most specific handler.\n</p>\n<p>\n  See <a href=\"http://www.php.net/manual/en/language.exceptions.php\">Exceptions (php.net)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnhandledExceptionInspection",
          "displayName": "Unhandled exception",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports the exceptions that are neither enclosed in a <code>try-catch</code> block nor documented via the <code>@throws</code> tag.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantCatchClauseInspection",
          "displayName": "Redundant catch clause",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>catch</code> clauses with exceptions that are never thrown from the corresponding <code>try</code> block.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "SyntaxError",
          "displayName": "Syntax error",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nAllows you to see syntax errors in the results of batch code inspection.\n</body>\n</html>"
        },
        {
          "shortName": "DefaultFileTemplate",
          "displayName": "Default File Template Usage",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspections reports usage of the default file template for File Header.\n <p>\nAlso, the inspection proposes to change default file template and its usage.\n</body>\n</html>"
        },
        {
          "shortName": "DuplicatedCode",
          "displayName": "Duplicated code fragment",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "Reports duplicated blocks of code from the selected scope: the same file, same module, dependent modules, or the entire project.<!-- tooltip end --> The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments and compare them in a tool window. When possible, the inspection provides a quick-fix to extract method from the duplicated code.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments, and set the initial size for the duplicated language constructs.\n\nYou can also configure the constructs that you want to anonymize in <a href=\"settings://duplicates.index\"> File | Settings | Editor | Duplicates</a>."
        },
        {
          "shortName": "LongLine",
          "displayName": "Line is longer than allowed by code style",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nInspection warns you of lines which are longer than <b>right margin</b> parameter in <b>Code Style</b> settings.\n</body>\n</html>"
        },
        {
          "shortName": "SSBasedInspection",
          "displayName": "Structural search inspection",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>This inspection allows to configure number of <b>Structural Search/Structural Replace</b> templates to be applied to the file you are editing.\n</p>\n<p>All matches are highlighted with the template name you have configured.\nIf you configured <b>Structural Replace</b> pattern, corresponding replace would appear as a quick fix.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ProjectFingerprint",
          "displayName": "Project fingerprint",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Collects files statistics (e.g. language, tree depth) to create project fingerprint\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>TODO</b> comments in your code. The Format of\n<b>TODO</b> comments is configurable via the <a href=\"settings://preferences.toDoOptions\">Settings | Editor | TODO</a> panel. Since\nsyntax highlighting for <b>TODO</b> comments is already provided, it is expected that this will largely\nbe used in batch mode.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nChecks references injected by IntelliLang plugin.\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\n  This inspection detects files with line separators different from the project default.\n  E.g. you set the line separator to \"\\n\" in the Settings|Editor|Code Style|Line separator,\n  and the file you are editing uses \"\\r\\n\" as a line separator.\n\n  Also warns about mixed line separators in the file.\n</body>\n</html>"
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports tabs used for indentation when the code style is configured to use only spaces. Reports spaces used for indentation when\nthe code style is configured to use only tabs. Reports spaces used for indentation and tabs used for alignment when the code\nstyle is configured to use smart tabs.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nAllows you to see problems reported by language annotators in the results of batch code inspection.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of\n<ul>\n  <li><code>@SuppressWarning</code> annotation, or</li>\n  <li><code>// noinspection</code> line comment, or</li>\n  <li><code>/** noinspection */</code> JavaDoc comment</li>\n</ul>\n\nwhich can be safely removed because inspection they affect is no longer applicable in this context.\n<p>\n  For example:\n  <code><pre>\n<b><font color=\"#000080\">public class</font></b> C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n <b><font color=\"#000080\">private boolean</font></b> CONST = <b><font color=\"#000080\">true</font></b>;\n <b><font color=\"#000080\">void</font></b> f() {\n    CONST = <b><font color=\"#000080\">false</font></b>;\n  }\n}\n</pre>\n  </code>\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Encapsulation",
      "inspections": [
        {
          "shortName": "PackageVisibleInnerClass",
          "displayName": "Package-visible nested class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports package-private nested classes.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore package-private inner enums.\n<p>\nUse the seconds checkbox below to ignore package-private inner interface.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentOrReturnOfFieldWithMutableType",
          "displayName": "Assignment or return of field with mutable type",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to return or assign an array, <b>Collection</b>, <b>java.lang.Date</b> or\n<b>java.lang.Calendar</b> field from a method parameter.\nSince arrays, <b>Collection</b>, <b>Date</b> and <b>Calendar</b> are mutable, this construct may\nresult in an object having its state modified unexpectedly from outside the owning class.\nWhile occasionally useful for performance reasons, this construct is inherently bug prone.\n\n<!-- tooltip end -->\n<p>Use the checkbox below to ignore assignments and returns in <b>private</b> methods.\n\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedInnerClass",
          "displayName": "Protected nested class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>protected</b> nested classes.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore <b>protected</b> inner enums.\n<p>\nUse the seconds checkbox below to ignore <b>protected</b> inner interface.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicInnerClass",
          "displayName": "'public' nested class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> nested classes.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore <b>public</b> inner enums.\n<p>\nUse the seconds checkbox below to ignore <b>public</b> inner interface.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedField",
          "displayName": "Protected field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>protected</b> instance variables.\nConstants (i.e. variables marked <b>static</b> and <b>final</b>) are not reported.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfAnotherObjectsPrivateField",
          "displayName": "Accessing a non-public field of another object",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of another object's private or protected fields. Java\nallows the use of such fields for objects of the same class as the current objects, but\nsome coding styles discourage this use. Additionally, such direct access to private fields\nmay fail in component-oriented architectures such (e.g. Spring, Hibernate) which expect all access\nto other objects to be through method calls so as to allow the framework to mediate all access\nusing proxies.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore accesses from the same class and only report accesses\nfrom inner or outer classes.\n  To ignore accesses from inner classes also, use the nested checkbox.\n<p>\nUse the second checkbox below to ignore accesses from an <b>equals()</b> method.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageVisibleField",
          "displayName": "Package-visible field",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports package-visible instance variables.\nConstants (i.e. variables marked <b>static</b> and <b>final</b>) are not reported.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicField",
          "displayName": "'public' field",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>public</b> fields.\nConstants (i.e. variables marked <b>static</b> and <b>final</b>) are not reported.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Fields annotated with one of these annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to ignore <b>public</b> <b>final</b> fields of an <b>enum</b> type.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "GPath",
      "inspections": [
        {
          "shortName": "GroovyListSetCanBeKeyedAccess",
          "displayName": "Call to List.set can be keyed access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.List.set()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyListGetCanBeKeyedAccess",
          "displayName": "Call to List.get can be keyed access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.List.get()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMapPutCanBeKeyedAccess",
          "displayName": "Call to Map.put can be keyed access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.Map.put()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMapGetCanBeKeyedAccess",
          "displayName": "Call to Map.get can be keyed access",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.Map.get()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Other problems",
      "inspections": [
        {
          "shortName": "OverridingDeprecatedMember",
          "displayName": "Overriding deprecated member",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports deprecated members being overridden.\n</body>\n</html>\n"
        },
        {
          "shortName": "PublicApiImplicitType",
          "displayName": "Public API declaration has implicit return type",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>public</b> and <b>protected</b> functions and properties that have an implicit return type.\nFor API stability reasons, it's recommended to specify such types explicitly.\n</body>\n</html>\n"
        },
        {
          "shortName": "KDocMissingDocumentation",
          "displayName": "Missing KDoc comments for public declarations",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html><body>\nThis inspection reports public declarations that do not have KDoc comments.\n</body></html>"
        },
        {
          "shortName": "MigrateDiagnosticSuppression",
          "displayName": "Diagnostic name should be replaced",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports suppressions with old diagnostic names, for example <b>@Suppress(\"HEADER_WITHOUT_IMPLEMENTATION\")</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceWithEnumMap",
          "displayName": "Replace with EnumMap",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>hashMapOf</b> and similar function calls replaceable with the constructor of <b>EnumMap</b>.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedCallableAddReplaceWith",
          "displayName": "@Deprecated annotation without 'replaceWith' argument",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports deprecated functions and properties that do not have a <b>kotlin.ReplaceWith</b> argument in its <b>kotlin.deprecated</b> annotation\nand there is a suggestion to add one based on the body.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Redundant constructs",
      "inspections": [
        {
          "shortName": "RemoveEmptyParenthesesFromLambdaCall",
          "displayName": "Remove unnecessary parentheses from function call with lambda",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unnecessary parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantExplicitType",
          "displayName": "Explicitly given type is redundant here",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports local variables' explicitly given types which are obvious and thus redundant, like <b>val f: Foo = Foo()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "NullChecksToSafeCall",
          "displayName": "Null-checks replaceable with safe-calls",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports when chained null-checks can be replaced with safe-calls.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyWhenWithBooleanConstantCondition",
          "displayName": "Simplifiable 'when'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects <b>when</b> expressions with <b>true</b> or <b>false</b> branches that can be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantSemicolon",
          "displayName": "Redundant semicolon",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant semicolon (<b>;</b>) tokens which are not required in Kotlin and may be removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantEnumConstructorInvocation",
          "displayName": "Redundant enum constructor invocation",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant enum entry constructor invocation:\n\n<pre>\nenum class Foo {\n    A(), // This '()' is redundant.\n    B(),\n    C\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantReturnLabel",
          "displayName": "Redundant 'return' label",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant return label outside of lambda.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinDoubleNegation",
          "displayName": "Redundant double negation",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant double negation usages, like <b>val truth = !!true</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantCompanionReference",
          "displayName": "Redundant Companion reference",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant <b>Companion</b> reference, for example:\n<br /><br />\n\n<pre>\n<b>class</b> A {\n    <b>companion object</b> {\n        <b>fun</b> create() = \"Hello\"\n    }\n}\n<b>fun</b> test() {\n    <b>val</b> s = A.Companion.create() // redundant Companion reference\n}\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveExplicitTypeArguments",
          "displayName": "Unnecessary type argument",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports function calls with type arguments that can be safely removed and inferred.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantUnitExpression",
          "displayName": "Redundant 'Unit'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSamConstructor",
          "displayName": "Redundant SAM constructor",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports SAM constructor usages which can be replaced with lambdas.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinRedundantOverride",
          "displayName": "Redundant overriding method",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant <b>override</b> modifiers which can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantElvisReturnNull",
          "displayName": "Redundant '?: return null'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant '<b>?: return null</b>':\n<br /><br />\n<pre>\nfun foo(): Int? {\n  ...\n}\n\nfun test() : Int? {\n  return foo() ?: return null\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "RemoveEmptyPrimaryConstructor",
          "displayName": "Remove empty primary constructor",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects an empty primary constructor when it would be implicitly available anyway.\n</body>\n</html>"
        },
        {
          "shortName": "ConstantConditionIf",
          "displayName": "Condition of 'if' expression is constant",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b> expressions whose condition is constant and therefore the expression can be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveExplicitSuperQualifier",
          "displayName": "Unnecessary supertype qualification",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>super</b> member calls with redundant supertype qualification.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceWithIgnoreCaseEquals",
          "displayName": "Replace with 'equals(..., ignoreCase = true)'",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports case insensitive comparison that can be replaced with <b>equals(..., ignoreCase = true)</b>.\nBy using <b>equals()</b> you won't have to allocate any extra strings with <b>toLowerCase()/toUpperCase()</b> to do the comparison.\n<br><br>\nFor example:\n<br>\n<pre>\nfun main() {\n    val a = \"KoTliN\"\n    val b = \"KOTLIN\"\n    println(a.toLowerCase() == b.toLowerCase()) // can be replaced with \"a.equals(b, ignoreCase = true)\"\n}\n</pre>\n<br><br>\n<b>Note:</b> May change semantics for some locales.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveSingleExpressionStringTemplate",
          "displayName": "Remove redundant string template",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports single-expression string templates that can be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantLambdaOrAnonymousFunction",
          "displayName": "Redundant creation of lambda or anonymous function",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>This inspection reports lambdas or anonymous functions that are created and used immediately.</p>\n<!-- tooltip end -->\n<pre><code>\n<b>fun</b> test() {\n    ({ println() })() // redundant\n    (<b>fun</b>() { println() })() // redundant\n}\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSuspendModifier",
          "displayName": "Redundant 'suspend' modifier",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a <b>suspend</b> modifier as redundant if no other suspend functions are called inside.\n</body>\n</html>\n"
        },
        {
          "shortName": "WhenWithOnlyElse",
          "displayName": "'when' has only 'else' branch and can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>when</b> expressions with only an <b>else</b> branch that can be simplified to the <b>else</b> branch's expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBeParameter",
          "displayName": "Constructor parameter is never used as a property",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports primary constructor parameters that can have <b>val</b> or <b>var</b> removed.\nUnnecessary usage of <b>val</b> or <b>var</b> in the primary constructor consumes memory.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantNullableReturnType",
          "displayName": "Redundant nullable return type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspections reports functions/variables with nullable return type always returns non-null.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantLambdaArrow",
          "displayName": "Redundant lambda arrow",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports lambdas without parameters that use the lambda arrow.\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBePrimaryConstructorProperty",
          "displayName": "Property is explicitly assigned to constructor parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports properties which are explicitly assigned to constructor parameters and can be declared directly in the constructor instead.\n</body>\n</html>"
        },
        {
          "shortName": "RemoveSetterParameterType",
          "displayName": "Redundant setter parameter type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports explicitly given parameter types in property setters.\nA setter parameter type always matches the property type, so it's not required to be explicit.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveCurlyBracesFromTemplate",
          "displayName": "Redundant curly braces in string template",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports usages of curly braces in a string template around a simple identifier.\n</body>\n</html>\n"
        },
        {
          "shortName": "ComplexRedundantLet",
          "displayName": "Redundant argument-based `let` call",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects a redundant argument-based <b>let</b> call.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantModalityModifier",
          "displayName": "Redundant modality modifier",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports modality modifiers which match the default modality of an element\n(<b>final</b> for most elements, <b>open</b> for members with an <b>override</b>).\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantIf",
          "displayName": "Redundant 'if' statement",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b> statements which can be simplified to single statements. For example:\n<br /><br />\n\n<pre>\n<b>if</b> (foo()) {\n   <b>return true</b>\n} <b>else</b> {\n   <b>return false</b>\n}\n</pre>\n\n<p>can be simplified to <b>return foo()</b>.</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedReceiverParameter",
          "displayName": "Unused receiver parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports an unused receiver parameter of extension functions and properties.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveToStringInStringTemplate",
          "displayName": "Remove redundant call to 'toString()' in string template",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports calls to <b>toString()</b> in string templates that can be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryVariable",
          "displayName": "Unnecessary local variable",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports local variables either used only in the very next <b>return</b> statement or exact copies of other variables.\nIn both cases it's better to inline such a variable.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveEmptyClassBody",
          "displayName": "Replace empty class body",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports and offers to remove an empty class body.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantCallsOfConversionMethods",
          "displayName": "Remove redundant calls of conversion methods",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant calls of conversion methods (for example, <b>toString()</b> on a <b>String</b>).\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantInnerClassModifier",
          "displayName": "Redundant 'inner' modifier",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a <b>inner</b> class modifier as redundant if no members of outer class are referenced inside.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveForLoopIndices",
          "displayName": "Unused loop index",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>for</b> loops iterating over a collection of values using a <b>withIndex()</b> function with index variable not used in the loop body.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantUnitReturnType",
          "displayName": "Redundant 'Unit' return type",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> return type which can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "UnusedSymbol",
          "displayName": "Unused symbol",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinUnusedImport",
          "displayName": "Unused import directive",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSetter",
          "displayName": "Redundant property setter",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant property setters.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantSpreadOperator",
          "displayName": "Redundant spread operator",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports the use of a redundant spread operator for a family of <b>arrayOf</b> function calls.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantVisibilityModifier",
          "displayName": "Redundant visibility modifier",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantEmptyInitializerBlock",
          "displayName": "Redundant empty initializer block",
          "defaultSeverity": "INFO",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant empty initializer block.\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantQualifierName",
          "displayName": "Remove redundant qualifier name",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant qualifier name in references. For example:\n<pre>\n<b>package</b> my.simple.name\n<b>class</b> Foo\n\n<b>fun</b> test() {\n    <b>val</b> s = my.simple.name.Foo() // redundant qualifier name\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ExplicitThis",
          "displayName": "Redundant explicit 'this'",
          "defaultSeverity": "INFORMATION",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports usages of explicit <b>this</b> when it can be omitted.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantRequireNotNullCall",
          "displayName": "Redundant 'requireNotNull' or 'checkNotNull' call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>This inspection reports redundant <b>requireNotNull</b> or <b>checkNotNull</b> call:\n\n<pre>\nfun foo(i: Int) {\n  requireNotNull(i) // This 'i' is always not null, so this 'requireNotNull' call is redundant.\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "RemoveRedundantBackticks",
          "displayName": "Remove redundant backticks",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant backticks in references.\n</body>\n</html>"
        },
        {
          "shortName": "SimpleRedundantLet",
          "displayName": "Redundant receiver-based `let` call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects a redundant receiver-based <b>let</b> call.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantGetter",
          "displayName": "Redundant property getter",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports redundant property getters.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveEmptySecondaryConstructorBody",
          "displayName": "Remove empty constructor body",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection detects empty bodies of secondary constructors.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantWith",
          "displayName": "Redundant 'with' call",
          "defaultSeverity": "WEAK WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports a redundant <b>with</b> function call that don't access anything from the receiver.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "InfiniteRecursion",
          "displayName": "Infinite recursion",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports methods which must either recurse\ninfinitely or throw an exception. Methods reported by this inspection can not\nreturn normally.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorResultComparison",
          "displayName": "Suspicious usage of compare method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection warns when result of <b>Comparator.compare</b> or <b>Comparable.compareTo</b> is compared with\n  specific non-zero constant (like <b>if(a.compareTo(b) == -1)</b>). By contract,\n  these methods can return any positive number (not just 1) or any negative number (not just -1), so comparing against\n  particular numbers is a bad practice.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ArrayHashCode",
          "displayName": "'hashCode()' called on array",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>hashCode()</b> being called\non an array. To get the same hash code for two arrays\nwith identical contents call <b>Arrays.hashCode()</b>.\nUse <b>Arrays.deepHashCode()</b> to calculate the hash\ncode of a multi-dimensional array.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "MismatchedArrayReadWrite",
          "displayName": "Mismatched read and write of array",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any array fields or variables whose contents are read but not written,\nor written but not read. Such mismatched reads and writes are pointless, and probably indicate\ndead, incomplete or erroneous code.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CastToIncompatibleInterface",
          "displayName": "Casting to incompatible interface",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports type cast expressions where\nthe cast type is an interface, and the cast expression has a class type which neither\nimplements the cast interface, nor has any visible subclasses which implement or extend the cast interface.\nWhile it is possible that this was intended, such a construct is most likely an error, and will\nresult in a <b>java.lang.ClassCastException</b> at runtime.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousToArrayCall",
          "displayName": "Suspicious 'Collection.toArray()' call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports two types of suspicious calls to <b>Collection.toArray()</b>.\nThe first type is any calls where the type of the specified array argument is not of the same type as the array type to which the result is casted.\nExample:\n<pre><code>\nvoid m(List list) {\n  Number[] ns = (Number[])\n      list.toArray(new String[0]);\n}\n</code></pre>\nThe second type is any calls where the type of the specified array argument does not match the type parameter of the collection declaration.\nExample:\n<pre><code>\nvoid m(List&lt;Number&gt; list) {\n  Number[] ns =\n      list.toArray(new String[0]);\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MalformedFormatString",
          "displayName": "Malformed format string",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports malformed format strings. Format strings\nare reported if they are compile-time constants used as arguments to appropriate methods on\n<b>java.util.Formatter</b>,\n<b>java.lang.String</b>,\n<b>java.io.PrintWriter</b>,\nor <b>java.io.PrintStream</b>\nand do not fit the standard Java format string syntax.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsWhichDoesntCheckParameterClass",
          "displayName": "'equals()' method which does not check class of parameter",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>equals()</b>\nmethods which do not check the type of their parameter. Failure to check the type of the parameter\nin the <b>equals()</b> method may result in latent errors if the object is later used in an untyped collection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SubtractionInCompareTo",
          "displayName": "Subtraction in 'compareTo()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports subtraction in\n<b>compareTo()</b> methods and methods implementing <b>java.util.Comparator.compare()</b>. While it is a common idiom to\nuse the results of integer subtraction as the result of a <b>compareTo()</b>\nmethod, this construct may cause subtle and difficult bugs in cases of integer overflow.\nComparing the integer values directly and returning <b>-1</b>, <b>0</b>, or <b>1</b> is better practice in most cases.\n<p>\n  The subtraction on floating point values which is immediately cast to integral type is also warned as precision loss is possible due to\n  rounding.\n</p>\n<p>\nThe warning is not issued when it's statically determined that value ranges are limited, and overflow never occurs.\nAdditionally subtraction on <b>int</b> numbers greater than or equal to <b>0</b> will never overflow.\nTherefore this inspection tries not to warn in those cases.\nMethods that always return zero or greater can be specified in this inspection's settings.\n<p>\n<!-- tooltip end -->\n<p>\nUse the table below to specify methods which are safe to use inside a subtraction.\nMethods are safe when they return an <b>int</b> value that is always greater than or equal to <b>0</b>.\nAlternatively you may use <b>javax.annotation.Nonnegative</b> annotation on such methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <b>.equals()</b> where the target and argument are\nof incompatible types. While such a call might theoretically be useful, most likely it represents\na bug.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringEqualsCharSequence",
          "displayName": "'String.equals()' called with 'CharSequence' argument",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>String.equals()</b> calls on a <b>CharSequence</b> argument.\n<b>String.equals()</b> can only return <b>true</b> for <b>String</b> arguments.\nTo compare the contents of a String for equality with a non-String CharSequence argument, use the <b>contentEquals()</b> method.\n<!-- tooltip end -->\n<p>\n<small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ComparableImplementedButEqualsNotOverridden",
          "displayName": "Comparable implemented but 'equals()' not overridden",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which implement <b>java.lang.Comparable</b>\nwhich do not override <b>equals()</b>. If <b>equals()</b>\nis not overridden, the <b>equals()</b> implementation is not consistent with\nthe <b>compareTo()</b> implementation. If an object of such a class is added\nto a collection such as <b>java.util.SortedSet</b>, this collection will violate\nthe contract of <b>java.util.Set</b>, which is defined in terms of\n<b>equals()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAllDot",
          "displayName": "Suspicious regex expression argument",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to\n<b>String.replaceAll()</b> or <b>String.split()</b> where the first argument is a single regex meta character argument.\nThe regex meta characters are one of \".$|()[{^?*+\\\", and these have a special meaning in regular expressions.\nFor example calling <b>\"ab.cd\".replaceAll(\".\", \"-\")</b> produces <b>\"-----\"</b>, because the dot matches any character.\nMost likely the escaped variant <b>\"\\\\.\"</b> was intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NewStringBufferWithCharArgument",
          "displayName": "StringBuilder constructor call with 'char' argument",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any <b>new StringBuffer()</b>\nand <b>new StringBuilder()</b> calls with an argument\nof type <b>char</b>. Such an argument is silently\ncast to an integer and interpreted as initial capacity of the buffer. Usually this is\nnot what was intended.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InvalidComparatorMethodReference",
          "displayName": "Invalid method reference used for Comparator",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports method references mapped to Comparator interface which don't fulfill its contract.\n<p>\nSome method references like <code>Integer::max</code> can be mapped to <code>Comparator</code> interface.\nHowever using them as <code>Comparator</code> is meaningless and result might be unpredictable.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationMissingWhitespace",
          "displayName": "String literal concatenation missing whitespace",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports string concatenations where the left-hand side does not\nend with whitespace or a symbol and the right-hand side does not start with whitespace or a symbol. For example:\n<pre><code>\n  String sql = \"SELECT column\" +\n               \"FROM table\";\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection only report when both the left and right side of the concatenation are literals.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CopyConstructorMissesField",
          "displayName": "Copy constructor misses field",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports copy constructors that don't copy all fields in the class.\nFields with the modifier <b>transient</b> are considered unnecessary to copy.\n<p><small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'equals()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>equals()</b> which access\nnon-<b>final</b> variables. Such access may result in <b>equals()</b>\nreturning different results at different points in an object's lifecycle, which may in turn cause problems when\nusing the standard Collections classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PrimitiveArrayArgumentToVariableArgMethod",
          "displayName": "Confusing primitive array argument to varargs method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to a variable arity method where the call has a primitive array in\nthe variable arity parameter position (e.g <b>System.out.printf(\"%s\", new int[]{1, 2, 3})</b> ).\nSuch a primitive-array argument may be confusing, as it will be wrapped as a single-element array, rather than each individual\nelement being boxed, as might be expected.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CompareToUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'compareTo()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>compareTo()</b> which access\nnon-<b>final</b> variables. Such access may result in <b>compareTo()</b>\nreturning different results at different points in an object's lifecycle, which may in turn cause problems when\nusing the standard Collections classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NumberEquality",
          "displayName": "Number comparison using '==', instead of 'equals()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b> to test for Number equality,\ninstead of an <b>equals()</b> call. With auto-boxing it is easy\nto make the mistake of comparing two Integer (or other subclass of java.lang.Number) objects instead\nof two ints.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofIncompatibleInterface",
          "displayName": "'instanceof' with incompatible interface",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>instanceof</b> expressions where\nthe compared type is an interface, and the compared expression has a class type which neither\nimplements the compared interface, nor has any visible subclasses which implement or extend the compared interface.\nWhile it is possible that this was intended, such a construct is most likely an error, where\nthe resulting <b>instanceof</b> expression always evaluates to\n<b>false</b>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ArrayObjectsEquals",
          "displayName": "'Objects.equals()' called on arrays",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>java.util.Objects.equals()</b> called on two arrays.\nCalling <b>java.util.Objects.equals()</b> with array arguments compares identity and is equivalent to using <b>==</b>.\nUse <b>Arrays.equals()</b> to compare the contents of two arrays\nor <b>Arrays.deepEquals()</b> to compare the contents of two multi-dimensional arrays.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "MathRandomCastToInt",
          "displayName": "'Math.random()' cast to 'int'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to <b>Math.random()</b> which are immediately\ncast to <b>int</b>. Casting a <b>double</b> between <b>0.0</b> (inclusive) and\n<b>1.0</b> (exclusive) will always round down to zero. A <b>Math.random()</b> value\nshould first be multiplied with some factor before casting it to an <b>int</b> to\nget a value between zero (inclusive) and the multiplication factor (exclusive).\nAnother possible solution would be to use the <b>nextInt()</b> method of\n<b>java.util.Random</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousSystemArraycopy",
          "displayName": "Suspicious 'System.arraycopy()' call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports suspicious calls to <b>System.arraycopy()</b>.\nWarnings reported by this inspection are:\n<ul>\n<li>source or destination which are not of an array type.\n<li>source and destination have a different type.\n<li>copied chunk length is always bigger than src.length - srcPos.\n<li>copied chunk length is always bigger than dest.length - destPos.\n<li>ranges always intersect in case, when source and destination is the same array.\n</ul>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNewInstance",
          "displayName": "Unsafe call to 'Class.newInstance()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to\n<b>java.lang.Class.newInstance()</b>.\nThe <b>newInstance</b> method propagates any\nexception thrown by the no-arg constructor, including checked exceptions. Use\nof this method effectively bypasses the compile-time exception checking that\nwould otherwise be performed by the compiler. Replacing such a method call with\na call to the <b>java.lang.reflect.Constructor.newInstance()</b>\nmethod avoids this problem by wrapping any exception thrown by the constructor\nin a <b>java.lang.reflect.InvocationTargetException</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ArrayEquality",
          "displayName": "Array comparison using '==', instead of 'Arrays.equals()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b> to test for array equality,\nrather than the <b>java.util.Arrays.equals()</b> method.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ObjectToString",
          "displayName": "Call to default 'toString()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>.toString()</b>\nwhich use the default implementation from <b>java.lang.Object</b>.\nThe default implementation is rarely desired, but easy to use by accident. Calls\nto <b>.toString()</b> on objects with\n<b>java.lang.Object</b>, interface or abstract class type are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments and function calls where the name of the variable to which\na value is assigned or the function parameter does not seem to match the name of the value assigned to it.\nFor example:\n<pre><code><font color=\"#000080\">\n  <b>int</b> x = 0;\n  <b>int</b> y = x;</font></code></pre> or <pre><code><font color=\"#000080\">\n  <b>int</b> x = 0, y = 0;\n  Rectangle rc = <b>new</b> Rectangle(y, x, 20, 20);</font></code></pre>\nThe configuration pane allows to specify the names which should not be used together: the error is reported\nif the parameter name or assignment target name contains words from one group and the name of the assigned or passed\nvariable contains words from a different group.\n</body>\n</html>"
        },
        {
          "shortName": "ConstantConditions",
          "displayName": "Constant conditions & exceptions",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports code that always produces the same result, throws an exception, or may violate nullability contracts.\n<p>Examples:</p>\n<pre>\n<code>if (array.length &lt; index) {\n  System.out.println(array[index]);\n} // Array index is always out of bounds\n\nif (str == null) System.out.println(\"str is null\");\nSystem.out.println(str.trim());\n// the last statement may throw an NPE\n\n@NotNull\nInteger square(@Nullable Integer input) {\n    // the method contract is violated\n    return input == null ? null : input * input;\n}</code></pre>\n<p>\n  Use the inspection options to fine-tune annotation processing policy and adjust the list of situations that should be checked.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "StringConcatenationInFormatCall",
          "displayName": "String concatenation as argument to 'format()' call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as a format string argument.\nOften this is the result of mistakenly concatenating a string format argument by typing a '+'\nwhen a ',' was meant.\nThis inspection checks calls to appropriate methods on\n<b>java.util.Formatter</b>,\n<b>java.lang.String</b>, \n<b>java.io.PrintWriter</b>,\nor <b>java.io.PrintStream</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "HashCodeUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'hashCode()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>hashcode()</b> which access\nnon-<b>final</b> variables. Such access may result in <b>hashcode()</b>\nreturning different values at different points in an object's lifecycle, which may in turn cause problems when\nusing the standard Collections classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports collection fields or variables whose contents are either queried and\nnot updated, or updated and not queried. Such mismatched queries and updates are pointless, and may indicate\neither dead code or a typographical error.\n<!-- tooltip end -->\n<p>\nUse the tables below to specify which methods are update and/or query methods. The names are matched with\nthe beginning of the method name. Query methods which return their result are automatically detected, only\nquery methods which return their result in an argument (e.g. write to OutputStream) need to be specified.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptyStatementBody",
          "displayName": "Statement with empty body",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>if</b>, <b>while</b>, <b>do</b>, <b>for</b> and <b>switch</b> statements\nhaving empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.\n<!-- tooltip end -->\n<p>\nThis inspection is disabled in JSP files.\n<p>\nUse the first checkbox below to indicate whether this inspection should report statements whose body is an\nempty code block, rather than just empty statements.\n<p>\nUse the second checkbox below to ignore empty statement bodies which contain a comment.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsAndHashcode",
          "displayName": "'equals()' and 'hashCode()' not paired",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that override the\n<b><font color=\"#000080\">equals()</font></b> method but do not override the\n<b><font color=\"#000080\">hashCode()</font></b> method, or vice versa, which could potentially lead to problems\nwhen the class is added to a <b><font color=\"#000080\">Collection</font></b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "NonShortCircuitBoolean",
          "displayName": "Non-short-circuit boolean expression",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any uses of the non-short-circuit forms of boolean 'and' and 'or' (<b>&</b>\nand <b>|</b>). The non-short-circuit versions are occasionally useful, but\ntheir presence is often due to typos of the short-circuit forms (<b>&&</b>\nand <b>||</b>), and may lead to subtle bugs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitArrayToString",
          "displayName": "Call to 'toString()' on array",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any arrays used in <b>String</b>\nconcatenations or as parameters to <b>java.io.PrintStream</b>\nmethods (such as <b>System.out.println()</b>). Usually in such\na case, the contents of the array were meant to be used and not the array object itself.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OptionalGetWithoutIsPresent",
          "displayName": "Optional.get() is called without isPresent() check",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>Optional.get()</b> method calls without an earlier check that the optional has a value.\nIf the optional is empty, calling <b>Optional.get()</b> will throw an exception.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReflectionForUnavailableAnnotation",
          "displayName": "Reflective access to a source-only annotation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any attempts to reflectively check for the presence of an\nannotation which is not defined as being retained at runtime.\nUsing <b>Class.isAnnotationPresent()</b> to test for an annotation\nwhich has source retention or class-file retention (the default) will always result in a negative result,\nbut is easy to do inadvertently.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedStringCase",
          "displayName": "Mismatched case in String operation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports string methods calls that always return the same value (-1 or false) because a lowercase character is searched in an\nuppercase-only string or vice versa. Reported methods include 'equals', 'startsWith', 'endsWith', 'contains', 'indexOf', and 'lastIndexOf'.\nExample:\n<pre>\n  if (columnName.toLowerCase().equals(\"ID\")) {...} // condition is always false\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticCallOnSubclass",
          "displayName": "Static method referenced via subclass",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports static method calls where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself\n(e.g. <b>MyThreadSubclass.sleep()</b>). Java allows such qualification, but such calls\nmay be confusing, and may indicate a subtle confusion of inheritance and overriding.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IgnoreResultOfCall",
          "displayName": "Result of method call ignored",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports method calls whose result is ignored.\nThe following method calls are inspected:\n<ul>\n  <li>Calls to simple getters (which do nothing except return a field)</li>\n  <li>Calls to methods specified in the settings of this inspection</li>\n  <li>Calls to methods annotated with <code>org.jetbrains.annotations.Contract(pure=true)</code></li>\n  <li>Calls to methods annotated with .*.<code>CheckReturnValue</code></li>\n  <li>Calls to methods located in a class annotated with <code>javax.annotation.CheckReturnValue</code></li>\n  <li>Calls to methods located in a package annotated with <code>javax.annotation.CheckReturnValue</code></li>\n  <li>Optionally, all calls to non-library methods</li>\n</ul>\n<p>For many methods, ignoring the result is perfectly\nlegitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring\nthe result is likely an error include <code>java.io.inputStream.read()</code>,\nwhich returns the number of bytes actually read, and any method on\n<code>java.lang.String</code> or <code>java.math.BigInteger</code>. These methods do not produce side-effects and thus pointless if ignored.\n<!-- tooltip end -->\n<p>\nUse the panel below to specify the names of the classes containing the methods and method name patterns of the methods you wish to check.\nClass names are specified using their fully-qualified names and apply to both the class and all its inheritors.\nMethod name patterns use the Java regular expression syntax.\n<p>\nUse the checkbox below to report all calls to non-library methods whose result is ignored\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EndlessStream",
          "displayName": "Non-short-circuit operation consumes infinite stream",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports non-short-circuit operations consuming an infinite stream. Such operations can only be completed by throwing an exception.\n<!-- tooltip end -->\n<p>Example:</p>\n<p><code>\n  Stream.iterate(0, i -> i + 1).collect(Collectors.toList())\n</code></p>\n</body>\n</html>"
        },
        {
          "shortName": "TextLabelInSwitchStatement",
          "displayName": "Text label in 'switch' statement",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports labelled statements inside of <b>switch</b> statements.\nWhile occasionally intended, this construction is often the result of a typo.\n<pre>\n    <b>switch</b> (x) {\n        <b>case</b> 1:\n        case2:   //typo!\n        <b>case</b> 3:\n            <b>break</b>;\n    }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousArrayMethodCall",
          "displayName": "Suspicious Arrays method calls",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports when a non-generic-array manipulation method like <code>Arrays.fill()</code> is called with mismatched argument types.\nSuch a call will not do anything useful and is likely a mistake.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Contract",
          "displayName": "Contract issues",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports various method contract (@Contract annotation) well-formedness issues:\n<li>Errors in contract syntax</li>\n<li>Contracts not conforming to the method signature (wrong parameter count)</li>\n<li>Method implementations that contradict the contract (e.g. returning \"true\" when the contract says \"false\")</li>\n</body>\n</html>"
        },
        {
          "shortName": "InstantiationOfUtilityClass",
          "displayName": "Instantiation of utility class",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>new</b> expressions which instantiate utility classes.\nUtility classes have all fields and methods declared <b>static</b>, and their\npresence may indicate a lack of object-oriented design. Instantiation of such classes most likely indicates\nprogrammer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectEquality",
          "displayName": "Object comparison using '==', instead of 'equals()'",
          "defaultSeverity": "INFORMATION",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b>to test for Object equality, rather than the <b>equals()</b> method.\nComparisons to <b>null</b> are not reported.\nComparison of arrays, Strings or Numbers using <b>==</b> are also not reported, there are separate inspections for these three problems.\n<!-- tooltip end -->\n<p>\nUse the checkboxes below to indicate whether uses of <b>==</b> between objects of\nan enumerated type, final class types without equals implementation or types with private constructors should be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NewObjectEquality",
          "displayName": "New object is compared using '=='",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when <b>==</b> or <b>!=</b> is applied to a newly allocated object\ninstead of an <b>equals()</b> call. Newly allocated objects cannot be equal to other objects,\nthus the compared objects are always unequal. The inspection also may detect \nnewly created objects returned from simple methods.\n<!-- tooltip end -->\n<p>\n  <small>New in 2018.3</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantOperationOnEmptyContainer",
          "displayName": "Redundant operation on empty container",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant operations on empty collections, maps or arrays. Iterating, removing elements, sorting, \nand some other operations on empty collections have no effect and could be removed or signal about a possible bug. \n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CastConflictsWithInstanceof",
          "displayName": "Cast conflicts with 'instanceof'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports type cast expressions which are surrounded by an\n<b>instanceof</b> check for a different type.\nWhile it is possible that this was intended, such a construct is most likely an error, and will\nresult in a <b>java.lang.ClassCastException</b> at runtime.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IterableUsedAsVararg",
          "displayName": "Iterable is used as vararg",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports suspicious usages of <b>Collection</b> or an <b>Iterable</b> in vararg method calls. E.g. given method \n  <pre>&lt;T&gt; boolean contains(T needle, T... haystack) {...}</pre> \n<p>a call like</p>\n  <pre>if(contains(\"item\", listOfStrings)) {...}</pre> \n<p>looks suspicious as the list will be wrapped into a single element array. \n  Such code can be successfully compiled and likely run without\n  exceptions, but it's unlikely intended.</p>\n<!-- tooltip end -->\n<p><small>New in 2019.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringTokenizerDelimiter",
          "displayName": "Duplicated delimiters in java.util.StringTokenizer",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports StringTokenizer delimiter arguments which contain duplicated characters.\n</body>\n</html>"
        },
        {
          "shortName": "ResultSetIndexZero",
          "displayName": "Use of index 0 in JDBC ResultSet",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempts to access column 0 of a <b>java.sql.ResultSet</b> or <b>java.sql.PreparedStatement</b>. For historical\nreasons columns of <b>java.sql.ResultSet</b>s and <b>java.sql.PreparedStatement</b>s are numbered beginning with 1, rather than\n0, and accessing column 0 is a common error in JDBC programming.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousArrayCast",
          "displayName": "Suspicious array cast",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious array casts. An array cast is suspicious when it casts to a more specific array type. Such\na cast is legal at compile time but may fail with a <b>ClassCastException</b> at runtime.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousMethodCalls",
          "displayName": "Suspicious collections method calls",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n\nReports method calls to parameterized collections, where actual argument type does not\ncorrespond to the collection's elements type. <br> <br>\nFor example if you have the following code: <br> \n<pre>\n&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Integer&gt; list = getListOfElements();\n&nbsp;&nbsp;&nbsp;&nbsp;list.remove(\"\");\n</pre>\n\n- the call to <b><font color=\"#000080\">remove()</font></b> will be highlighted. <br>\n\n<p>\n\n  The option '<b>Report suspicious but possibly correct method calls</b>' makes it possible to ignore\n  potentially correct code, like this: <br>\n\n  <pre>\n&nbsp;&nbsp;&nbsp;&nbsp;Number number = <b><font color=\"#000080\">new</font></b> Integer(<font color=\"#0000FF\">0</font>);\n&nbsp;&nbsp;&nbsp;&nbsp;list.remove(number));\n  </pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedAssignment",
          "displayName": "Unused assignment",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nPoints out cases where a variable value\nis never used after its assignment, i.e.: <br>\n&nbsp;- the variable never gets read after assignment OR <br>\n&nbsp;- the value is always overwritten with another assignment before the next variable read OR <br>\n&nbsp;- the variable initializer is redundant (for one of the above two reasons)\n</body>\n</html>\n"
        },
        {
          "shortName": "StringEquality",
          "displayName": "String comparison using '==', instead of 'equals()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b> to compare strings, which compares object identity.\nIn most cases strings should be compared with an <b>equals()</b> call instead,\nwhich does a character-by-character comparison when the strings are different objects.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertWithSideEffects",
          "displayName": "'assert' statement with side effects",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any <b>assert</b> statements\nthat cause side effects outside of the assert statement. Since assertions can be\nswitched off, the side effects are not guaranteed to happen and can cause subtle bugs.\nCommon unwanted side effects detected by this inspection are modifications of variables\nand fields in the assert statement. Also methods called are analyzed one level deep\nfor any modifications of fields.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassGetClass",
          "displayName": "Class.getClass() call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports when <b>getClass()</b> method is called on <b>java.lang.Class</b> instance. This is usually a mistake as the result is\n  always equivalent to <b>Class.class</b>. If it's mistake then the <b>getClass()</b> call should be removed and qualifier should be used\n  directly. If the behavior is intended, then it's better to write <b>Class.class</b> explicitly to avoid confusion.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledEquals",
          "displayName": "'equal()' instead of 'equals()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any declaration of a <b>equal()</b> method, taking one argument.\nNormally, this is a typo of <b>equals()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WrongPackageStatement",
          "displayName": "Wrong package statement",
          "defaultSeverity": "ERROR",
          "enabled": true,
          "description": "<html>\n<body>\nDetects <b>package</b> statements that do not correspond to the project directory structure\nand reports classes without <b>package</b> statements.\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassReferencedViaSubclass",
          "displayName": "Inner class referenced via subclass",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses of inner and nested classes where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself. Java\nallows such qualification, but such accesses\nmay be confusing, and may indicate a subtle confusion of inheritance and overriding.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "VariableNotUsedInsideIf",
          "displayName": "Reference checked for 'null' is not used inside 'if'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to variables which are checked for nullity\nin the condition of an <b>if</b> statement or\nconditional expression but which are not used inside the\n<b>if</b> statement. Usually this either means that\nthe check is unnecessary or that the variable is not referenced inside the\n<b>if</b> statement because of a typo.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedStringBuilderQueryUpdate",
          "displayName": "Mismatched query and update of StringBuilder",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any StringBuilder or StringBuffer fields or variables whose contents are read but not written,\nor written but not read. Such mismatched reads and writes are pointless, and probably indicate\ndead, incomplete or erroneous code.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorMethodParameterNotUsed",
          "displayName": "Suspicious 'Comparator.compare()' implementation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports problems found in <b>Comparator.compare()</b> implementations:\n<ul>\n  <li>Warns if parameter is not used. Most likely this is the result of a typing mistake and one parameter is compared\n    with itself or the method is not implemented correctly.</li>\n  <li>Warns if it's evident that comparator does not return 0 for same elements. Such comparator violates the contract\n    and result of sorting could be unpredictable if equal elements are encountered. In particular,\n    sorting method may fail with exception on some data sets.</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CollectionAddedToSelf",
          "displayName": "Collection added to self",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports cases where the argument of a method call on a <b>java.util.Collection</b>\nor <b>java.util.Map</b> is the collection or map itself.\nThis includes adding a collection to itself, which can lead to a <b>java.lang.StackOverflowError</b> when,\nfor example, calling <b>hashCode()</b> on the self-containing collection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInMessageFormatCall",
          "displayName": "String concatenation as argument to 'MessageFormat.format()' call",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as an argument to a call to\n<b>MessageFormat.format()</b>.\nOften this is the result of mistakenly concatenating a string format argument by typing\na '+' when a ',' was meant.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "IteratorHasNextCallsIteratorNext",
          "displayName": "'Iterator.hasNext()' which calls 'next()'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>Iterator.hasNext()</b> or <b>ListIterator.hasPrevious()</b>\nthat call <b>Iterator.next()</b> or <b>ListIterator.previous()</b> on themselves. \nSuch calls are almost certainly in error, as methods like <b>hasNext()</b>\nshould not modify the iterators state, while <b>next()</b> should.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EqualsWithItself",
          "displayName": "'equals()' called on itself",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <b>equals()</b> or <b>compareTo()</b> were an object is compared for equality with itself.\nThis means the argument and the qualifier to the call are identical, and it will always return <b>true</b> for <b>equals()</b>\nor always <b>0</b> for <b>compareTo()</b>.\nAlso reports call to static methods <b>Objects.equals()</b>, <b>Objects.deepEquals()</b>, <b>Arrays.equals()</b>, <b>Comparator.compare</b>\nand similar methods with two identical arguments.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousDateFormat",
          "displayName": "Suspicious date format pattern",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports date format patterns that are likely used by mistake.\nUsages of the following patterns are reported:\n<ul>\n  <li>Uppercase \"Y\", unless \"w\" appears nearby because it's a \"Week year\" that almost always \n    the same as normal \"Year\" (lowercase \"y\" pattern), but may point to the next year\n    at the end of December.</li>\n  <li>Uppercase \"M\" (month) close to \"H\", \"K\", \"h\", or \"k\" (hour). It's likely that a lowercase \"m\" (minute) was intended</li>\n  <li>Lowercase \"m\" (minute) close to \"y\" (year) or \"d\" (day in month). It's likely that an uppercase \"M\" (month) was intended</li>\n  <li>Uppercase \"D\" (day in year) close to \"M\", or \"L\" (month). It's likely that a lowercase \"d\" (day in month) was intended</li>\n  <li>Uppercase \"S\" (milliseconds) close to \"m\" (minutes). It's likely that a lowercase \"s\" (seconds) was intended</li>\n</ul>\n<p>\n  Examples:<br>\n  <code>new SimpleDateFormat(\"YYYY-MM-dd\")</code>: likely <code>\"yyyy-MM-dd\"</code> was intended.<br>\n  <code>new SimpleDateFormat(\"yyyy-MM-DD\")</code>: likely <code>\"yyyy-MM-dd\"</code> was intended.<br>\n  <code>new SimpleDateFormat(\"HH:MM\")</code>: likely <code>\"HH:mm\"</code> was intended.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticFieldReferenceOnSubclass",
          "displayName": "Static field referenced via subclass",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports static field accesses where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself. Java\nallows such qualification, but such accesses\nmay be confusing, and may indicate a subtle confusion of inheritance and overriding.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantAssertCondition",
          "displayName": "'assert' statement condition is constant",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports assert statement conditions which are constants. Assert\nstatements with constant conditions will either always fail or always succeed.\nSuch statements can easily be left over after refactoring and are probably a bug.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverflowingLoopIndex",
          "displayName": "Loop executes zero or billions times",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports loops that cannot complete without an index overflow or that don't loop at all.\n<!-- tooltip end -->\nUsually it happens because of a mistake in the update operation\n<p>Example:</p>\n<pre>\n<code>\n  void foo(int s) {\n    for (int i = s; i > 12; i++) { // i-- should be here\n      System.out.println(i);\n    }\n  }\n</code>\n</pre>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousListRemoveInLoop",
          "displayName": "Suspicious 'List.remove()' in the loop",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports when <strong>list.remove(index)</strong> is called inside the ascending counted loop. This is suspicious as list becomes\nshorter after that and the element next to removed will not be processed. Simple fix is to decrease the index variable after removal,\nbut probably removing via iterator or using <strong>removeIf</strong> method (since Java 8) is a more robust alternative.\nIf you don't expect that <strong>remove</strong> will be called more than once in a loop, consider adding a <strong>break</strong> command\nafter it.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CovariantEquals",
          "displayName": "Covariant 'equals()'",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>equals()</b> methods taking an argument type other than <b>java.lang.Object</b>.\nOnly reports if the containing class does not have another <b>equals()</b> method\nwhich does take <b>java.lang.Object</b> as its argument type. Normally, this is a mistake.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousIntegerDivAssignment",
          "displayName": "Suspicious integer division assignment",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when the right side of the assignment is a division that shouldn't be truncated to integer.\n<p>\n  For example, the following code doesn't change <b>x</b> because of the integer division result:\n<pre><code>\n  <b>int</b> x = 18;\n  x *= 3/2;\n</code></pre>\nSo, it should be replaced with:\n<pre><code>\n  <b>int</b> x = 18;\n  x *= 3.0/2;\n</code></pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2019.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "CapturingCleaner",
          "displayName": "Cleaner captures object reference",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports Runnable passed to Cleaner.register() capturing reference that leads to memory leak.\nPossible sources of this problem:\n<ul>\n  <li>Lambda using non static methods, fields or this itself</li>\n  <li>Non static inner class (anonymous or not) always captures this reference</li>\n  <li>Instance method reference</li>\n  <li>Access to outer class non static members from non static inner class</li>\n</ul>\n<p>This inspection is available since Java 9 only.</p>\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "IteratorNextDoesNotThrowNoSuchElementException",
          "displayName": "'Iterator.next()' which can't throw 'NoSuchElementException'",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>Iterator.next()</b>\nwhich can not throw <b>java.util.NoSuchElementException</b>. Such\nimplementations violate the contract of <b>java.util.Iterator</b>,\nand may result in subtle bugs if the iterator is ever used in a non-standard fashion.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThrowableNotThrown",
          "displayName": "Throwable not thrown",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports instantiations of <b>Throwable</b> and subclasses, where the created <b>Throwable</b>\nis never actually thrown. Also reports method calls which return <b>Throwable</b> instances,\nwhere the result of the method call is not thrown. These are simple mistakes to make which\nare hard to catch in tests.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MagicConstant",
          "displayName": "Magic Constant",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReport occurrences where usages of \"magic\" constants are preferred\nbut other expressions are used instead. <br>\nE.g.\n\n<br> <br>\n\n<code>// bare literal used, warning:</code><br>\n<code><b>new </b> Font(\"Arial\", <span style=\"background-color: yellow;\"><b>2</b></span>)</code><br>\n\n<br>\ninstead of<br> <br>\n\n<code>// \"magic\" constant used, good:</code><br>\n<code><b>new </b> Font(\"Arial\", Font.<b>ITALIC</b>)</code><br>\n\n<br> <br>\n\nPlease see <code>org.intellij.lang.annotations.MagicConstant</code> annotation description for details.\n</body>\n</html>\n"
        },
        {
          "shortName": "ResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports object allocations where the object allocated is ignored, and not assigned to a variable or used in another way.\nSuch allocation expressions are legal Java, but are usually either inadvertent, or\nevidence of a very odd object initialization strategy.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverwrittenKey",
          "displayName": "Overwritten Map key or Set element",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nWarns if <code>Map</code> key or <code>Set</code> element was overwritten in the sequence of add/put calls or using a Java 9 factory method\nlike <code>Set.of</code> (which will result in runtime exception). This usually occurs due to copy-paste error. Example:\n<pre>\n  map.put(\"A\", 1);\n  map.put(\"B\", 2);\n  map.put(\"C\", 3);\n  map.put(\"D\", 4);\n  map.put(\"A\", 5); // duplicating key \"A\", overwrites previously written entry\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousInvocationHandlerImplementation",
          "displayName": "Suspicious InvocationHandler implementation",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports the implementations of <code>InvocationHandler.invoke</code> that do not proxy standard\n<code>Object</code> methods like <code>hashCode()</code>, <code>equals()</code>, and <code>toString()</code>.\nFailing to handle these methods might cause unexpected problems upon calling them on a proxy instance.\n<p>\n  Example:\n</p>\n<pre>\n  Runnable myProxy = (Runnable) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),\n      new Class[] {Runnable.class}, (proxy, method, params) -> {\n        System.out.println(\"Hello World!\");\n        return null;\n      });\n</pre>\n<p>\n  The code snippet above is designed to only proxy the <code>Runnable.run()</code> method. However, the calls to Object’s \n  virtual methods are dispatched as well, which may lead to problems like <code>NullPointerException</code> on trying \n  to add <code>myProxy</code> to a <code>HashSet</code>.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2020.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsOnSuspiciousObject",
          "displayName": "'equals()' called on StringBuilder",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports when <b>equals()</b> is called on specific classes like <b>StringBuilder</b> or <b>StringBuffer</b>.\nThe <b>equals()</b> method is not overridden in these classes, so may return false even when the contents of two objects are the same.\nIf reference equality is intended, it's better to use <b>==</b> to avoid confusion.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousIndentAfterControlStatement",
          "displayName": "Suspicious indentation after control statement without braces",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nReports any suspicious indentation of statements after a control statement\nwithout braces. Such indentation can make it look like the statement is part of the control\nstatement, when in fact it will be executed after the control statement, i.e. unconditionally.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfPropertiesAsHashtable",
          "displayName": "Use of Properties object as a Hashtable",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to the <b>java.util.Hashtable</b>\nmethods <b>put()</b>, <b>putAll()</b> or\n<b>get()</b> on a <b>java.util.Properties</b> object.\nFor reasons lost to history, <b>Properties</b> inherits\nfrom <b>Hashtable</b>, but use of those methods is discouraged\nto prevent corruption of properties values with non-String data.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SortedCollectionWithNonComparableKeys",
          "displayName": "Sorted collection with non-comparable elements",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports construction of sorted collections, for example <code>new TreeSet&lt;&gt;()</code>, that rely on natural ordering,\nbut their element type doesn't implement the <code>Comparable</code> interface.\nIt's unlikely that such a collection will work properly.\n<p>\n  A false positive is possible if the collection element is a non-comparable super-type,\n  but it's intended to hold only comparable sub-types. This is however error-prone.\n  It's better to narrow the collection element type or declare the super-type as <code>Comparable</code>.\n</p>\n<!-- tooltip end -->\n<p>\n  The inspection also reports cases when the collection element is a type parameter which is not declared as <code>extends Comparable</code>.\n  You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).\n</p>\n<p>\n  <small>New in 2018.3</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NullArgumentToVariableArgMethod",
          "displayName": "Confusing argument to varargs method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to a variable arity method where the call has a single argument\nin the variable arity parameter position, which is either a <b>null</b> or an array of a subtype of the variable arity parameter.\nSuch an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.\nFor example <code>System.out.printf(\"%s\", null)</code>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousTernaryOperatorInVarargsCall",
          "displayName": "Suspicious ternary operator in varargs method call",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports vararg method calls that use a ternary operator with mixed array and non-array branches.<br><br>\nWhen compiled, both branches are wrapped in arrays. As a result, the array branch is turned into\na two-dimensional array, which may indicate a problem.<br><br>\nThe quick-fix wraps the non-array branch in an array to prevent the compiler from doing the conversion.<br><br>\nExample:<br><br>\n<code><pre>\n// reported call\nmethod(condition ? new String[] {\"arg1\"} : \"arg2\");\n// after the quick-fix\nmethod(condition ? new String[] {\"arg1\"} : new Object[] {\"arg2\"});\n</pre></code>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ArrayEquals",
          "displayName": "'equals()' called on array",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>equals()</b> being called\nto compare two arrays. Calling <b>equals()</b> on an array\ncompares identity and is equivalent to using <b>==</b>. Use\n<b>Arrays.equals()</b> to compare the contents of two arrays\nor <b>Arrays.deepEquals()</b> to compare the content of two\nmulti-dimensional arrays.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "CDI (Contexts and Dependency Injection)",
      "inspections": [
        {
          "shortName": "CdiDecoratorInspection",
          "displayName": "@Decorator inconsistency errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "@Decorator inconsistency errors.\n"
        },
        {
          "shortName": "CdiObservesInspection",
          "displayName": "@Observer method errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Observer method errors.\n"
        },
        {
          "shortName": "CdiInterceptorInspection",
          "displayName": "@Interceptor errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n@Interceptor errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiStereotypeRestrictionsInspection",
          "displayName": "@Stereotype restrictions",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "If a stereotype declares a requiredType, and the Web Bean API types do not include the type, a DefinitionException is thrown by the Web Bean manager at initialization time.\nIf a stereotype explicitly declares a set of scope types using supportedScopes, and the Web Bean scope is not in that set, a DefinitionException is thrown by the Web Bean manager at initialization time.\nIf a Web Bean declares multiple stereotypes, it must satisfy every restriction declared by every declared stereotype. Multiple stereotypes must specify the same scope OR a scope must be specified on the bean.\n"
        },
        {
          "shortName": "CdiNormalScopeInspection",
          "displayName": "Bean scope inconsistency",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nBean scope inconsistency.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiInjectionPointsInspection",
          "displayName": "Injection points ambiguous dependencies",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nDetects injection points that have ambiguous dependencies.\n</body>\n</html>"
        },
        {
          "shortName": "CdiSpecializesInspection",
          "displayName": "@Specializes inconsistency errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "@Specialize annotation inconsistency errors.\n"
        },
        {
          "shortName": "CdiDisposerMethodInspection",
          "displayName": "Disposer Method errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nDisposer method errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiStereotypeInspection",
          "displayName": "@Stereotype errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n@Stereotype errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiDomBeans",
          "displayName": "Configuration errors in beans.xml",
          "defaultSeverity": "WARNING",
          "enabled": false,
          "description": "<html>\n<body>\nbeans.xml configuration errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiManagedBeanInconsistencyInspection",
          "displayName": "Managed bean inconsistency errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "Validate if a top-level Java class is a simple bean:\n- It is not a parameterized type.\n- It is not a non-static inner class.\n- It is a concrete class, or is annotated @Decorator.\n- It does not implement any of the following interfaces: javax.servlet.Servlet, javax.servlet.Filter, javax.servlet.ServletContextListener, javax.servlet.http.HttpSessionListener, javax.servlet.ServletRequestListener, javax.ejb.EnterpriseBean\n- It does not extend javax.faces.component.UIComponent.\n- It has an appropriate constructor - either: the class has a constructor with no parameters, or the class declares a constructor annotated @Initializer.\n"
        },
        {
          "shortName": "CdiUnknownProducersForDisposerMethodInspection",
          "displayName": "Unknown producers for Disposer method",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\n<p>Validate that Disposer methods have corresponding producer method.</p>\n<p>Each disposer method must have exactly one disposed parameter, of the same type as the corresponding producer method or\n  producer field return type. When searching for disposer methods for a producer method or producer field, the container\n  considers the type and qualifiers of the disposed parameter. If a disposed parameter resolves to a producer method or\n  producer field declared by the same bean class, the container must call this method when destroying any instance returned by\n  that producer method or producer field.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CdiUnproxyableBeanTypesInspection",
          "displayName": "Unproxyable bean types inconsistency",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\nUnproxyable bean types inconsistency. <br>\nCertain legal bean types cannot be proxied by the container: classes which don't have a non-private constructor with no parameters, classes which are declared final or have final methods, primitive types, and array types.\n</body>\n</html>"
        },
        {
          "shortName": "CdiInjectInspection",
          "displayName": "@Inject errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "@Initializer errors.\n"
        },
        {
          "shortName": "CdiTypedAnnotationInspection",
          "displayName": "@Typed annotation errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n@Typed annotation inconsistency. <br>\nWhen a @Typed annotation is explicitly specified, only the types whose classes are explicitly listed using the value member,\ntogether with java.lang.Object, are bean types of the bean.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiScopeInspection",
          "displayName": "Bean @Scope inconsistency",
          "defaultSeverity": "WARNING",
          "enabled": true,
          "description": "<html>\n<body>\nValidates Bean scope inconsistency.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiAlternativeInspection",
          "displayName": "@Alternative errors",
          "defaultSeverity": "ERROR",
          "enabled": false,
          "description": "<html>\n<body>\n@Alternative errors.\n</body>\n</html>\n"
        }
      ]
    }
  ]
}